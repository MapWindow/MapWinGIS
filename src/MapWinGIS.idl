// MapWinGIS.odl : type library source for ActiveX Control project.

// This file will be processed by the Make Type Library (mktyplib) tool to
// produce the type library (MapWinGIS.tlb) that will become a resource in
// MapWinGIS.ocx.

//6-24-2007 Tom Shanley (tws) - define tkHJustification=hjNone (draw label AT the indicated point)
//5-15-2009 Andrew Purkis (ajp) - define tkHJustification = hjRaw (draw rotated lines correctly)  
//27 aug 2009 lsu - added ShapeDrawingOptions class
// june 2017 PaulM - Added IGdalUtils
// sep 2017 jfaust - Extend interfaces of IExtents and IPoint
// feb 2018 jfaust - added Boolean and Date fields

#include <olectl.h>
#include <idispids.h>

import "ocidl.idl";
import "oaidl.idl";

//forward declarations of interfaces
interface IShapeEditor;
interface IShapefileColorBreak;
interface IGridHeader;
interface IShape;
interface IPoint;
interface IExtents;
interface IField;
interface ITable;
interface ICallback;
interface IUtils;
interface IGridColorScheme;
interface IGridColorBreak;
interface IVector;
interface ITin;
interface IShapeDrawingOptions;
interface ILabels;
interface ILabelCategory;
interface ILabel;
interface IShapefileCategories;
interface IShapefileCategory;
interface ICharts;
interface IShapefileColorScheme;
interface IShapefileColorBreak;
interface IChart;
interface IColorScheme;
interface IChartField;
interface ILineSegment;
interface ILinePattern;
interface IStopExecution;
interface IGeoProjection;
interface IGlobalSettings;
interface ITiles;
interface ITileProviders;
interface IMeasuring;
interface IImage;
interface IShapeValidationInfo;
interface IFieldStatOperations;
interface IFileManager;
interface IOgrDatasource;
interface IOgrLayer;
interface IUndoList;
interface IIdentifier;
interface IGdalRasterBand;
interface IHistogram;
interface IGdalDataset;
interface IGdalDriver;
interface IGdalDriverManager;
interface IFunction;
interface IExpression;
interface IWmsLayer;
interface IGdalUtils;

/************************** tkWmsVersion Enumeration **********************/
typedef
[
    uuid(F1045E18-FE93-4172-A7E4-AA67416A93B0),
    helpstring("tkWmsVersion"),
]
enum tkWmsVersion {
    wvEmpty = 0,
    wvAuto = 1,
    wv100 = 2,
    wv110 = 3,
    wv111 = 4,
    wv13 = 5,
} tkWmsVersion;

/************************** tkWmsBoundingBoxOrder Enumeration **********************/
typedef
[
    uuid(A61764EF-141E-4BBF-A719-DE93E780B2A5),
    helpstring("tkWmsBoundingBoxOrder"),
]
enum tkWmsBoundingBoxOrder
{
    bboAuto = 0,
    bboLongLat = 1,
    bboLatLong = 2,
} 	tkWmsBoundingBoxOrder;

/************************** tkCallbackVerbosity Enumeration **********************/
typedef
[
    uuid(77528AF3-A9F0-4F42-9B89-E55FC7221C6A),
    helpstring("tkCallbackVerbosity"),
]
enum tkCallbackVerbosity {
    cvAll = 0,
    cvLimited = 1,
} tkCallbackVerbosity;

/************************** tkFunctionGroup Enumeration **********************/
typedef
[
    uuid(E6FC6622-8DCE-4A1A-9E14-451EC15B0EA4),
    helpstring("tkFunctionGroup"),
]
enum tkFunctionGroup {
    fgMath = 0,
    fgStrings = 1,
    fgGeometry = 2,
    fgBranching = 3,
    fgConversion = 4,
} tkFunctionGroup;

/************************** tkLayerType Enumeration **********************/
typedef
[
    uuid(A2E93C9D-B196-4C82-A646-7C5910E44F6A),
    helpstring("tkLayerType"),
]
enum tkLayerType {
    ltUndefined = 0,
    ltVector = 1,
    ltRaster = 2,
} tkLayerType;

/************************** tkRasterRendering Enumeration **********************/
typedef
[
    uuid(26C06431-8701-4A63-8DE7-DE3D32B19369),
    helpstring("tkRasterRendering"),
]
enum tkRasterRendering {
    rrUnknown = 0,
    rrSingleBand = 1,
    rrRGB = 2,
    rrColorScheme = 3,
    rrBuiltInColorTable = 4,
} tkRasterRendering;

/************************** tkCustomDrawingFlags Enumeration **********************/
typedef
[
    uuid(514343D6-530D-4748-A0F5-B33F883BED3E),
    helpstring("tkCustomDrawingFlags"),
]
enum tkCustomDrawingFlags {
    CustomDrawingNone = 0,
    OnDrawBackBufferHdc = 1,
    OnDrawBackBufferBitmapData = 2,
    BeforeAfterDrawing = 4,
    BeforeAfterLayers = 8,
}tkCustomDrawingFlags;

/************************** tkGdalDataType Enumeration **********************/
typedef
[
    uuid(1963B9D4-929C-41B0-BFF4-476F05C72870),
    helpstring("tkGdalDataType"),
]
enum tkGdalDataType {
    gdtUnknown = 0,  /*! Unknown or unspecified type */
    gdtByte = 1,	  /*! Eight bit unsigned integer */
    gdtUInt16 = 2,   /*! Sixteen bit unsigned integer */
    gdtInt16 = 3,	  /*! Sixteen bit signed integer */
    gdtUInt32 = 4,	  /*! Thirty two bit unsigned integer */
    gdtInt32 = 5,	  /*! Thirty two bit signed integer */
    gdtFloat32 = 6,  /*! Thirty two bit floating point */
    gdtFloat64 = 7,  /*! Sixty four bit floating point */
    gdtCInt16 = 8,   /*! Complex Int16 */
    gdtCInt32 = 9,   /*! Complex Int32 */
    gdtCFloat32 = 10, /*! Complex Float32 */
    gdtCFloat64 = 11, /*! Complex Float64 */
} tkGdalDataType;

/************************** tkPalletteInterpretation Enumeration **********************/
typedef
[
    uuid(A385C6B7-D9B1-401C-B63C-7049CE216790),
    helpstring("tkPalletteInterpretation"),
]
enum tkPaletteInterpretation {
    piGray = 0,  /*! Grayscale (in GDALColorEntry.c1) */
    piRGB = 1,  /*! Red, Green, Blue and Alpha in (in c1, c2, c3 and c4) */
    piCMYK = 2,  /*! Cyan, Magenta, Yellow and Black (in c1, c2, c3 and c4)*/
    piHLS = 3   /*! Hue, Lightness and Saturation (in c1, c2, and c3) */
} tkPaletteInterpretation;

/************************** tkColorInterpretation Enumeration **********************/
typedef
[
    uuid(1009AFD4-40D9-4BED-A4EB-108FCF8F6C95),
    helpstring("tkColorInterpretation"),
]
enum tkColorInterpretation {
    ciUndefined = 0,
    ciGrayIndex = 1,		/*! Greyscale */
    ciPaletteIndex = 2,		/*! Paletted (see associated color table) */
    ciRedBand = 3,			/*! Red band of RGBA image */
    ciGreenBand = 4,		/*! Green band of RGBA image */
    ciBlueBand = 5,			/*! Blue band of RGBA image */
    ciAlphaBand = 6,		/*! Alpha (0=transparent, 255=opaque) */
    ciHueBand = 7,			/*! Hue band of HLS image */
    ciSaturationBand = 8,	/*! Saturation band of HLS image */
    ciLightnessBand = 9,	/*! Lightness band of HLS image */
    ciCyanBand = 10,		/*! Cyan band of CMYK image */
    ciMagentaBand = 11,		/*! Magenta band of CMYK image */
    ciYellowBand = 12,		/*! Yellow band of CMYK image */
    ciBlackBand = 13,		/*! Black band of CMLY image */
    ciYCbCr_YBand = 14,		/*! Y Luminance */
    ciYCbCr_CbBand = 15,	/*! Cb Chroma */
    ciYCbCr_CrBand = 16,	/*! Cr Chroma */
} tkColorInterpretation;

/************************** tkAngleDisplay Enumeration **********************/
typedef
[
    uuid(2E938DB8-3C6C-47C8-BE04-4A456E45A757),
    helpstring("tkBearingType"),
]
enum tkBearingType {
    btAbsolute = 0,
    btReducedNDE = 1,
    btReducedNED = 2,
    btRelative = 3,
    btLeftAngle = 4,
    btRightAngle = 5,
}tkBearingType;

/************************** tkProxyAuthentication Enumeration **********************/
typedef
[
    uuid(7704CDEC-89D2-4C9A-A1F0-57C2154D5E48),
    helpstring("tkProxyAuthentication"),
]
enum tkProxyAuthentication {
    asBasic = 0,
    asNtlm = 1,
}tkProxyAuthentication;

/************************** tkPixelOffsetMode Enumeration **********************/
typedef
[
    uuid(33F78390-B2B8-4214-9952-6BDC5458940A),
    helpstring("tkPixelOffsetMode"),
]
enum tkPixelOffsetMode {
    pomDefault = 0,
    pomHighPerformance = 1,
    pomHighQuality = 2,
}tkPixelOffsetMode;

/************************** tkIdentifierMode Enumeration **********************/
typedef
[
    uuid(D8213DF7-FA5E-4F34-A3A7-F56CB09F5D25),
    helpstring("tkIdentifierMode"),
]
enum tkIdentifierMode {
    imAllLayers = 0,
    imSingleLayer = 1,
    imAllLayersStopOnFirst = 2,
}tkIdentifierMode;

/************************** tkEditorBehavior Enumeration **********************/
typedef
[
    uuid(31B4FFE8-29F4-4615-88BF-7CD232E52ED0),
    helpstring("tkEditorBehavior"),
]
enum tkEditorBehavior {
    ebVertexEditor = 0,
    ebPartEditor = 1,
}tkEditorBehavior;

/************************** tkEditorOverlay Enumeration **********************/
typedef
[
    uuid(05F55CFA-C1CC-4793-8622-995388E5E661),
    helpstring("tkEditorOverlay"),
]
enum tkEditorOverlay {
    eoAddPart = 0,
    eoRemovePart = 1,
}tkEditorOverlay;

/************************** tkBufferCap Enumeration **********************/
typedef
[
    uuid(41BCBD8E-8F68-4E19-9FF4-8DDA388F5F2C),
    helpstring("tkBufferCap"),
]
enum tkBufferCap {
    bcROUND = 0,
    bcFLAT = 1,
    bcSQUARE = 2,
}tkBufferCap;


/************************** tkBufferJoin Enumeration **********************/
typedef
[
    uuid(99A2C9DE-35B7-4079-88A5-B6B2358BA889),
    helpstring("tkBufferJoin"),
]
enum tkBufferJoin {
    bjROUND = 0,
    bjMITRE = 1,
    bjBEVEL = 2,
}tkBufferJoin;

/************************** tkCategoryValue Enumeration **********************/
typedef
[
    uuid(72F792CE-B3B0-4246-A8E8-0335BD03455F),
    helpstring("tkCategoryValue"),
]
enum tkCategoryValue {
    cvSingleValue = 0,
    cvRange = 1,
    cvExpression = 2,
}tkCategoryValue;

/************************** tkEditorValidation Enumeration **********************/
typedef
[
    uuid(2AD584B8-565E-4C31-B3C0-1E3B6470F781),
    helpstring("tkEditorValidation"),
]
enum tkEditorValidation {
    evBasic = 0,
    evCheckWithGeos = 1,
    evFixWithGeos = 2,
}tkEditorValidation;

/************************** tkUndoShortcut Enumeration **********************/
typedef
[
    uuid(E6B3C9D5-576D-4E72-A025-CD6987E31982),
    helpstring("tkUndoShortcut"),
]
enum tkUndoShortcut {
    usNone = 0,
    usCtrlZ = 1,
    usRightMouseButton = 2,
}tkUndoShortcut;

/************************** tkDeleteTarget Enumeration **********************/
typedef
[
    uuid(CC04FEF1-11BB-420F-8C32-5B7D7806BA46),
    helpstring("tkDeleteTarget"),
]
enum tkDeleteTarget {
    dtNone = 0,
    dtShape = 1,
    dtPart = 2,
    dtVertex = 3,
}tkDeleteTarget;

/************************** tkLengthDisplayMode Enumeration **********************/
typedef
[
    uuid(44655D89-500B-4B2E-90A5-5FC9762FEAA4),
    helpstring("tkLengthDisplayMode"),
]
enum tkLengthDisplayMode {
    ldmMetric = 0,
    ldmAmerican = 1,
}tkLengthDisplayMode;

/************************** tkShapeEditorState Enumeration **********************/
typedef
[
    uuid(1C0301FF-127F-4329-B29B-0D068523FC8C),
    helpstring("tkShapeEditorState"),
]
enum tkEditorState {
    esNone = 0,
    esDigitize = 1,
    esEdit = 2,
    esDigitizeUnbound = 3,
    esOverlay = 4
}tkEditorState;

/************************** tkLayerSelection Enumeration **********************/
typedef
[
    uuid(AC54A94F-072E-4D91-BD22-E985BF2F956F),
    helpstring("tkLayerSelection"),
]
enum tkLayerSelection {
    lsAllLayers = 0,
    lsNoLayer = 1,
    lsActiveLayer = 2,
}tkLayerSelection;

/************************** tkSnapMode Enumeration **********************/
typedef
[
    uuid(AC54A94F-072E-4D91-BD22-E985BF2F957F),
    helpstring("tkSnapMode"),
]
enum tkSnapMode {
    smVertices = 0,
    smVerticesAndLines = 1,
    smLines = 2
}tkSnapMode;

/************************** tkUndoOperation Enumeration **********************/
typedef
[
    uuid(E428DD9E-C792-492A-8D73-52569AA19F73),
    helpstring("tkUndoOperation"),
]
enum tkUndoOperation {
    uoAddShape = 0,
    uoRemoveShape = 1,
    uoEditShape = 2,
    uoMoveShapes = 3,
    uoRotateShapes = 4,
}tkUndoOperation;

/************************** tkMwBoolean Enumeration **********************/
typedef
[
    uuid(F8DA5C43-0B00-4EFB-BEAC-67C522925884),
    helpstring("tkMwBoolean"),
]
enum tkMwBoolean
{
    blnFalse = 0,
    blnTrue = 1,
} tkMwBoolean;

/************************** tkOgrEncoding Enumeration **********************/
typedef
[
    uuid(DD146D7F-E630-4113-9971-A36C6796C5D5),
    helpstring("tkOgrEncoding"),
]
enum tkOgrEncoding
{
    oseUtf8 = 0,
    oseAnsi = 1,
} tkOgrEncoding;

/************************** tkOgrSaveType Enumeration **********************/
typedef
[
    uuid(423D6519-8961-440B-BDF4-0DBF1727CE63),
    helpstring("tkOgrSaveType"),
]
enum tkOgrSaveType
{
    ostGeometryOnly = 0,
    ostAttributesOnly = 1,
    ostSaveAll = 2,
} tkOgrSaveType;

/************************** tkOgrLayerCapability Enumeration **********************/
typedef
[
    uuid(FB18C88E-BD29-4F81-91BB-70AC7D8DA997),
    helpstring("tkOgrLayerCapability"),
]
enum tkOgrLayerCapability
{
    olcRandomRead = 0,
    olcSequentialWrite = 1,
    olcRandomWrite = 2,
    olcFastSpatialFilter = 3,
    olcFastFeatureCount = 4,
    olcFastGetExtent = 5,
    olcCreateField = 6,
    olcDeleteField = 7,
    olcReorderFields = 8,
    olcAlterFieldDefn = 9,
    olcTransactions = 10,
    olcDeleteFeature = 11,
    olcFastSetNextByIndex = 12,
    olcStringsAsUTF8 = 13,
    olcIgnoreFields = 14,
    olcCreateGeomField = 15,
} tkOgrLayerCapability;

/************************** tkOgrSaveResult Enumeration **********************/
typedef
[
    uuid(E314FA80-F752-4D88-AC31-E3EB053576DA),
    helpstring("tkOgrSaveResult"),
]
enum tkOgrSaveResult
{
    osrNoChanges = 0,
    osrAllSaved = 1,
    osrSomeSaved = 2,
    osrNoneSaved = 3,
} tkOgrSaveResult;

/************************** tkGdalDriverMetadata Enumeration **********************/
typedef
[
    uuid(47F83622-7E83-4849-B299-6289A8B432B7),
    helpstring("tkGdalDriverMetadata"),
]
enum tkGdalDriverMetadata
{
    dmdUnknown = -1,
    dmdLONGNAME = 0,
    dmdHELPTOPIC = 1,
    dmdMIMETYPE = 2,
    dmdEXTENSION = 3,
    dmdEXTENSIONS = 4,
    dmdCREATIONOPTIONLIST = 5,
    dmdOPENOPTIONLIST = 6,
    dmdCREATIONDATATYPES = 7,
    dmdSUBDATASETS = 8,
    dmdOPEN = 9,
    dmdCREATE = 10,
    dmdCREATECOPY = 11,
    dmdVIRTUALIO = 12,
    dmdLAYER_CREATIONOPTIONLIST = 13,
    dmdOGR_DRIVER = 14,
    dmdRaster = 15,
    dmdVector = 16,
    dmdNotNullFields = 17,
    dmdDefaultFields = 18,
    dmdNotNullGeometries = 19,
    dmCreationFieldDataTypes = 20,
} tkGdalDriverMetadata;

/************************** tkOgrSourceType Enumeration **********************/
typedef
[
    uuid(0140B532-B59F-4EEC-AD39-EB52800CF2D4),
    helpstring("tkOgrSourceType"),
]
enum tkOgrSourceType
{
    ogrUninitialized = 0,
    ogrFile = 1,
    ogrDbTable = 2,
    ogrQuery = 3,
} tkOgrSourceType;

/************************** tkOgrDSCapability Enumeration **********************/
typedef
[
    uuid(190B74F5-693B-44B4-B2CE-9D3881FFFC3B),
    helpstring("tkOgrDSCapability"),
]
enum tkOgrDSCapability
{
    odcCreateLayer = 0,
    odcDeleteLayer = 1,
    odcCreateGeomFieldAfterCreateLayer = 2,
    odcCreateDataSource = 3,
    odcDeleteDataSource = 4,
} tkOgrDSCapability;


/************************** tkShapeSelectAction Enumeration **********************/
typedef
[
    uuid(CD38707C-72C0-4139-84BF-7B89F7DC5485),
    helpstring("tkShapeSelectAction"),
]
enum tkShapeSelectAction
{
    saShapeEditor = 0,
} tkShapeSelectAction;

/************************** tkShapeEditingAction Enumeration **********************/
typedef
[
    uuid(36C56EEE-CB4B-4dea-81B5-058431337C90),
    helpstring("tkShapeEditingAction"),
]
enum tkShapeEditingAction
{
    eaCreated = 0,
    eaMoved = 1,
    eaVextexEditing = 2,
    eaCustom = 3,
} tkShapeEditingAction;

/************************** tkAngleFormat Enumeration **********************/
typedef
[
    uuid(82134A4F-5442-4E75-850B-025AE50C805B),
    helpstring("tkAngleFormat"),
]
enum tkAngleFormat
{
    afDegrees = 0,
    afMinutes = 1,
    afSeconds = 2,
    afRadians = 3,
} tkAngleFormat;

/************************** tkAreaDisplayMode Enumeration **********************/
typedef
[
    uuid(03653908-7002-420D-BCD8-F686556B65E2),
    helpstring("tkAreaDisplayMode"),
]
enum tkAreaDisplayMode
{
    admMetric = 0,
    admHectars = 1,
    admAmerican = 2,
} tkAreaDisplayMode;

/************************** tkCustomState Enumeration **********************/
typedef
[
    uuid(0F17F6D4-C34F-49eb-A47E-0996CDDE12F8),
    helpstring("tkCustomState"),
]
enum tkCustomState
{
    csAuto = 0,
    csTrue = 1,
    csFalse = 2,
} tkCustomState;

/************************** tkZoomBarVerbosity Enumerations **********************/
typedef
[
    uuid(46640334-BBC8-4237-A307-90D2C812C272),
    helpstring("tkZoomBarVerbosity"),
]
enum tkZoomBarVerbosity
{
    zbvZoomOnly = 0,
    zbvFull = 1,
    zbvNone = 2,
} tkZoomBarVerbosity;

/************************** tkZoomBoxStyle Enumerations **********************/
typedef
[
    uuid(C04A7C5D-6CD8-4671-96B7-0293D5FB81D4),
    helpstring("tkZoomBoxStyle"),
]
enum tkZoomBoxStyle
{
    zbsRubberBand = 0,
    zbsGray = 1,
    zbsGrayInverted = 2,
    zbsOrange = 3,
    zbsBlue = 4,
} tkZoomBoxStyle;

/************************** tkRasterOverviewCreation Enumerations **********************/
typedef
[
    uuid(DA0A0612-901D-4877-8E68-CF2E6770B83D),
    helpstring("tkRasterOverviewCreation"),
]
enum tkRasterOverviewCreation
{
    rocAuto = 0,
    rocYes = 1,
    rocNo = 2,
} tkRasterOverviewCreation;

/************************** tkTiffCompression Enumerations **********************/
typedef
[
    uuid(E607E6F3-B73E-4b9c-814A-623AD8A95F1D),
    helpstring("tkTiffCompression"),
]
enum tkTiffCompression
{
    tkmAUTO = -1,
    tkmJPEG = 0,
    tkmLZW = 1,
    tkmPACKBITS = 2,
    tkmDEFLATE = 3,
    tkmCCITTRLE = 4,
    tkmCCITTFAX3 = 5,
    tkmCCITTFAX4 = 6,
    tkmNONE = 7,
} tkTiffCompression;

/************************** tkTilesProjectionStatus Enumerations **********************/
typedef
[
    uuid(DF236F37-6AA9-4d32-98C5-11D1B8A7D166),
    helpstring("tkTilesProjectionStatus"),
]
enum tkTilesProjectionStatus
{
    tpsNative = 0,
    tpsCompatible = 1,
    tpsEmptyOrInvalid = 2,
} tkTilesProjectionStatus;

/************************** tkRedrawType Enumerations **********************/
typedef
[
    uuid(81897081-0416-4a11-A011-294176989374),
    helpstring("tkRedrawType"),
]
enum tkRedrawType
{
    RedrawAll = 1,
    RedrawSkipDataLayers = 2,
    RedrawMinimal = 3,
    RedrawSkipAllLayers = 4,
} tkRedrawType;

/************************** tkCoordinatesDisplay Enumerations **********************/
typedef
[
    uuid(685CFA4D-ECBB-4753-A018-B8453F32DC92),
    helpstring("tkCoordinatesDisplay"),
]
enum tkCoordinatesDisplay
{
    cdmNone = 0,
    cdmAuto = 1,
    cdmDegrees = 2,
    cdmMapUnits = 3,
} tkCoordinatesDisplay;

/**************************  tkMapProjection Enumerations **********************/
typedef
[
    uuid(5E15651A-3AB7-483f-BDB0-AFFA2FFB1A32),
    helpstring("tkMapProjection"),
]
enum tkMapProjection
{
    PROJECTION_CUSTOM = -1,
    PROJECTION_NONE = 0,
    PROJECTION_WGS84 = 1,
    PROJECTION_GOOGLE_MERCATOR = 2,
} tkMapProjection;

/**************************  tkKnownExtents Enumerations **********************/
typedef
[
    uuid(AF3F5F49-1D6B-4bd2-9370-A3C0DA2368C7),
    helpstring("tkKnownExtents"),
]
enum tkKnownExtents
{
    keSiliconValley = -3,
    keGreenwich = -2,
    keNone = -1,
    keWorld = 0,
    keAfghanistan = 1,
    keAland_Islands = 2,
    keAlbania = 3,
    keAlgeria = 4,
    keAmerican_Samoa = 5,
    keAndorra = 6,
    keAngola = 7,
    keAnguilla = 8,
    keAntigua = 9,
    keArgentina = 10,
    keArmenia = 11,
    keAruba = 12,
    keAustralia = 13,
    keAustria = 14,
    keAzerbaijan = 15,
    keBahamas = 16,
    keBahrain = 17,
    keBangladesh = 18,
    keBarbados = 19,
    keBelarus = 20,
    keBelgium = 21,
    keBelize = 22,
    keBenin = 23,
    keBermuda = 24,
    keBhutan = 25,
    keBolivia = 26,
    keBosnia_and_Herzegovina = 27,
    keBotswana = 28,
    keBrazil = 29,
    keBritish_Virgin_Islands = 30,
    keBrunei = 31,
    keBulgaria = 32,
    keBurkina_Faso = 33,
    keBurundi = 34,
    keCambodia = 35,
    keCameroon = 36,
    keCanada = 37,
    keCape_Verde = 38,
    keCayman_Islands = 39,
    keCentral_African_Republic = 40,
    keChad = 41,
    keChile = 42,
    keChina = 43,
    keCocos_Islands = 44,
    keColombia = 45,
    keComoros = 46,
    keCongo = 47,
    keCook_Islands = 48,
    keCosta_Rica = 49,
    keCroatia = 50,
    keCuba = 51,
    keCyprus = 52,
    keCzech_Republic = 53,
    keDenmark = 54,
    keDjibouti = 55,
    keDominica = 56,
    keDominican_Republic = 57,
    keDR_Congo = 58,
    keEcuador = 59,
    keEgypt = 60,
    keEl_Salvador = 61,
    keEquatorial_Guinea = 62,
    keEritrea = 63,
    keEstonia = 64,
    keEthiopia = 65,
    keFaeroe_Islands = 66,
    keFalkland_Islands = 67,
    keFiji = 68,
    keFinland = 69,
    keFrance = 70,
    keFrench_Guiana = 71,
    keFrench_Polynesia = 72,
    keGabon = 73,
    keGambia = 74,
    keGeorgia = 75,
    keGermany = 76,
    keGhana = 77,
    keGibraltar = 78,
    keGreat_Britain = 79,
    keGreece = 80,
    keGreenland = 81,
    keGrenada = 82,
    keGuadeloupe = 83,
    keGuam = 84,
    keGuatemala = 85,
    keGuernsey = 86,
    keGuinea = 87,
    keGuinea_Bissau = 88,
    keGuyana = 89,
    keHaiti = 90,
    keHonduras = 91,
    keHungary = 92,
    keIceland = 93,
    keIndia = 94,
    keIndonesia = 95,
    keIran = 96,
    keIraq = 97,
    keIreland = 98,
    keIsle_of_Man = 99,
    keIsrael = 100,
    keItaly = 101,
    keIvory_Coast = 102,
    keJamaica = 103,
    keJapan = 104,
    keJersey = 105,
    keJordan = 106,
    keKazakhstan = 107,
    keKenya = 108,
    keKiribati = 109,
    keKuwait = 110,
    keKyrgyzstan = 111,
    keLaos = 112,
    keLatvia = 113,
    keLebanon = 114,
    keLesotho = 115,
    keLiberia = 116,
    keLibya = 117,
    keLiechtenstein = 118,
    keLithuania = 119,
    keLuxembourg = 120,
    keMacao = 121,
    keMacedonia = 122,
    keMadagascar = 123,
    keMalawi = 124,
    keMalaysia = 125,
    keMaldives = 126,
    keMali = 127,
    keMalta = 128,
    keMarshall_Islands = 129,
    keMartinique = 130,
    keMauritania = 131,
    keMauritius = 132,
    keMayotte = 133,
    keMexico = 134,
    keMicronesia = 135,
    keMoldova = 136,
    keMonaco = 137,
    keMongolia = 138,
    keMontenegro = 139,
    keMontserrat = 140,
    keMorocco = 141,
    keMozambique = 142,
    keNamibia = 143,
    keNauru = 144,
    keNepal = 145,
    keNetherlands = 146,
    keNew_Caledonia = 147,
    keNew_Zealand = 148,
    keNicaragua = 149,
    keNiger = 150,
    keNigeria = 151,
    keNiue = 152,
    keNorfolk_Island = 153,
    keNorth_Korea = 154,
    keNorthern_Mariana_Islands = 155,
    keNorway = 156,
    keOccupied_Palestinian_Territory = 157,
    keOman = 158,
    kePakistan = 159,
    kePalau = 160,
    kePanama = 161,
    kePapua_New_Guinea = 162,
    keParaguay = 163,
    kePeru = 164,
    kePhilippines = 165,
    kePitcairn = 166,
    kePoland = 167,
    kePortugal = 168,
    kePuerto_Rico = 169,
    keQatar = 170,
    keReunion_Island = 171,
    keRomania = 172,
    keRussia = 173,
    keRwanda = 174,
    keSaint_Barthelemy = 175,
    keSaint_Martin_French_part = 176,
    keSamoa = 177,
    keSan_Marino = 178,
    keSao_Tome_and_Principe = 179,
    keSaudi_Arabia = 180,
    keSenegal = 181,
    keSerbia = 182,
    keSeychelles = 183,
    keSierra_Leone = 184,
    keSingapore = 185,
    keSlovakia = 186,
    keSlovenia = 187,
    keSolomon_Islands = 188,
    keSomalia = 189,
    keSouth_Africa = 190,
    keSouth_Korea = 191,
    keSpain = 192,
    keSri_Lanka = 193,
    keSt_Helena = 194,
    keSt_Kitts_and_Nevis = 195,
    keSt_Lucia = 196,
    keSt_Pierre_and_Miquelon = 197,
    keSt_Vincent = 198,
    keSudan = 199,
    keSuriname = 200,
    keSvalbard_and_Jan_Mayen = 201,
    keSwaziland = 202,
    keSweden = 203,
    keSwitzerland = 204,
    keSyria = 205,
    keTajikistan = 206,
    keTanzania = 207,
    keThailand = 208,
    keTimor_Leste = 209,
    keTogo = 210,
    keTokelau = 211,
    keTonga = 212,
    keTrinidad_and_Tobago = 213,
    keTunisia = 214,
    keTurkey = 215,
    keTurkmenistan = 216,
    keTurks_and_Caicos_Islands = 217,
    keTuvalu = 218,
    keUganda = 219,
    keUkraine = 220,
    keUnited_Arab_Emirates = 221,
    keUruguay = 222,
    keUS_Virgin_Islands = 223,
    keUSA = 224,
    keUzbekistan = 225,
    keVanuatu = 226,
    keVenezuela = 227,
    keVietnam = 228,
    keWallis_and_Futuna = 229,
    keWestern_Sahara = 230,
    keYemen = 231,
    keZambia = 232,
    keZimbabwe = 233,
} tkKnownExtents;

/**************************  tkZoomBehavior Enumerations **********************/
typedef
[
    uuid(EBDAA822-C53B-4cc1-B0F4-0832A0ECDA96),
    helpstring("tkZoomBehavior"),
]
enum tkZoomBehavior
{
    zbDefault = 0,
    zbUseTileLevels = 1,
} tkZoomBehavior;

/**************************  tkSupportType Enumerations **********************/
typedef
[
    uuid(C4DC2024-0249-4585-A34E-ABF30F05AB5B),
    helpstring("tkSupportType"),
]
enum tkSupportType
{
    stGdal = 0,
    stGdalOverviews = 1,
} tkSupportType;


/**************************  tkFileOpenStrategy Enumerations **********************/
typedef
[
    uuid(4090F506-308B-43a5-9814-67BC585B8BAE),
    helpstring("tkFileOpenStrategy"),
]
enum tkFileOpenStrategy
{
    fosNotSupported = -1,
    fosAutoDetect = 0,
    fosRgbImage = 1,
    fosDirectGrid = 2,
    fosProxyForGrid = 3,
    fosVectorLayer = 4,
    fosVectorDatasource = 5,
} tkFileOpenStrategy;

/**************************  tkFieldOperationValidity Enumerations **********************/
typedef
[
    uuid(E689BC76-309F-453b-BE68-A838BFA79040),
    helpstring("FieldOperationValidity"),
]
enum tkFieldOperationValidity
{
    fovValid = 0,
    fovFieldNotFound = 1,
    fovNotSupported = 2,
} tkFieldOperationValidity;

/**************************  tkFieldStatOperation Enumerations **********************/
typedef
[
    uuid(23C1D558-A645-4093-8782-102A6E3F4EC2),
    helpstring("Field stat operation"),
]
enum tkFieldStatOperation
{
    fsoSum = 0,
    fsoMin = 1,
    fsoMax = 2,
    fsoAvg = 3,
    fsoWeightedAvg = 4,
    fsoMode = 5,
} tkFieldStatOperation;

/**************************  tkShapeValidationType Enumerations **********************/
typedef
[
    uuid(F7EC0DD4-86AE-4af2-8603-821C1B3F714F),
    helpstring("Shape validation type"),
]
enum tkShapeValidationType
{
    svtInput = 0,
    svtOutput = 1,
} tkShapeValidationType;

/**************************  tkShapeValidationMode Enumerations **********************/
typedef
[
    uuid(E30A98AB-13AC-4702-9F56-304787CB04FA),
    helpstring("Shape validation mode"),
]
enum tkShapeValidationMode
{
    NoValidation = 0,
    TryFixProceedOnFailure = 1,
    TryFixSkipOnFailure = 2,
    AbortOnErrors = 3,
} tkShapeValidationMode;

/**************************  tkShapeValidationStatus Enumerations **********************/
typedef
[
    uuid(A64DDE57-3F28-4f72-A4DE-4AAD0CCD34BF),
    helpstring("Shape validation status"),
]
enum tkShapeValidationStatus
{
    WasntValidated = 0,
    Valid = 1,
    InvalidFixed = 2,
    InvalidSkipped = 3,
    InvalidReturned = 4,
    OperationAborted = 5,
} tkShapeValidationStatus;

/**************************  tkScalebarUnits Enumerations **********************/
typedef
[
    uuid(6C8B8343-490E-4f8d-A562-AD196F249A5C),
    helpstring("Scalebar units"),
]
enum tkScalebarUnits
{
    Metric,
    American,
    GoogleStyle,
} tkScalebarUnits;

/****************************  tkInterface Enumerations ***********************/

typedef
[
    uuid(9F8A72AB-4841-4af9-85B8-9656C963AC66),
    helpstring("List of all interfaces"),
]
enum tkInterface
{
    idChart = 0,
    idChartField = 1,
    idCharts = 2,
    idColorScheme = 3,
    idESRIGridManager = 4,
    idExtents = 5,
    idField = 6,
    idGeoProjection = 7,
    idGlobalSettings = 8,
    idGrid = 9,
    idGridColorBreak = 10,
    idGridColorScheme = 11,
    idGridHeader = 12,
    idImage = 13,
    idLabelCategory = 14,
    idLabel = 15,
    idLabels = 16,
    idLinePattern = 17,
    idLineSegment = 18,
    idPoint = 19,
    idShape = 20,
    idShapeDrawingOptions = 21,
    idShapefile = 22,
    idShapefileCategories = 23,
    idShapefileCategory = 24,
    idShapefileColorBreak = 25,
    idShapefileColorScheme = 26,
    idShapeNetwork = 27,
    idTable = 28,
    idTileProviders = 29,
    idTiles = 30,
    idTin = 31,
    idUtils = 32,
    idVector = 33,
    idShapeValidationInfo = 34,
    idMeasuring = 35,
    idFileManager = 36,
    idFieldStatOperations = 37,
    idShapeEditor = 38,
    idOgrDatasource = 39,
    idOgrLayer = 40,
    idUndoList = 41,
    idIdentifier = 42,
    idSelectionList = 43,
    idDrawingRectangle = 44,
    idGdalRasterBand = 45,
    idHistogram = 46,
    idGdalDataset = 47,
    idGdalDriver = 48,
    idGdalDriverManager = 49,
    idFunction = 50,
    idExpression = 51,
    idWmsLayer = 52,
    idGdalUtils = 53
} tkInterface;

typedef
[
    uuid(CACF2BBD-1120-4cd8-8C49-C1100AF879AA),
    helpstring(""),
]
enum tkTileProjection
{
    [helpstring("")]SphericalMercator = 0,
    [helpstring("")]Amersfoort = 1,
} tkTileProjection;

typedef
[
    uuid(5060FBD5-A4F8-4f06-B9E1-4E6C89992347),
    helpstring("Cache type enumeration"),
]
enum tkCacheType
{
    [helpstring("")]RAM = 0,
    [helpstring("")]Disk = 1,
} tkCacheType;

typedef
[
    uuid(9F2E3181-F9E3-4640-9C7F-27800EADDC81),
    helpstring("Tile providers enumeration"),
]
enum tkTileProvider
{
    [helpstring("")] ProviderNone = -1,
    [helpstring("")] OpenStreetMap = 0,
    [helpstring("")] OpenCycleMap = 1,
    [helpstring("")] OpenTransportMap = 2,
    [helpstring("")] BingMaps = 3,
    [helpstring("")] BingSatellite = 4,
    [helpstring("")] BingHybrid = 5,
    /*[helpstring("")] GoogleMaps = 6,
    [helpstring("")] GoogleSatellite = 7,
    [helpstring("")] GoogleHybrid = 8,
    [helpstring("")] GoogleTerrain = 9,*/
    [helpstring("")] HereMaps = 10,
    [helpstring("")] HereSatellite = 11,
    [helpstring("")] HereHybrid = 12,
    [helpstring("")] HereTerrain = 13,
    /*[helpstring("")] YandexMaps = 14,
    [helpstring("")] YandexSatellite = 15,
    [helpstring("")] YandexHybrid = 16,
    [helpstring("")] YahooMaps = 17,
    [helpstring("")] YahooSatellite = 18,
    [helpstring("")] YahooHybrid = 19,*/
    /*[helpstring("")] Topomapper = 20,*/
    [helpstring("")] Rosreestr = 21,
    [helpstring("")] OpenHumanitarianMap = 22,
    [helpstring("")] MapQuestAerial = 23,
    [helpstring("")] ProviderCustom = 1024,
} tkTileProvider;

typedef
[
    uuid(FD17FF91-8B93-47a2-A517-B4039579B549),
    helpstring("Enumerated Cursor Types"),
]
enum tkCursor
{
    [helpstring("crsrMapDefault")] crsrMapDefault = 0,
    [helpstring("crsrAppStarting")] crsrAppStarting = 1,
    [helpstring("crsrArrow")] crsrArrow = 2,
    [helpstring("crsrCross")] crsrCross = 3,
    [helpstring("crsrHelp")] crsrHelp = 4,
    [helpstring("crsrIBeam")] crsrIBeam = 5,
    [helpstring("crsrNo")] crsrNo = 6,
    [helpstring("crsrSizeAll")] crsrSizeAll = 7,
    [helpstring("crsrSizeNESW")] crsrSizeNESW = 8,
    [helpstring("crsrSizeNS")] crsrSizeNS = 9,
    [helpstring("crsrSizeNWSE")] crsrSizeNWSE = 10,
    [helpstring("crsrSizeWE")] crsrSizeWE = 11,
    [helpstring("crsrUpArrow")] crsrUpArrow = 12,
    [helpstring("crsrWait")] crsrWait = 13,
    [helpstring("crsrUserDefined")] crsrUserDefined = 14,
    [helpstring("crsrHand")] crsrHand = 15,
} tkCursor;

typedef
[
    uuid(BCDBD4E0-8B7C-11DA-A72B-0800200C9A66),
    helpstring("Map Resize Behavior Options"),
]
enum tkResizeBehavior
{
    [helpstring("Classic")] rbClassic = 0,
    [helpstring("Modern")] rbModern = 1,
    [helpstring("Intuitive")] rbIntuitive = 2,
    [helpstring("Warp")] rbWarp = 3,
    [helpstring("KeepScale")] rbKeepScale = 4,
} tkResizeBehavior;

typedef
[
    uuid(9106CF0F-8A9A-4040-A4B0-D60B72B46504),
    helpstring("Enumerated Cursor Modes"),
]
enum tkCursorMode {
    cmZoomIn = 0,
    cmZoomOut = 1,
    cmPan = 2,
    cmSelection = 3,
    cmNone = 4,
    cmMeasure = 5,
    cmAddShape = 6,
    cmEditShape = 8,
    cmSplitByPolyline = 9,
    cmIdentify = 10,
    cmMoveShapes = 11,
    cmRotateShapes = 12,
    cmSelectByPolygon = 13,
    cmEraseByPolygon = 14,
    cmSplitByPolygon = 15,
    cmClipByPolygon = 16,
} tkCursorMode;

typedef
[
    uuid(F4FB70AE-68F3-45d4-945F-78EE26A28F1D),
    helpstring("Enumerated Line Stipples"),
]
enum tkLineStipple
{
    [helpstring("lsNone")] lsNone = 0,
    [helpstring("lsDotted")] lsDotted = 1,
    [helpstring("lsDashed")] lsDashed = 2,
    [helpstring("lsDashDotDash")] lsDashDotDash = 3,
    [helpstring("lsDoubleSolid")] lsDoubleSolid = 4,
    [helpstring("lsDoubleSolidPlusDash")] lsDoubleSolidPlusDash = 5,
    [helpstring("lsTrainTracks")] lsTrainTracks = 6,
    [helpstring("lsCustom")] lsCustom = 7,
    [helpstring("lsDashDotDot")] lsDashDotDot = 8,
} tkLineStipple;

typedef
[
    uuid(546FF8CF-249A-48e6-AD00-7015854D77B1),
    helpstring("Enumerated Fill Stipples"),
]
enum tkFillStipple
{
    [helpstring("fsNone")] fsNone = 0,
    [helpstring("fsVerticalBars")] fsVerticalBars = 1,
    [helpstring("fsHorizontalBars")] fsHorizontalBars = 2,
    [helpstring("fsDiagonalDownRight")] fsDiagonalDownRight = 3,
    [helpstring("fsDiagonalDownLeft")] fsDiagonalDownLeft = 4,
    [helpstring("fsPolkaDot")] fsPolkaDot = 5,
    [helpstring("fsCustom")] fsCustom = 6,
    [helpstring("fsCross")] fsCross = 7,
    [helpstring("fsRaster")] fsRaster = 8,
} tkFillStipple;

typedef
[
    uuid(320AC432-2396-4e9f-9BCB-EC87DE8449BE),
    helpstring("Enumerated Drawing Coordinate Systems"),
]
enum tkDrawReferenceList
{
    [helpstring("dlScreenReferencedList")] dlScreenReferencedList = 0,
    [helpstring("dlSpatiallyReferencedList")] dlSpatiallyReferencedList = 1,

} tkDrawReferenceList;

typedef
[
    uuid(FAB764C1-87FC-402a-AE3D-9C15476C1571),
    helpstring("Enumerated Drawing Modes"),
]
enum tkDrawMode
{
    [helpstring("dmPoints")] dmPoints = 0,
    [helpstring("dmLines")] dmLines = 1,
    [helpstring("dmLineLoop")] dmLineLoop = 2,
    [helpstring("dmLineStrip")] dmLineStrip = 3,
    [helpstring("dmTriangles")] dmTriangles = 4,
    [helpstring("dmTriangleStrip")] dmTriangleStrip = 5,
    [helpstring("dmTriangleFan")] dmTriangleFan = 6,
    [helpstring("dmQuads")] dmQuads = 7,
    [helpstring("dmQuadStrip")] dmQuadStrip = 8,
    [helpstring("dmPolygon")] dmPolygon = 9,
} tkDrawMode;

typedef
[
    uuid(C2095580-06B9-41f5-B06E-908B6FC0C8A3),
    helpstring("Enumerated Point Types"),
]
enum tkPointType
{
    [helpstring("ptSquare")] ptSquare = 0,
    [helpstring("ptCircle")] ptCircle = 1,
    [helpstring("ptDiamond")] ptDiamond = 2,
    [helpstring("ptTriangleUp")] ptTriangleUp = 3,
    [helpstring("ptTriangleDown")] ptTriangleDown = 4,
    [helpstring("ptTriangleLeft")] ptTriangleLeft = 5,
    [helpstring("ptTriangleRight")] ptTriangleRight = 6,
    [helpstring("ptUserDefined")] ptUserDefined = 7,
    [helpstring("ptImageList")] ptImageList = 8,
    [helpstring("ptFontChar")] ptFontChar = 9,
} tkPointType;

typedef
[
    uuid(5C462DAA-5CC2-4b5c-9D5A-8BA1EC1774B7),
    helpstring("Enumerated Lock Modes"),
]
enum tkLockMode
{
    [helpstring("lmUnlock")] lmUnlock = 0,
    [helpstring("lmLock")] lmLock = 1,
} tkLockMode;

typedef
[
    uuid(6EE497FB-B03B-4bba-914F-C05199BE0F0D),
    helpstring("Enumerated Justification Values"),
]
enum tkHJustification
{
    [helpstring("hjLeft")] hjLeft = 0,
    [helpstring("hjCenter")] hjCenter = 1,
    [helpstring("hjRight")] hjRight = 2,
    [helpstring("hjNone")] hjNone = 3,		// tws 6/24/07
    [helpstring("hjRaw")] hjRaw = 4,		  // ajp 4/24/09
} tkHJustification;

/****************************  Utils Enumerations ***********************/

typedef
[
    uuid(B4EA9A5D-C2DB-4da9-AE5B-A70E57C66C5C),
    helpstring("Enumerated SplitMethod Types"),
]
enum SplitMethod
{
    [helpstring("Inscribed Radius")] InscribedRadius = 0,
    [helpstring("Angle Deviation")] AngleDeviation = 1
} SplitMethod;

typedef
[
    uuid(6F09E672-EA03-47dc-BC25-4A165DACC148),
    helpstring("Enumerated PolygonOperation Types"),
]
enum PolygonOperation
{
    [helpstring("DIFFERENCE_OPERATION")] DIFFERENCE_OPERATION = 0,
    [helpstring("INTERSECTION_OPERATION")] INTERSECTION_OPERATION = 1,
    [helpstring("EXCLUSIVEOR_OPERATION")] EXCLUSIVEOR_OPERATION = 2,
    [helpstring("UNION_OPERATION")] UNION_OPERATION = 3
} PolygonOperation;

typedef
[uuid(5FDEB35E-865A-445a-A499-0BED8218A521),
helpstring("Enumerated ColoringType Types"),
]
enum ColoringType
{
    [helpstring("Hillshade")] Hillshade = 0,
    [helpstring("Gradient")] Gradient = 1,
    [helpstring("Random")] Random = 2,
} ColoringType;

typedef
[uuid(35E7AF86-3942-4f7c-8164-D11942522AC3),
helpstring("Enumerated GradientModel Types"),
]
enum GradientModel
{
    [helpstring("Logorithmic")] Logorithmic = 0,
    [helpstring("Linear")] Linear = 1,
    [helpstring("Exponential")] Exponential = 2,
} GradientModel;

typedef
[uuid(DB5BD81D-8DC0-401b-A78B-8738F53F4810),
helpstring("Enumerated PredefinedColorsScheme Types"),
]
enum PredefinedColorScheme
{
    [helpstring("FallLeaves")] FallLeaves = 0,
    [helpstring("SummerMountains")] SummerMountains = 1,
    [helpstring("Desert")] Desert = 2,
    [helpstring("Glaciers")] Glaciers = 3,
    [helpstring("Meadow")] Meadow = 4,
    [helpstring("ValleyFires")] ValleyFires = 5,
    [helpstring("DeadSea")] DeadSea = 6,
    [helpstring("Highway1")] Highway1 = 7,
    [helpstring("Rainbow")] Rainbow = 8,
    [helpstring("ReversedRainbow")] ReversedRainbow = 9,
} PredefinedColorScheme;

typedef
[uuid(3E52C14E-3F39-4286-B630-AF8988A8BDD2),
helpstring("Enumerated SpatialRelation Types"),
]
enum tkSpatialRelation
{
    [helpstring("Contains")]	srContains = 0,
    [helpstring("Crosses")]		srCrosses = 1,
    [helpstring("Disjoint")]	srDisjoint = 2,
    [helpstring("Equals")]		srEquals = 3,
    [helpstring("Intersects")]	srIntersects = 4,
    [helpstring("Overlaps")]	srOverlaps = 5,
    [helpstring("Touches")]		srTouches = 6,
    [helpstring("Within")]		srWithin = 7,
    [helpstring("Covers")]		srCovers = 8,
    [helpstring("CoveredBy")]	srCoveredBy = 9,
} tkSpatialRelation;

typedef
[uuid(85C1F392-6405-4b9a-82F4-43D4D54E4264),
helpstring("Enumerated ClipOperations Types"),
]
enum tkClipOperation
{
    [helpstring("Difference")]		clDifference = 0,
    [helpstring("Intersection")]	clIntersection = 1,
    [helpstring("SymDifference")]	clSymDifference = 2,
    [helpstring("Union")]			clUnion = 3,
    [helpstring("Clip")]			clClip = 4,
} tkClipOperation;

typedef
[uuid(f3f936dd-eb4a-4ec4-a30c-4ec91a83c99b),
helpstring("Enumeration for methods to draw shapefiles. New method has several advantages but isn't fully tested for now."),
]
enum tkShapeDrawingMethod
{
    [helpstring("Old method, used from the beginning. It's well tested but has a bit poorer functionality then the new one.")]
dmStandard = 0,
[helpstring("Provides support for inner selection, raster fills, geomteric pens, identical procedures for drawing in regular and edit mode. It's in testing phase now")]
dmNewWithSelection = 1,
[helpstring("Provides new labels")]
dmNewWithLabels = 2,
[helpstring("Provides new set of symbology using shapefile categories and ShapeDrawingOptions class")]
dmNewSymbology = 3,
} tkShapeDrawingMethod;

typedef
[uuid(54594EDE-BAB4-43d8-AD06-462900348496),
helpstring("Alignment options for labels"),
]
enum tkLabelAlignment
{
    laTopLeft = 0,
    laTopCenter = 1,
    laTopRight = 2,
    laCenterLeft = 3,
    laCenter = 4,
    laCenterRight = 5,
    laBottomLeft = 6,
    laBottomCenter = 7,
    laBottomRight = 8,
} tkLabelAlignment;

typedef
[uuid(7A778F18-9CD1-45ae-ABFC-92B8E6C1579A),
helpstring("Algorithms used for positioning of labels"),
]
enum tkLabelPositioning
{
    lpCenter = 0,			// common layers; without synchronization
    lpCentroid = 1,			// labels on drawing layer
    lpInteriorPoint = 2,	// for labels synchronized with shapefile
    lpFirstSegment = 3,
    lpLastSegment = 4,
    lpMiddleSegment = 5,
    lpLongestSegement = 6,
    lpNone = 7,
} tkLabelPositioning;

typedef
[uuid(0B972D4B-3D6F-4f92-BCF8-ECD424310E26),
helpstring("A position of labels in relation to the layers"),
]
enum tkVerticalPosition
{
    vpAboveParentLayer = 0,
    vpAboveAllLayers = 1,
} tkVerticalPosition;

typedef
[uuid(343CAE84-D677-4bc6-A7F4-4C7E5096D776),
helpstring("Types of splitting objects on groups by their attributes"),
]
enum tkClassificationType
{
    ctNaturalBreaks = 0,
    ctUniqueValues = 1,
    ctEqualIntervals = 2,
    ctEqualCount = 3,
    ctStandardDeviation = 4,
    ctEqualSumOfValues = 5,
} tkClassificationType;

typedef
[uuid(8ED72532-E5F9-4424-AA90-BF0904086689),
helpstring("tkColorSchemeType enumeration"),
]
enum tkColorSchemeType
{
    ctSchemeRandom = 0,
    ctSchemeGraduated = 1,
} tkColorSchemeType;

typedef
[uuid(83FFE275-E602-4832-B44E-241EBA27917D),
helpstring("tkLineLabelOrientation enumeration"),
]
enum tkLineLabelOrientation
{
    lorHorizontal = 0,
    lorParallel = 1,
    lorPerpindicular = 2,
} tkLineLabelOrientation;

typedef
[uuid(C1A63978-A342-4d37-8E5F-93B3D1F2F582),
helpstring("tkLabelFrameType enumeration"),
]
enum tkLabelFrameType
{
    lfRectangle = 0,
    lfRoundedRectangle = 1,
    lfPointedRectangle = 2,
} tkLabelFrameType;

typedef
[uuid(57D081F9-12F3-47b6-9336-A42DBFDFA847),
helpstring("tkUnitsOfMeasure enumeration"),
]
enum tkUnitsOfMeasure
{
    umDecimalDegrees = 0,
    umMiliMeters = 1,
    umCentimeters = 2,
    umInches = 3,
    umFeets = 4,
    umYards = 5,
    umMeters = 6,
    umMiles = 7,
    umKilometers = 8,
    //umNauticalMiles = 9,
} tkUnitsOfMeasure;

typedef
[uuid(15E8581C-003E-4f7a-80E4-89BE29BD91A8),
helpstring("tkLabelElements enumeration"),
]
enum tkLabelElements
{
    leFont = 0,
    leFontOutline = 1,
    leShadow = 2,
    leHalo = 3,
    leFrameBackground = 4,
    leFrameOutline = 5,
    leDefault = 6
} tkLabelElements;

typedef
[uuid(C914C27A-A74E-4831-AF78-6DB9E7696111),
helpstring("tkShapeElements enumeration"),
]
enum tkShapeElements
{
    shElementDefault = 0,
    shElementFill = 1,
    shElementFill2 = 2,
    shElementLines = 3,
    shElementFillBackground = 4,
} tkShapeElements;

typedef
[uuid(D54E7336-4AEC-4ff1-8681-566C61B04DD8),
helpstring("tkLinearGradientMode enumeration"),
]
enum tkLinearGradientMode
{
    gmHorizontal = 0,
    gmVertical = 1,
    gmForwardDiagonal = 2,
    gmBackwardDiagonal = 3,
    gmNone = 4,
}tkLinearGradientMode;

typedef
[uuid(5DC0755F-EDA3-40cb-AE03-1AB5D3197623),
helpstring("tkInterpolationMode enumeration"),
]
enum tkInterpolationMode
{
    //imDefault = 0,
    //imLowQuality = 1,
    //imHighQuality = 2,
    imBilinear = 3,
    imBicubic = 4,
    imNone = 5,
    imHighQualityBilinear = 6,
    imHighQualityBicubic = 7,
}tkInterpolationMode;

/************************* tkGDALResamplingMethod **************************/
typedef
[uuid(3BDEA45D-F8D9-4dca-A58B-9BB7F689263A),
helpstring("tkGDALResamplingMethod enumeration"),
]
enum tkGDALResamplingMethod
{
    grmNone = 0,
    grmNearest,
    grmGauss,
    grmCubic,
    grmCubicSpline,
    grmAverage,
    grmAverageMagphase,
    grmBilinear,
    grmLanczos,
    grmMode
}tkGDALResamplingMethod;

typedef
[uuid(63FBAB4B-A262-466a-AA4C-52F0E13817B4),
helpstring("tkResamplingType enumeration"),
]
enum tkResamplingType
{
    rtNone = 0,
    rtLinear = 1,
    rtCubic = 2,
    rtLanczos = 3,
}tkResamplingType;

typedef
[uuid(85E2F305-667D-4868-9B2D-A5E9AD35C6D8),
helpstring("tkGradientType enumeration"),
]
enum tkGradientType
{
    gtLinear = 0,
    gtRectangular = 1,
    gtCircle = 2,
}tkGradientType;

typedef
[uuid(BE7EA6B6-8667-4e87-BA91-8131314762B1),
helpstring("tkGDIPlusHatchStyle enumeration"),
]
enum tkGDIPlusHatchStyle
{
    hsNone = -1,
    hsHorizontal = 0,
    hsVertical = 1,
    hsForwardDiagonal = 2,
    hsBackwardDiagonal = 3,
    hsCross = 4,
    hsDiagonalCross = 5,
    hsPercent05 = 6,
    hsPercent10 = 7,
    hsPercent20 = 8,
    hsPercent25 = 9,
    hsPercent30 = 10,
    hsPercent40 = 11,
    hsPercent50 = 12,
    hsPercent60 = 13,
    hsPercent70 = 14,
    hsPercent75 = 15,
    hsPercent80 = 16,
    hsPercent90 = 17,
    hsLightDownwardDiagonal = 18,
    hsLightUpwardDiagonal = 19,
    hsDarkDownwardDiagonal = 20,
    hsDarkUpwardDiagonal = 21,
    hsWideDownwardDiagonal = 22,
    hsWideUpwardDiagonal = 23,
    hsLightVertical = 24,
    hsLightHorizontal = 25,
    hsNarrowVertical = 26,
    hsNarrowHorizontal = 27,
    hsDarkVertical = 28,
    hsDarkHorizontal = 29,
    hsDashedDownwardDiagonal = 30,
    hsDashedUpwardDiagonal = 31,
    hsDashedHorizontal = 32,
    hsDashedVertical = 33,
    hsSmallConfetti = 34,
    hsLargeConfetti = 35,
    hsZigZag = 36,
    hsWave = 37,
    hsDiagonalBrick = 38,
    hsHorizontalBrick = 39,
    hsWeave = 40,
    hsPlaid = 41,
    hsDivot = 42,
    hsDottedGrid = 43,
    hsDottedDiamond = 44,
    hsShingle = 45,
    hsTrellis = 46,
    hsSphere = 47,
    hsSmallGrid = 48,
    hsSmallCheckerBoard = 49,
    hsLargeCheckerBoard = 50,
    hsOutlinedDiamond = 51,
    hsSolidDiamond = 52,
}tkGDIPlusHatchStyle;

typedef
[uuid (84E461DF-53D1-4c36-AF85-D70F2214424F),
helpstring("tkPointSymbolType enumeration"),
]
enum tkPointSymbolType
{
    ptSymbolStandard = 0,
    ptSymbolFontCharacter = 1,
    ptSymbolPicture = 2,
}tkPointSymbolType;

typedef
[uuid (D7BBAD28-38EE-45d1-B4E8-BF4C292EF522),
helpstring("tkFillType enumeration"),
]
enum tkFillType
{
    ftStandard = 0,
    ftHatch = 1,
    ftGradient = 2,
    ftPicture = 3,
}tkFillType;

typedef
[uuid  (15CCFD69-B193-493e-AC04-8D676D8B4ECF),
helpstring("tkPointShapeType enumeration"),
]
enum tkPointShapeType
{
    ptShapeRegular = 0,
    ptShapeCross = 1,
    ptShapeStar = 2,
    ptShapeCircle = 3,
    ptShapeArrow = 4,
    ptShapeFlag = 5,
}tkPointShapeType;

typedef
[uuid (64FA8C3E-F0DE-4674-87D5-614C14B310F9),
helpstring("tkDefaultPointSymbol enumeration"),
]
enum tkDefaultPointSymbol
{
    dpsSquare = 0,
    dpsCircle = 1,
    dpsDiamond = 2,
    dpsTriangleUp = 3,
    dpsTriangleDown = 4,
    dpsTriangleLeft = 5,
    dpsTriangleRight = 6,
    dpsCross = 7,
    dpsXCross = 8,
    dpsStar = 9,
    dpsPentagon = 10,
    dpsArrowUp = 11,
    dpsArrowDown = 12,
    dpsArrowLeft = 13,
    dpsArrowRight = 14,
    dpsAsterisk = 15,
    dpsFlag = 16,
}tkDefaultPointSymbol;

typedef
[uuid (D763CF97-9280-4CAA-9C22-9CDC422357B8),
helpstring("tkPointReflectionType enumeration"),
]
enum tkPointReflectionType
{
    prtNone = 0,
    prtLeftToRight = 1,
    prtTopToBottom = 2,
}tkPointReflectionType;

typedef
[uuid  (FB3763C2-1D27-419f-A7CF-5A7B350E00E1),
helpstring("tkGradientBounds enumeration"),
]
enum tkGradientBounds
{
    gbWholeLayer = 0,
    gbPerShape = 1,
}tkGradientBounds;

typedef
[uuid  (EDD7EA9B-EABB-4efb-A621-BF2C9265F1C6),
helpstring("tkVectorDrawingMode enumeration"),
]
enum tkVectorDrawingMode
{
    vdmGDI = 0,
    vdmGDIMixed = 1,	// fill is drawn by GDIPlus, lines - by GDI
    vdmGDIPlus = 2,
}tkVectorDrawingMode;

typedef
[uuid  (EBBC71F6-D747-485f-AEA0-51BF87432F15),
helpstring("tkChartType enumeration"),
]
enum tkChartType
{
    chtBarChart = 0,
    chtPieChart = 1,
}tkChartType;

typedef
[uuid (1C045CDE-4913-47db-9001-81AF2EB35910),
helpstring("tkGeometryEngine enumeration"),
]
enum tkGeometryEngine
{
    engineGeos = 0,
    engineClipper = 1,
}tkGeometryEngine;

typedef
[uuid (9E717D9C-AEF5-4124-8339-AF9B46D5370A),
helpstring("tkSelectionAppearance enumeration"),
]
enum tkSelectionAppearance
{
    saSelectionColor = 0,
    saDrawingOptions = 1,
}tkSelectionAppearance;

typedef
[uuid (EF5AFCDA-91D5-4b81-A13C-0D3EB24E4E97),
helpstring("tkCollisionMode enumeration"),
]
enum tkCollisionMode
{
    AllowCollisions = 0,
    LocalList = 1,
    GlobalList = 2,
}tkCollisionMode;

typedef
[uuid(CD43915D-38BB-410e-A24F-3C1967617151),
helpstring("tkTextRenderingHint enumeration"),
]
enum tkTextRenderingHint
{
    SystemDefault = 0,            // Glyph with system default rendering hint
    SingleBitPerPixelGridFit,     // Glyph bitmap with hinting
    SingleBitPerPixel,            // Glyph bitmap without hinting
    AntiAliasGridFit,             // Glyph anti-alias bitmap with hinting
    HintAntiAlias,                    // Glyph anti-alias bitmap without hinting
    ClearTypeGridFit
}tkTextRenderingHint;

typedef
[uuid (BC397A60-966F-45d6-B65C-7BC59F2DFFA1),
helpstring("tkSmoothingMode enumeration"),
]
enum tkSmoothingMode
{
    DefaultMode = 0,
    HighSpeedMode,
    HighQualityMode,
    None,
    AntiAlias,
}tkSmoothingMode;

typedef
[uuid (86786053-9C59-41fb-825A-5D0382603C4B),
helpstring("tkCompositingQuality enumeration"),
]
enum tkCompositingQuality
{
    Default = 0,
    HighSpeed,
    HighQuality,
    GammaCorrected,
    AssumeLinear,
}tkCompositingQuality;

typedef
[uuid  (DB604729-D315-4af3-AD35-9277EE06D1C1),
helpstring("tkMapColor enumeration"),
]
enum tkMapColor
{
    AliceBlue = 0xFFF0F8FF,
    AntiqueWhite = 0xFFFAEBD7,
    Aqua = 0xFF00FFFF,
    Aquamarine = 0xFF7FFFD4,
    Azure = 0xFFF0FFFF,
    Beige = 0xFFF5F5DC,
    Bisque = 0xFFFFE4C4,
    Black = 0xFF000000,
    BlanchedAlmond = 0xFFFFEBCD,
    Blue = 0xFF0000FF,
    BlueViolet = 0xFF8A2BE2,
    Brown = 0xFFA52A2A,
    BurlyWood = 0xFFDEB887,
    CadetBlue = 0xFF5F9EA0,
    Chartreuse = 0xFF7FFF00,
    Chocolate = 0xFFD2691E,
    Coral = 0xFFFF7F50,
    CornflowerBlue = 0xFF6495ED,
    Cornsilk = 0xFFFFF8DC,
    Crimson = 0xFFDC143C,
    Cyan = 0xFF00FFFF,
    DarkBlue = 0xFF00008B,
    DarkCyan = 0xFF008B8B,
    DarkGoldenrod = 0xFFB8860B,
    DarkGray = 0xFFA9A9A9,
    DarkGreen = 0xFF006400,
    DarkKhaki = 0xFFBDB76B,
    DarkMagenta = 0xFF8B008B,
    DarkOliveGreen = 0xFF556B2F,
    DarkOrange = 0xFFFF8C00,
    DarkOrchid = 0xFF9932CC,
    DarkRed = 0xFF8B0000,
    DarkSalmon = 0xFFE9967A,
    DarkSeaGreen = 0xFF8FBC8B,
    DarkSlateBlue = 0xFF483D8B,
    DarkSlateGray = 0xFF2F4F4F,
    DarkTurquoise = 0xFF00CED1,
    DarkViolet = 0xFF9400D3,
    DeepPink = 0xFFFF1493,
    DeepSkyBlue = 0xFF00BFFF,
    DimGray = 0xFF696969,
    DodgerBlue = 0xFF1E90FF,
    Firebrick = 0xFFB22222,
    FloralWhite = 0xFFFFFAF0,
    ForestGreen = 0xFF228B22,
    Fuchsia = 0xFFFF00FF,
    Gainsboro = 0xFFDCDCDC,
    GhostWhite = 0xFFF8F8FF,
    Gold = 0xFFFFD700,
    Goldenrod = 0xFFDAA520,
    Gray = 0xFF808080,
    Green = 0xFF008000,
    GreenYellow = 0xFFADFF2F,
    Honeydew = 0xFFF0FFF0,
    HotPink = 0xFFFF69B4,
    IndianRed = 0xFFCD5C5C,
    Indigo = 0xFF4B0082,
    Ivory = 0xFFFFFFF0,
    Khaki = 0xFFF0E68C,
    Lavender = 0xFFE6E6FA,
    LavenderBlush = 0xFFFFF0F5,
    LawnGreen = 0xFF7CFC00,
    LemonChiffon = 0xFFFFFACD,
    LightBlue = 0xFFADD8E6,
    LightCoral = 0xFFF08080,
    LightCyan = 0xFFE0FFFF,
    LightGoldenrodYellow = 0xFFFAFAD2,
    LightGray = 0xFFD3D3D3,
    LightGreen = 0xFF90EE90,
    LightPink = 0xFFFFB6C1,
    LightSalmon = 0xFFFFA07A,
    LightSeaGreen = 0xFF20B2AA,
    LightSkyBlue = 0xFF87CEFA,
    LightSlateGray = 0xFF778899,
    LightSteelBlue = 0xFFB0C4DE,
    LightYellow = 0xFFFFFFE0,
    Lime = 0xFF00FF00,
    LimeGreen = 0xFF32CD32,
    Linen = 0xFFFAF0E6,
    Magenta = 0xFFFF00FF,
    Maroon = 0xFF800000,
    MediumAquamarine = 0xFF66CDAA,
    MediumBlue = 0xFF0000CD,
    MediumOrchid = 0xFFBA55D3,
    MediumPurple = 0xFF9370DB,
    MediumSeaGreen = 0xFF3CB371,
    MediumSlateBlue = 0xFF7B68EE,
    MediumSpringGreen = 0xFF00FA9A,
    MediumTurquoise = 0xFF48D1CC,
    MediumVioletRed = 0xFFC71585,
    MidnightBlue = 0xFF191970,
    MintCream = 0xFFF5FFFA,
    MistyRose = 0xFFFFE4E1,
    Moccasin = 0xFFFFE4B5,
    NavajoWhite = 0xFFFFDEAD,
    Navy = 0xFF000080,
    OldLace = 0xFFFDF5E6,
    Olive = 0xFF808000,
    OliveDrab = 0xFF6B8E23,
    Orange = 0xFFFFA500,
    OrangeRed = 0xFFFF4500,
    Orchid = 0xFFDA70D6,
    PaleGoldenrod = 0xFFEEE8AA,
    PaleGreen = 0xFF98FB98,
    PaleTurquoise = 0xFFAFEEEE,
    PaleVioletRed = 0xFFDB7093,
    PapayaWhip = 0xFFFFEFD5,
    PeachPuff = 0xFFFFDAB9,
    Peru = 0xFFCD853F,
    Pink = 0xFFFFC0CB,
    Plum = 0xFFDDA0DD,
    PowderBlue = 0xFFB0E0E6,
    Purple = 0xFF800080,
    Red = 0xFFFF0000,
    RosyBrown = 0xFFBC8F8F,
    RoyalBlue = 0xFF4169E1,
    SaddleBrown = 0xFF8B4513,
    Salmon = 0xFFFA8072,
    SandyBrown = 0xFFF4A460,
    SeaGreen = 0xFF2E8B57,
    SeaShell = 0xFFFFF5EE,
    Sienna = 0xFFA0522D,
    Silver = 0xFFC0C0C0,
    SkyBlue = 0xFF87CEEB,
    SlateBlue = 0xFF6A5ACD,
    SlateGray = 0xFF708090,
    Snow = 0xFFFFFAFA,
    SpringGreen = 0xFF00FF7F,
    SteelBlue = 0xFF4682B4,
    Tan = 0xFFD2B48C,
    Teal = 0xFF008080,
    Thistle = 0xFFD8BFD8,
    Tomato = 0xFFFF6347,
    /*Transparent          = 0x00FFFFFF,*/		// removed, alpha channel is set through different set of properties in API, so it's problematic to support this constant
    Turquoise = 0xFF40E0D0,
    Violet = 0xFFEE82EE,
    Wheat = 0xFFF5DEB3,
    White = 0xFFFFFFFF,
    WhiteSmoke = 0xFFF5F5F5,
    Yellow = 0xFFFFFF00,
    YellowGreen = 0xFF9ACD32,
} tkMapColor;

/**************************  Dash style ***********************/
typedef
[
    uuid(79F928D4-6E5A-4312-A519-F6AB83691086),
    helpstring("Enumerated DashStyle Types"),
]
enum tkDashStyle
{
    dsSolid = 0,
    dsDash = 1,
    dsDot = 2,
    dsDashDot = 3,
    dsDashDotDot = 4,
    dsCustom = 5,

} tkDashStyle;

/**************************  VertexType style ***********************/
typedef
[
    uuid(119B042B-9EC9-45e4-8B83-526079198279),
    helpstring("Enumerated tkVertexType Types"),
]
enum tkVertexType
{
    vtSquare = 0,
    vtCircle = 1,
} tkVertexType;

/**************************  LineLayer type ***********************/
typedef
[
    uuid (F4B17059-5214-477a-99ED-7D30C9722941),
    helpstring("Enumerated tkLineType Types"),
]
enum tkLineType
{
    lltSimple = 0,
    lltMarker = 1,
} tkLineType;


/************************** ChartValuesStyle ***********************/
typedef
[
    uuid(C5C7A7BF-17D4-4953-9CBC-4068B0FC59E6),
    helpstring("Enumerated tkChartValuesStyle Types"),
]
enum tkChartValuesStyle
{
    vsHorizontal = 0,
    vsVertical = 1,
} tkChartValuesStyle;

/************************** tkShapefileSourceType ***********************/
typedef
[
    uuid(0536E234-CBD1-4975-9B2B-2EC1CD37F84A),
    helpstring("Enumerated tkShapefileSourceType Types"),
]
enum tkShapefileSourceType
{
    sstUninitialized = 0,
    sstDiskBased = 1,
    sstInMemory = 2,
} tkShapefileSourceType;

/************************** tkImageSourceType ***********************/
typedef
[
    uuid(2EA95843-840A-457d-8D9A-CFFD731B89D0),
    helpstring("Enumerated tkImageSourceType Types"),
]
enum tkImageSourceType
{
    istUninitialized = 0,
    istDiskBased = 1,
    istInMemory = 2,
    istGDALBased = 3,
    istGDIPlus = 4,
} tkImageSourceType;

/************************** tkGridSourceType ***********************/
typedef
[
    uuid(5EE78AC6-8997-4402-A43E-53C32DE8BBB1),
    helpstring("Enumerated tkGridSourceType Types"),
]
enum tkGridSourceType
{
    gstUninitialized = 0,
    gstGDALBased = 1,
    gstNative = 2,
} tkGridSourceType;

/************************** tkGridProxyFormat ***********************/
typedef
[
    uuid(5774B893-D236-4ee4-8E92-2B9F019D2869),
    helpstring("Enumerated tkGridProxyFormat Types"),
]
enum tkGridProxyFormat
{
    gpfBmpProxy = 0,
    gpfTiffProxy = 1,
} tkGridProxyFormat;

/************************** tkGridProxyMode ***********************/
typedef
[
    uuid(FC56391C-AEA0-430a-B73B-E385BE357165),
    helpstring("Enumerated tkGridProxyMode Types"),
]
enum tkGridProxyMode
{
    gpmAuto = 0,
    gpmUseProxy = 1,
    gpmNoProxy = 2,
} tkGridProxyMode;

/************************** tkSavingMode **************************/
typedef
[
    uuid(E214CC65-00DC-4511-8E9E-C262433C1AAD),
    helpstring("Enumerated tkSavingMode Types"),
]
enum tkSavingMode
{
    modeNone = 0,
    modeStandard = 1,
    modeXML = 2,
    modeDBF = 3,
    modeXMLOverwrite = 4,
} tkSavingMode;

/************************** tkMeasuringAction **************************/
typedef
[
    uuid(2AD7F93F-D4F7-4eb7-8B67-1C3B94E5498F),
    helpstring("Enumerated tkMeasuringAction Types"),
]
enum tkMeasuringAction
{
    PointAdded = 0,
    PointRemoved = 1,
    MesuringStopped = 2,  // Typo, mark deprecated
    MeasuringStopped = 2
} tkMeasuringAction;
#pragma deprecated(MesuringStopped)

/************************** tkCanDisplayGridWoProxy **************************/
typedef
[
    uuid(65620FEC-9FEA-46b6-A8F3-D819C4BAFC66),
    helpstring("Enumerated tkCanDisplayGridWoProxy Types"),
]
enum tkCanDisplayGridWoProxy
{
    cdwYes = 0,
    cdwUnsupportedFormat = 1,
    cdwSizeLimitation = 2,
} tkCanDisplayGridWoProxy;

/************************** tkMeasuringAction **************************/
typedef
[
    uuid(01BF0B10-6CBF-42b3-85E7-319936E06673),
    helpstring("Enumerated tkMeasuringType Types"),
]
enum tkMeasuringType
{
    MeasureDistance = 0,
    MeasureArea = 1,
} tkMeasuringType;

typedef
[
    uuid(B09FDAA5-7BD0-4fdf-9356-E6C4510E1B8C),
    helpstring("Enumerated tkLocalizedStrings Types"),
]
enum tkLocalizedStrings
{
    lsHectars = 0,
    lsMeters = 1,
    lsKilometers = 2,
    lsSquareKilometers = 3,
    lsSquareMeters = 4,
    lsMapUnits = 5,
    lsSquareMapUnits = 6,
    lsMiles = 7,
    lsFeet = 8,
    lsLatitude = 9,
    lsLongitude = 10,
    lsRadians = 11,
    lsNorthEast = 12,
    lsSouthEast = 13,
    lsSouthWest = 14,
    lsNorthWest = 15,
    lsNorth = 16,
    lsEast = 17,
    lsSouth = 18,
    lsWest = 19,
    lsAcres = 20,
    lsSquareFeet = 21,
    lsSquareMiles = 22,
} tkLocalizedStrings;

/************************* tkProjectionParameter **************************/
typedef
[
    uuid(6470A5C5-E726-40e3-8C7B-E5C1E11E8A48),
    helpstring("Enumerated tkProjectionParameter Types"),
]
enum tkProjectionParameter
{
    LatitudeOfOrigin = 0,
    CentralMeridian = 1,
    ScaleFactor = 2,
    FalseEasting = 3,
    FalseNorthing = 4,
    LongitudeOfOrigin = 5,
} tkProjectionParameter;

/************************* tkEllipsoidParameter **************************/
typedef
[
    uuid(F80983AA-F448-418b-A791-5B64795E57D2),
    helpstring("Enumerated tkGeogCSParameter Types"),
]
enum tkGeogCSParameter
{
    SemiMajor = 0,
    SemiMinor = 1,
    InverseFlattening = 2,
    PrimeMeridian = 3,
    AngularUnit = 4,
} tkGeogCSParameter;

/************************* tkGdalErrorType **************************/
typedef
[
    uuid(0E2E7CC8-9A4E-4ce4-85D3-F951FE723212),
    helpstring("Enumerated tkGdalErrorType Types"),
]
enum tkGdalErrorType
{
    GdalNone = 0,
    GdalDebug = 1,
    GdalWarning = 2,
    GdalFailure = 3,
    GdalFatal = 4,
    GdalUndefined = 5,
} tkGdalErrorType;

/************************* tkGdalError **************************/
typedef
[
    uuid(EEC76509-2F4B-4035-88B8-FC25B76F8DDF),
    helpstring("Enumerated tkGdalError Types"),
]
enum tkGdalError
{
    GdalErrorNone = 0,
    GdalErrorAppDefined = 1,
    GdalErrorOutOfMemory = 2,
    GdalErrorFileIO = 3,
    GdalErrorOpenFailed = 4,
    GdalErrorIllegalArg = 5,
    GdalErrorNotSupported = 6,
    GdalErrorAssertionFailed = 7,
    GdalErrorNoWriteAccess = 8,
    GdalErrorUserInterrupt = 9,
    GdalErrorObjectNull = 10,
    GdalErrorUndefined = 11,
} tkGdalError;

/****************************  Shapefile Enumerations ***********************/
typedef
[
    uuid(CDF57781-4FE1-46ed-AC51-59CD3C89B4C8),
    helpstring("Enumerated ShpFileType Types"),
]
enum ShpfileType
{
    [helpstring("SHP_NULLSHAPE")] SHP_NULLSHAPE = 0,
    [helpstring("SHP_POINT")] SHP_POINT = 1,
    [helpstring("SHP_POLYLINE")] SHP_POLYLINE = 3,
    [helpstring("SHP_POLYGON")] SHP_POLYGON = 5,
    [helpstring("SHP_MULTIPOINT")] SHP_MULTIPOINT = 8,
    [helpstring("SHP_POINTZ")] SHP_POINTZ = 11,
    [helpstring("SHP_POLYLINEZ")] SHP_POLYLINEZ = 13,
    [helpstring("SHP_POLYGONZ")] SHP_POLYGONZ = 15,
    [helpstring("SHP_MULTIPOINTZ")] SHP_MULTIPOINTZ = 18,
    [helpstring("SHP_POINTM")] SHP_POINTM = 21,
    [helpstring("SHP_POLYLINEM")] SHP_POLYLINEM = 23,
    [helpstring("SHP_POLYGONM")] SHP_POLYGONM = 25,
    [helpstring("SHP_MULTIPOINTM")] SHP_MULTIPOINTM = 28,
    [helpstring("SHP_MULTIPATCH")] SHP_MULTIPATCH = 31
} ShpfileType;

typedef
[
    uuid(44E55993-60B9-4f67-9500-073A3FCA2249),
    helpstring("Enumerated SelectMode Types"),
]
enum SelectMode
{
    [helpstring("INTERSECTION")] INTERSECTION = 0,
    [helpstring("INCLUSION")] INCLUSION = 1

} SelectMode;
/****************************  Image Enumerations ***********************/
typedef
[
    uuid(485EEBC8-5F16-48bc-BD18-DBBDA0CA6E4A),
    helpstring("Enumerated Image Types"),
]
enum ImageType
{
    [helpstring("BITMAP_FILE")] BITMAP_FILE = 0,
    [helpstring("GIF_FILE")] GIF_FILE = 1,
    [helpstring("USE_FILE_EXTENSION")] USE_FILE_EXTENSION = 2,
    [helpstring("TIFF")] TIFF_FILE = 3,
    [helpstring("JPEG")] JPEG_FILE = 4,
    [helpstring("PNG")] PNG_FILE = 5,
    /**  FOR FUTURE VERSION  ****
    [helpstring("PCT")] PCT_FILE					    	=6,*/
    [helpstring("PPM_FILE")] PPM_FILE = 7,
    [helpstring("ECW_FILE")] ECW_FILE = 8,
    [helpstring("JPEG2000_FILE")] JPEG2000_FILE = 9,
    [helpstring("SID_FILE")] SID_FILE = 10,
    [helpstring("PNM_FILE")] PNM_FILE = 11,
    [helpstring("PGM_FILE")] PGM_FILE = 12,
    [helpstring("BIL_FILE")] BIL_FILE = 13,
    [helpstring("ADF_FILE")] ADF_FILE = 14,
    [helpstring("GRD_FILE")] GRD_FILE = 15,
    [helpstring("IMG_FILE")] IMG_FILE = 16,
    [helpstring("ASC_FILE")] ASC_FILE = 17,
    [helpstring("BT_FILE")] BT_FILE = 18,
    [helpstring("MAP_FILE")] MAP_FILE = 19,
    [helpstring("LF2_FILE")] LF2_FILE = 20,
    [helpstring("KAP_FILE")] KAP_FILE = 21,
    [helpstring("DEM_FILE")] DEM_FILE = 22,
    [helpstring("NTF_FILE")] NTF_FILE = 23,
    [helpstring("NTF_FILE")] NETCDF_FILE = 24,  /* Added by Paul Meems, Feb. 2014 */
    [helpstring("NTF_FILE")] VRT_FILE = 25   /* Added by Paul Meems, Feb. 2014 */
} ImageType;

/****************************  Field Enumerations ***********************/
typedef
[
    uuid(5AD363AD-E860-4789-87E8-F3100AF3707D),
    helpstring("Enumerated FieldType Types"),
]
enum FieldType
{
    // note that types 0 through 3 match enumerated type values from ShapeLib.h
    // although we have proposed a change to ShapeLib such that Dates are supported
    [helpstring("STRING_FIELD")] STRING_FIELD = 0,
    [helpstring("INTEGER_FIELD")] INTEGER_FIELD = 1,
    [helpstring("DOUBLE_FIELD")] DOUBLE_FIELD = 2,
    // jf, 2/17/2018, added Boolean and Date fields
    [helpstring("BOOLEAN_FIELD")] BOOLEAN_FIELD = 3,
    [helpstring("DATE_FIELD")] DATE_FIELD = 4
}FieldType;

/*******************************  Grid Enumerations  *****************/
typedef
[
    uuid(F02C004B-FD7D-4ace-B672-BDB8A41632BC),
    helpstring("Enumerated Grid Data Types"),
]
enum GridDataType
{
    [helpstring("ShortDataType")] ShortDataType = 0,
    [helpstring("LongDataType")]	LongDataType = 1,
    [helpstring("FloatDataType")] FloatDataType = 2,
    [helpstring("DoubleDataType")] DoubleDataType = 3,
    [helpstring("InvalidDataType")] InvalidDataType = -1,
    [helpstring("UnknownDataType")] UnknownDataType = 4,
    [helpstring("ByteDataType")]	ByteDataType = 5 // Introduced March 2009
} GridDataType;

typedef
[uuid(50814193-87DC-45f0-9682-F64C5B153AAC),
helpstring("Enumerated File Types"),
]
enum GridFileType
{
    [helpstring("Ascii")] Ascii = 0,
    [helpstring("Binary")] Binary = 1,
    [helpstring("Esri")] Esri = 2,
    [helpstring("GeoTiff")] GeoTiff = 3, //added 8/15/05 -- ah
    [helpstring("Sdts")] Sdts = 4,
    [helpstring("PAux")] PAux = 5,
    [helpstring("PCIDsk")] PCIDsk = 6,
    [helpstring("DTED")] DTed = 7,
    [helpstring("BIL")] Bil = 8,
    [helpstring("ECW")] Ecw = 9,
    [helpstring("MrSID")] MrSid = 10,
    [helpstring("FLT")] Flt = 11,
    [helpstring("Dem")] Dem = 12,
    [helpstring("UseExtension")] UseExtension = 13,
    [helpstring("InvalidGridFileType")] InvalidGridFileType = -1,
} GridFileType;

/****************************  ShapeNetwork Interface ***********************/
typedef
[
    uuid(05D8AC58-5435-4957-B94B-8DF7155D5F98),
    helpstring("Enumerated AmbiguityResolution Types"),
]
enum AmbiguityResolution
{

    [helpstring("Z_VALUE")] Z_VALUE = 0,
    [helpstring("DISTANCE_TO_OUTLET")] DISTANCE_TO_OUTLET = 1,
    [helpstring("NO_RESOLUTION")] NO_RESOLUTION = 2


} AmbiguityResolution;

/**************************  tkValueType  *****************/
typedef
[
    uuid(6DC3F142-CFCB-40d6-99D0-EE197334360C),
    helpstring("Enumerated tkValueType Types"),
]
enum tkValueType
{
    vtDouble = 0,
    vtString = 1,
    vtBoolean = 2,
    vtFloatArray = 3,
} tkValueType;

/**************************  tkGridSchemeRetrieval  *****************/
typedef
[
    uuid(511DF614-3F68-427c-9B2F-DF5EBA304E78),
    helpstring("Enumerated tkGridSchemeRetrieval Types"),
]
enum tkGridSchemeRetrieval
{
    gsrAuto = 0,
    gsrDiskBased = 1,
    gsrDiskBasedForProxy = 2,
    gsrGdalColorTable = 3,
} tkGridSchemeRetrieval;

/**************************  tkGridSchemeGeneration  *****************/
typedef
[
    uuid(771EE932-6123-41a2-9B31-ED0E5F63EF7B),
    helpstring("Enumerated tkGridSchemeGeneration Types"),
]
enum tkGridSchemeGeneration
{
    gsgGradient = 0,
    gsgUniqueValues = 1,
    gsgUniqueValuesOrGradient = 2,
} tkGridSchemeGeneration;

/**************************  tkGridRendering enum  *****************/
typedef
[
    uuid(52EDC6DD-5ED5-40a0-8CD5-ED971CE87208),
    helpstring("Enumerated tkGridRendering Types"),
]
enum tkGridRendering
{
    grForceForAllFormats = 0,
    grForGridsOnly = 1,
    grNever = 2,
} tkGridRendering;

typedef
[
    uuid(76BCEF79-8841-440c-BA0B-B8C8B236935E),
    helpstring("Enumerated tkCoordinateSystem Types"),
]
enum tkCoordinateSystem
{
    csAbidjan_1987 = 4143,
    csAccra = 4168,
    csAdindan = 4201,
    csAfgooye = 4205,
    csAgadez = 4206,
    csAGD66 = 4202,
    csAGD84 = 4203,
    csAin_el_Abd = 4204,
    csAlbanian_1987 = 4191,
    csAmerican_Samoa_1962 = 4169,
    csAmersfoort = 4289,
    csAmmassalik_1958 = 4196,
    csAnguilla_1957 = 4600,
    csAntigua_1943 = 4601,
    csAratu = 4208,
    csArc_1950 = 4209,
    csArc_1960 = 4210,
    csAscension_Island_1958 = 4712,
    csATF_Paris = 4901,
    csATS77 = 4122,
    csAustralian_Antarctic = 4176,
    csAyabelle_Lighthouse = 4713,
    csAzores_Central_1948 = 4183,
    csAzores_Central_1995 = 4665,
    csAzores_Occidental_1939 = 4182,
    csAzores_Oriental_1940 = 4184,
    csAzores_Oriental_1995 = 4664,
    csBarbados_1938 = 4212,
    csBatavia = 4211,
    csBatavia_Jakarta = 4813,
    csBDA2000 = 4762,
    csBeduaram = 4213,
    csBeijing_1954 = 4214,
    csBelge_1950 = 4215,
    csBelge_1950_Brussels = 4809,
    csBelge_1972 = 4313,
    csBellevue = 4714,
    csBermuda_1957 = 4216,
    csBern_1898_Bern = 4801,
    csBern_1938 = 4306,
    csBissau = 4165,
    csBogota_1975 = 4218,
    csBogota_1975_Bogota = 4802,
    csBukit_Rimpah = 4219,
    csCadastre_1997 = 4475,
    csCamacupa = 4220,
    csCamp_Area_Astro = 4715,
    csCampo_Inchauspe = 4221,
    csCape = 4222,
    csCape_Canaveral = 4717,
    csCarthage = 4223,
    csCarthage_Paris = 4816,
    csCH1903 = 4149,
    csCH1903_plus = 4150,
    csChatham_Islands_1971 = 4672,
    csChatham_Islands_1979 = 4673,
    csChina_Geodetic_Coordinate_System_2000 = 4490,
    csChos_Malal_1914 = 4160,
    csCHTRF95 = 4151,
    csChua = 4224,
    csCocos_Islands_1965 = 4708,
    csCombani_1950 = 4632,
    csConakry_1905 = 4315,
    csCorrego_Alegre = 4225,
    csCSG67 = 4623,
    csDabola_1981 = 4155,
    csDatum_73 = 4274,
    csDealul_Piscului_1930 = 4316,
    csDeception_Island = 4736,
    csDeir_ez_Zor = 4227,
    csDGN95 = 4755,
    csDHDN = 4314,
    csDiego_Garcia_1969 = 4724,
    csDominica_1945 = 4602,
    csDouala_1948 = 4192,
    csDRUKREF_03 = 5264,
    csEaster_Island_1967 = 4719,
    csED50 = 4230,
    csED50_ED77 = 4154,
    csED79 = 4668,
    csED87 = 4231,
    csEgypt_1907 = 4229,
    csEgypt_1930 = 4199,
    csEgypt_Gulf_of_Suez_S_650_TL = 4706,
    csELD79 = 4159,
    csEST92 = 4133,
    csEST97 = 4180,
    csETRS89 = 4258,
    csFahud = 4232,
    csFatu_Iva_72 = 4688,
    csFD54 = 4741,
    csFD58 = 4132,
    csFiji_1956 = 4721,
    csFiji_1986 = 4720,
    csfk89 = 4753,
    csFort_Marigot = 4621,
    csGan_1970 = 4684,
    csGaroua = 4197,
    csGDA94 = 4283,
    csGDBD2009 = 5246,
    csGDM2000 = 4742,
    csGGRS87 = 4121,
    csGR96 = 4747,
    csGrand_Cayman_1959 = 4723,
    csGrand_Comoros = 4646,
    csGreek = 4120,
    csGreek_Athens = 4815,
    csGrenada_1953 = 4603,
    csGuadeloupe_1948 = 4622,
    csGuam_1963 = 4675,
    csGulshan_303 = 4682,
    csHanoi_1972 = 4147,
    csHartebeesthoek94 = 4148,
    csHD1909 = 3819,
    csHD72 = 4237,
    csHelle_1954 = 4660,
    csHerat_North = 4255,
    csHito_XVIII_1963 = 4254,
    csHjorsey_1955 = 4658,
    csHong_Kong_1963 = 4738,
    csHong_Kong_1963_67 = 4739,
    csHong_Kong_1980 = 4611,
    csHTRS96 = 4761,
    csHu_Tzu_Shan_1950 = 4236,
    csID74 = 4238,
    csIGC_1962_6th_Parallel_South = 4697,
    csIGCB_1955 = 4701,
    csIGM95 = 4670,
    csIGN_1962_Kerguelen = 4698,
    csIGN_Astro_1960 = 4700,
    csIGN53_Mare = 4641,
    csIGN56_Lifou = 4633,
    csIGN63_Hiva_Oa = 4689,
    csIGN72_Grande_Terre = 4662,
    csIGN72_Nuku_Hiva = 4630,
    csIGRS = 3889,
    csIKBD_92 = 4667,
    csIndian_1954 = 4239,
    csIndian_1960 = 4131,
    csIndian_1975 = 4240,
    csIRENET95 = 4173,
    csISN93 = 4659,
    csIsrael = 4141,
    csIwo_Jima_1945 = 4709,
    csJAD2001 = 4758,
    csJAD69 = 4242,
    csJamaica_1875 = 4241,
    csJGD2000 = 4612,
    csJohnston_Island_1961 = 4725,
    csJouik_1961 = 4679,
    csKalianpur_1880 = 4243,
    csKalianpur_1937 = 4144,
    csKalianpur_1962 = 4145,
    csKalianpur_1975 = 4146,
    csKandawala = 4244,
    csKarbala_1979 = 4743,
    csKasai_1953 = 4696,
    csKatanga_1955 = 4695,
    csKertau_RSO = 4751,
    csKertau_1968 = 4245,
    csKKJ = 4123,
    csKOC = 4246,
    csKorea_2000 = 4737,
    csKorean_1985 = 4162,
    csKorean_1995 = 4166,
    csKousseri = 4198,
    csKUDAMS = 4319,
    csKusaie_1951 = 4735,
    csLa_Canoa = 4247,
    csLake = 4249,
    csLao_1993 = 4677,
    csLao_1997 = 4678,
    csLe_Pouce_1934 = 4699,
    csLeigon = 4250,
    csLGD2006 = 4754,
    csLiberia_1964 = 4251,
    csLisbon = 4207,
    csLisbon_Lisbon = 4803,
    csLisbon_1890 = 4666,
    csLisbon_1890_Lisbon = 4904,
    csLittle_Cayman_1961 = 4726,
    csLKS92 = 4661,
    csLKS94 = 4669,
    csLocodjo_1965 = 4142,
    csLoma_Quintana = 4288,
    csLome = 4252,
    csLuxembourg_1930 = 4181,
    csLuzon_1911 = 4253,
    csMadrid_1870_Madrid = 4903,
    csMadzansua = 4128,
    csMAGNA_SIRGAS = 4686,
    csMahe_1971 = 4256,
    csMakassar = 4257,
    csMakassar_Jakarta = 4804,
    csMalongo_1987 = 4259,
    csManoca_1962 = 4193,
    csMarcus_Island_1952 = 4711,
    csMarshall_Islands_1960 = 4732,
    csMartinique_1938 = 4625,
    csMassawa = 4262,
    csMaupiti_83 = 4692,
    csMauritania_1999 = 4702,
    csMerchich = 4261,
    csMexican_Datum_of_1993 = 4483,
    csMGI = 4312,
    csMGI_Ferro = 4805,
    csMGI_1901 = 3906,
    csMhast_offshore = 4705,
    csMhast_onshore = 4704,
    csMhast_1951 = 4703,
    csMidway_1961 = 4727,
    csMinna = 4263,
    csMOLDREF99 = 4023,
    csMonte_Mario = 4265,
    csMonte_Mario_Rome = 4806,
    csMontserrat_1958 = 4604,
    csMoorea_87 = 4691,
    csMOP78 = 4639,
    csMount_Dillon = 4157,
    csMoznet = 4130,
    csMporaloko = 4266,
    csNAD27 = 4267,
    csNAD27_Michigan = 4268,
    csNAD27_76 = 4608,
    csNAD27_CGQ77 = 4609,
    csNAD83 = 4269,
    csNAD83_CSRS = 4617,
    csNAD83_HARN = 4152,
    csNAD83_NSRS2007 = 4759,
    csNahrwan_1934 = 4744,
    csNahrwan_1967 = 4270,
    csNakhl_e_Ghanem = 4693,
    csNaparima_1955 = 4158,
    csNaparima_1972 = 4271,
    csNEA74_Noumea = 4644,
    csNew_Beijing = 4555,
    csNGN = 4318,
    csNGO_1948 = 4273,
    csNGO_1948_Oslo = 4817,
    csNord_Sahara_1959 = 4307,
    csNouakchott_1965 = 4680,
    csNSWC_9Z_2 = 4276,
    csNTF = 4275,
    csNTF_Paris = 4807,
    csNZGD2000 = 4167,
    csNZGD49 = 4272,
    csObservatario = 4129,
    csOld_Hawaiian = 4135,
    csOS_SN80 = 4279,
    csOSGB_1936 = 4277,
    csOSGB70 = 4278,
    csOSNI_1952 = 4188,
    csPadang = 4280,
    csPadang_Jakarta = 4808,
    csPalestine_1923 = 4281,
    csPampa_del_Castillo = 4161,
    csPD_83 = 4746,
    csPerroud_1950 = 4637,
    csPetrels_1972 = 4636,
    csPhoenix_Islands_1966 = 4716,
    csPico_de_las_Nieves_1984 = 4728,
    csPitcairn_1967 = 4729,
    csPitcairn_2006 = 4763,
    csPoint_58 = 4620,
    csPointe_Noire = 4282,
    csPorto_Santo = 4615,
    csPorto_Santo_1995 = 4663,
    csPOSGAR_94 = 4694,
    csPOSGAR_98 = 4190,
    csPrincipe = 4824,
    csPRS92 = 4683,
    csPSAD56 = 4248,
    csPSD93 = 4134,
    csPTRA08 = 5013,
    csPuerto_Rico = 4139,
    csPulkovo_1942 = 4284,
    csPulkovo_1942_58 = 4179,
    csPulkovo_1942_83 = 4178,
    csPulkovo_1995 = 4200,
    csPZ_90 = 4740,
    csQatar_1948 = 4286,
    csQatar_1974 = 4285,
    csQND95 = 4614,
    csQornoq_1927 = 4194,
    csRassadiran = 4153,
    csRD_83 = 4745,
    csREGCAN95 = 4081,
    csREGVEN = 4189,
    csReunion_1947 = 4626,
    csReykjavik_1900 = 4657,
    csRGF93 = 4171,
    csRGFG95 = 4624,
    csRGM04 = 4470,
    csRGNC91_93 = 4749,
    csRGPF = 4687,
    csRGR92 = 4627,
    csRGRDC_2005 = 4046,
    csRGSPM06 = 4463,
    csRRAF_1991 = 4558,
    csRSRGD2000 = 4764,
    csRT38 = 4308,
    csRT38_Stockholm = 4814,
    csRT90 = 4124,
    csSAD69 = 4618,
    csSaint_Pierre_et_Miquelon_1950 = 4638,
    csSanto_1965 = 4730,
    csSao_Tome = 4823,
    csSapper_Hill_1943 = 4292,
    csSchwarzeck = 4293,
    csScoresbysund_1952 = 4195,
    csSegara = 4613,
    csSegara_Jakarta = 4820,
    csSelvagem_Grande = 4616,
    csSerindung = 4295,
    csSierra_Leone_1924 = 4174,
    csSierra_Leone_1968 = 4175,
    csSIRGAS_1995 = 4170,
    csSIRGAS_2000 = 4674,
    csS_JTSK = 4156,
    csS_JTSK_Ferro = 4818,
    csS_JTSK_05 = 5228,
    csS_JTSK_05_Ferro = 5229,
    csSLD99 = 5233,
    csSlovenia_1996 = 4765,
    csSolomon_1968 = 4718,
    csSouth_Georgia_1968 = 4722,
    csSouth_Yemen = 4164,
    csSREF98 = 4075,
    csSt_George_Island = 4138,
    csSt_Helena_1971 = 4710,
    csSt_Kitts_1955 = 4605,
    csSt_Lawrence_Island = 4136,
    csSt_Lucia_1955 = 4606,
    csSt_Paul_Island = 4137,
    csSt_Vincent_1945 = 4607,
    csST71_Belep = 4643,
    csST84_Ile_des_Pins = 4642,
    csST87_Ouvea = 4750,
    csSVY21 = 4757,
    csSWEREF99 = 4619,
    csTahaa_54 = 4629,
    csTahiti_52 = 4628,
    csTahiti_79 = 4690,
    csTananarive = 4297,
    csTananarive_Paris = 4810,
    csTC_1948 = 4303,
    csTern_Island_1961 = 4707,
    csTete = 4127,
    csTimbalai_1948 = 4298,
    csTM65 = 4299,
    csTM75 = 4300,
    csTokyo = 4301,
    csTokyo_1892 = 5132,
    csTrinidad_1903 = 4302,
    csTristan_1968 = 4734,
    csTUREF = 5252,
    csTWD67 = 3821,
    csTWD97 = 3824,
    csVanua_Levu_1915 = 4748,
    csVientiane_1982 = 4676,
    csViti_Levu_1912 = 4752,
    csVN_2000 = 4756,
    csVoirol_1875 = 4304,
    csVoirol_1875_Paris = 4811,
    csVoirol_1879 = 4671,
    csVoirol_1879_Paris = 4821,
    csWake_Island_1952 = 4733,
    csWGS_66 = 4760,
    csWGS_72 = 4322,
    csWGS_72BE = 4324,
    csWGS_84 = 4326,
    csXian_1980 = 4610,
    csYacare = 4309,
    csYemen_NGN96 = 4163,
    csYoff = 4310,
    csZanderij = 4311,
}tkCoordinateSystem;

typedef
[
    uuid(32617F7E-44F7-4ecd-8228-85924A4DF5B7),
    helpstring("Enumerated tkNad83Projection Types"),
]
enum tkNad83Projection
{
    Nad83_Kentucky_North = 2205,
    Nad83_Arizona_East_ft = 2222,
    Nad83_Arizona_Central_ft = 2223,
    Nad83_Arizona_West_ft = 2224,
    Nad83_California_zone_1_ftUS = 2225,
    Nad83_California_zone_2_ftUS = 2226,
    Nad83_California_zone_3_ftUS = 2227,
    Nad83_California_zone_4_ftUS = 2228,
    Nad83_California_zone_5_ftUS = 2229,
    Nad83_California_zone_6_ftUS = 2230,
    Nad83_Colorado_North_ftUS = 2231,
    Nad83_Colorado_Central_ftUS = 2232,
    Nad83_Colorado_South_ftUS = 2233,
    Nad83_Connecticut_ftUS = 2234,
    Nad83_Delaware_ftUS = 2235,
    Nad83_Florida_East_ftUS = 2236,
    Nad83_Florida_West_ftUS = 2237,
    Nad83_Florida_North_ftUS = 2238,
    Nad83_Georgia_East_ftUS = 2239,
    Nad83_Georgia_West_ftUS = 2240,
    Nad83_Idaho_East_ftUS = 2241,
    Nad83_Idaho_Central_ftUS = 2242,
    Nad83_Idaho_West_ftUS = 2243,
    Nad83_Kentucky_North_ftUS = 2246,
    Nad83_Kentucky_South_ftUS = 2247,
    Nad83_Maryland_ftUS = 2248,
    Nad83_Massachusetts_Mainland_ftUS = 2249,
    Nad83_Massachusetts_Island_ftUS = 2250,
    Nad83_Michigan_North_ft = 2251,
    Nad83_Michigan_Central_ft = 2252,
    Nad83_Michigan_South_ft = 2253,
    Nad83_Mississippi_East_ftUS = 2254,
    Nad83_Mississippi_West_ftUS = 2255,
    Nad83_Montana_ft = 2256,
    Nad83_New_Mexico_East_ftUS = 2257,
    Nad83_New_Mexico_Central_ftUS = 2258,
    Nad83_New_Mexico_West_ftUS = 2259,
    Nad83_New_York_East_ftUS = 2260,
    Nad83_New_York_Central_ftUS = 2261,
    Nad83_New_York_West_ftUS = 2262,
    Nad83_New_York_Long_Island_ftUS = 2263,
    Nad83_North_Carolina_ftUS = 2264,
    Nad83_North_Dakota_North_ft = 2265,
    Nad83_North_Dakota_South_ft = 2266,
    Nad83_Oklahoma_North_ftUS = 2267,
    Nad83_Oklahoma_South_ftUS = 2268,
    Nad83_Oregon_North_ft = 2269,
    Nad83_Oregon_South_ft = 2270,
    Nad83_Pennsylvania_North_ftUS = 2271,
    Nad83_Pennsylvania_South_ftUS = 2272,
    Nad83_South_Carolina_ft = 2273,
    Nad83_Tennessee_ftUS = 2274,
    Nad83_Texas_North_ftUS = 2275,
    Nad83_Texas_North_Central_ftUS = 2276,
    Nad83_Texas_Central_ftUS = 2277,
    Nad83_Texas_South_Central_ftUS = 2278,
    Nad83_Texas_South_ftUS = 2279,
    Nad83_Utah_North_ft = 2280,
    Nad83_Utah_Central_ft = 2281,
    Nad83_Utah_South_ft = 2282,
    Nad83_Virginia_North_ftUS = 2283,
    Nad83_Virginia_South_ftUS = 2284,
    Nad83_Washington_North_ftUS = 2285,
    Nad83_Washington_South_ftUS = 2286,
    Nad83_Wisconsin_North_ftUS = 2287,
    Nad83_Wisconsin_Central_ftUS = 2288,
    Nad83_Wisconsin_South_ftUS = 2289,
    Nad83_Indiana_East_ftUS = 2965,
    Nad83_Indiana_West_ftUS = 2966,
    Nad83_Oregon_Lambert = 2991,
    Nad83_Oregon_Lambert_ft = 2992,
    Nad83_BC_Albers = 3005,
    Nad83_Wisconsin_Transverse_Mercator = 3070,
    Nad83_Maine_CS2000_East = 3072,
    Nad83_Maine_CS2000_West = 3074,
    Nad83_Michigan_Oblique_Mercator = 3078,
    Nad83_Texas_State_Mapping_System = 3081,
    Nad83_Texas_Centric_Lambert_Conformal = 3082,
    Nad83_Texas_Centric_Albers_Equal_Area = 3083,
    Nad83_Florida_GDL_Albers = 3086,
    Nad83_Kentucky_Single_Zone = 3088,
    Nad83_Kentucky_Single_Zone_ftUS = 3089,
    Nad83_Ontario_MNR_Lambert = 3161,
    Nad83_Great_Lakes_Albers = 3174,
    Nad83_Great_Lakes_and_St_Lawrence_Albers = 3175,
    Nad83_California_Albers = 3310,
    Nad83_Alaska_Albers = 3338,
    Nad83_Statistics_Canada_Lambert = 3347,
    Nad83_Alberta_10_TM_Forest = 3400,
    Nad83_Alberta_10_TM_Resource = 3401,
    Nad83_Iowa_North_ft_US = 3417,
    Nad83_Iowa_South_ft_US = 3418,
    Nad83_Kansas_North_ft_US = 3419,
    Nad83_Kansas_South_ft_US = 3420,
    Nad83_Nevada_East_ft_US = 3421,
    Nad83_Nevada_Central_ft_US = 3422,
    Nad83_Nevada_West_ft_US = 3423,
    Nad83_New_Jersey_ft_US = 3424,
    Nad83_Arkansas_North_ftUS = 3433,
    Nad83_Arkansas_South_ftUS = 3434,
    Nad83_Illinois_East_ftUS = 3435,
    Nad83_Illinois_West_ftUS = 3436,
    Nad83_New_Hampshire_ftUS = 3437,
    Nad83_Rhode_Island_ftUS = 3438,
    Nad83_Louisiana_North_ftUS = 3451,
    Nad83_Louisiana_South_ftUS = 3452,
    Nad83_Louisiana_Offshore_ftUS = 3453,
    Nad83_South_Dakota_South_ftUS = 3455,
    Nad83_Maine_CS2000_Central = 3463,
    Nad83_Utah_North_ftUS = 3560,
    Nad83_Utah_Central_ftUS = 3566,
    Nad83_Utah_South_ftUS = 3567,
    Nad83_Yukon_Albers = 3578,
    Nad83_NWT_Lambert = 3580,
    Nad83_Ohio_North_ftUS = 3734,
    Nad83_Ohio_South_ftUS = 3735,
    Nad83_Wyoming_East_ftUS = 3736,
    Nad83_Wyoming_East_Central_ftUS = 3737,
    Nad83_Wyoming_West_Central_ftUS = 3738,
    Nad83_Wyoming_West_ftUS = 3739,
    Nad83_Hawaii_zone_3_ftUS = 3759,
    Nad83_Alberta_3TM_ref_merid_111_W = 3775,
    Nad83_Alberta_3TM_ref_merid_114_W = 3776,
    Nad83_Alberta_3TM_ref_merid_117_W = 3777,
    Nad83_MTQ_Lambert = 3798,
    Nad83_Alberta_3TM_ref_merid_120_W = 3801,
    Nad83_Mississippi_TM = 3814,
    Nad83_Virginia_Lambert = 3968,
    Nad83_Canada_Atlas_Lambert = 3978,
    Nad83_BLM_59N_ftUS = 4217,
    Nad83_BLM_60N_ftUS = 4420,
    Nad83_BLM_1N_ftUS = 4421,
    Nad83_BLM_2N_ftUS = 4422,
    Nad83_BLM_3N_ftUS = 4423,
    Nad83_BLM_4N_ftUS = 4424,
    Nad83_BLM_5N_ftUS = 4425,
    Nad83_BLM_6N_ftUS = 4426,
    Nad83_BLM_7N_ftUS = 4427,
    Nad83_BLM_8N_ftUS = 4428,
    Nad83_BLM_9N_ftUS = 4429,
    Nad83_BLM_10N_ftUS = 4430,
    Nad83_BLM_11N_ftUS = 4431,
    Nad83_BLM_12N_ftUS = 4432,
    Nad83_BLM_13N_ftUS = 4433,
    Nad83_BLM_18N_ftUS = 4438,
    Nad83_BLM_19N_ftUS = 4439,
    Nad83_South_Dakota_North_ftUS = 4457,
    Nad83_Conus_Albers = 5070,
    Nad83_Teranet_Ontario_Lambert = 5320,
    Nad83_Maine_East_ftUS = 26847,
    Nad83_Maine_West_ftUS = 26848,
    Nad83_Minnesota_North_ftUS = 26849,
    Nad83_Minnesota_Central_ftUS = 26850,
    Nad83_Minnesota_South_ftUS = 26851,
    Nad83_Nebraska_ftUS = 26852,
    Nad83_West_Virginia_North_ftUS = 26853,
    Nad83_West_Virginia_South_ftUS = 26854,
    Nad83_UTM_zone_59N = 3372,			// the names duplicate WGS84
    Nad83_UTM_zone_60N = 3373,
    Nad83_UTM_zone_1N = 26901,
    Nad83_UTM_zone_2N = 26902,
    Nad83_UTM_zone_3N = 26903,
    Nad83_UTM_zone_4N = 26904,
    Nad83_UTM_zone_5N = 26905,
    Nad83_UTM_zone_6N = 26906,
    Nad83_UTM_zone_7N = 26907,
    Nad83_UTM_zone_8N = 26908,
    Nad83_UTM_zone_9N = 26909,
    Nad83_UTM_zone_10N = 26910,
    Nad83_UTM_zone_11N = 26911,
    Nad83_UTM_zone_12N = 26912,
    Nad83_UTM_zone_13N = 26913,
    Nad83_UTM_zone_14N = 26914,
    Nad83_UTM_zone_15N = 26915,
    Nad83_UTM_zone_16N = 26916,
    Nad83_UTM_zone_17N = 26917,
    Nad83_UTM_zone_18N = 26918,
    Nad83_UTM_zone_19N = 26919,
    Nad83_UTM_zone_20N = 26920,
    Nad83_UTM_zone_21N = 26921,
    Nad83_UTM_zone_22N = 26922,
    Nad83_UTM_zone_23N = 26923,
    Nad83_BLM_14N_ftUS = 32164,
    Nad83_BLM_15N_ftUS = 32165,
    Nad83_BLM_16N_ftUS = 32166,
    Nad83_BLM_17N_ftUS = 32167,
    Nad83_Alabama_East = 26929,
    Nad83_Alabama_West = 26930,
    Nad83_Alaska_zone_1 = 26931,
    Nad83_Alaska_zone_2 = 26932,
    Nad83_Alaska_zone_3 = 26933,
    Nad83_Alaska_zone_4 = 26934,
    Nad83_Alaska_zone_5 = 26935,
    Nad83_Alaska_zone_6 = 26936,
    Nad83_Alaska_zone_7 = 26937,
    Nad83_Alaska_zone_8 = 26938,
    Nad83_Alaska_zone_9 = 26939,
    Nad83_Alaska_zone_10 = 26940,
    Nad83_California_zone_1 = 26941,
    Nad83_California_zone_2 = 26942,
    Nad83_California_zone_3 = 26943,
    Nad83_California_zone_4 = 26944,
    Nad83_California_zone_5 = 26945,
    Nad83_California_zone_6 = 26946,
    Nad83_Arizona_East = 26948,
    Nad83_Arizona_Central = 26949,
    Nad83_Arizona_West = 26950,
    Nad83_Arkansas_North = 26951,
    Nad83_Arkansas_South = 26952,
    Nad83_Colorado_North = 26953,
    Nad83_Colorado_Central = 26954,
    Nad83_Colorado_South = 26955,
    Nad83_Connecticut = 26956,
    Nad83_Delaware = 26957,
    Nad83_Florida_East = 26958,
    Nad83_Florida_West = 26959,
    Nad83_Florida_North = 26960,
    Nad83_Hawaii_zone_1 = 26961,
    Nad83_Hawaii_zone_2 = 26962,
    Nad83_Hawaii_zone_3 = 26963,
    Nad83_Hawaii_zone_4 = 26964,
    Nad83_Hawaii_zone_5 = 26965,
    Nad83_Georgia_East = 26966,
    Nad83_Georgia_West = 26967,
    Nad83_Idaho_East = 26968,
    Nad83_Idaho_Central = 26969,
    Nad83_Idaho_West = 26970,
    Nad83_Illinois_East = 26971,
    Nad83_Illinois_West = 26972,
    Nad83_Indiana_East = 26973,
    Nad83_Indiana_West = 26974,
    Nad83_Iowa_North = 26975,
    Nad83_Iowa_South = 26976,
    Nad83_Kansas_North = 26977,
    Nad83_Kansas_South = 26978,
    Nad83_Kentucky_South = 26980,
    Nad83_Louisiana_North = 26981,
    Nad83_Louisiana_South = 26982,
    Nad83_Maine_East = 26983,
    Nad83_Maine_West = 26984,
    Nad83_Maryland = 26985,
    Nad83_Massachusetts_Mainland = 26986,
    Nad83_Massachusetts_Island = 26987,
    Nad83_Michigan_North = 26988,
    Nad83_Michigan_Central = 26989,
    Nad83_Michigan_South = 26990,
    Nad83_Minnesota_North = 26991,
    Nad83_Minnesota_Central = 26992,
    Nad83_Minnesota_South = 26993,
    Nad83_Mississippi_East = 26994,
    Nad83_Mississippi_West = 26995,
    Nad83_Missouri_East = 26996,
    Nad83_Missouri_Central = 26997,
    Nad83_Missouri_West = 26998,
    Nad83_Montana = 32100,
    Nad83_Nebraska = 32104,
    Nad83_Nevada_East = 32107,
    Nad83_Nevada_Central = 32108,
    Nad83_Nevada_West = 32109,
    Nad83_New_Hampshire = 32110,
    Nad83_New_Jersey = 32111,
    Nad83_New_Mexico_East = 32112,
    Nad83_New_Mexico_Central = 32113,
    Nad83_New_Mexico_West = 32114,
    Nad83_New_York_East = 32115,
    Nad83_New_York_Central = 32116,
    Nad83_New_York_West = 32117,
    Nad83_New_York_Long_Island = 32118,
    Nad83_North_Carolina = 32119,
    Nad83_North_Dakota_North = 32120,
    Nad83_North_Dakota_South = 32121,
    Nad83_Ohio_North = 32122,
    Nad83_Ohio_South = 32123,
    Nad83_Oklahoma_North = 32124,
    Nad83_Oklahoma_South = 32125,
    Nad83_Oregon_North = 32126,
    Nad83_Oregon_South = 32127,
    Nad83_Pennsylvania_North = 32128,
    Nad83_Pennsylvania_South = 32129,
    Nad83_Rhode_Island = 32130,
    Nad83_South_Carolina = 32133,
    Nad83_South_Dakota_North = 32134,
    Nad83_South_Dakota_South = 32135,
    Nad83_Tennessee = 32136,
    Nad83_Texas_North = 32137,
    Nad83_Texas_North_Central = 32138,
    Nad83_Texas_Central = 32139,
    Nad83_Texas_South_Central = 32140,
    Nad83_Texas_South = 32141,
    Nad83_Utah_North = 32142,
    Nad83_Utah_Central = 32143,
    Nad83_Utah_South = 32144,
    Nad83_Vermont = 32145,
    Nad83_Virginia_North = 32146,
    Nad83_Virginia_South = 32147,
    Nad83_Washington_North = 32148,
    Nad83_Washington_South = 32149,
    Nad83_West_Virginia_North = 32150,
    Nad83_West_Virginia_South = 32151,
    Nad83_Wisconsin_North = 32152,
    Nad83_Wisconsin_Central = 32153,
    Nad83_Wisconsin_South = 32154,
    Nad83_Wyoming_East = 32155,
    Nad83_Wyoming_East_Central = 32156,
    Nad83_Wyoming_West_Central = 32157,
    Nad83_Wyoming_West = 32158,
    Nad83_Puerto_Rico_and_Virgin_Is = 32161,
    Nad83_SCoPQ_zone_2 = 32180,
    Nad83_MTM_zone_1 = 32181,
    Nad83_MTM_zone_2 = 32182,
    Nad83_MTM_zone_3 = 32183,
    Nad83_MTM_zone_4 = 32184,
    Nad83_MTM_zone_5 = 32185,
    Nad83_MTM_zone_6 = 32186,
    Nad83_MTM_zone_7 = 32187,
    Nad83_MTM_zone_8 = 32188,
    Nad83_MTM_zone_9 = 32189,
    Nad83_MTM_zone_10 = 32190,
    Nad83_MTM_zone_11 = 32191,
    Nad83_MTM_zone_12 = 32192,
    Nad83_MTM_zone_13 = 32193,
    Nad83_MTM_zone_14 = 32194,
    Nad83_MTM_zone_15 = 32195,
    Nad83_MTM_zone_16 = 32196,
    Nad83_MTM_zone_17 = 32197,
    Nad83_Quebec_Lambert = 32198,
    Nad83_Louisiana_Offshore = 32199,
    // following are the NAD83 State Plane constants from esri_extra.wkt
    NAD_1983_StatePlane_Guam_FIPS_5400 = 65161,
    // NOTE that the following are excluded (at least for now) to be 
    // consistent with CUtils::GetProjectionList, where we gather names
    // based on their 'well-known' string prefix's (NAD83 or NAD_1983_S)
    //Canada_Albers_Equal_Area_Conic = 102001,
    //Canada_Lambert_Conformal_Conic = 102002,
    //USA_Contiguous_Albers_Equal_Area_Conic = 102003,
    //USA_Contiguous_Lambert_Conformal_Conic = 102004,
    //USA_Contiguous_Equidistant_Conic = 102005,
    //Alaska_Albers_Equal_Area_Conic = 102006,
    //Hawaii_Albers_Equal_Area_Conic = 102007,
    //North_America_Albers_Equal_Area_Conic = 102008,
    //North_America_Lambert_Conformal_Conic = 102009,
    //North_America_Equidistant_Conic = 102010,
    //NAD_1983_Michigan_GeoRef_Feet_US = 102121,
    //NAD_1983_Michigan_GeoRef_Meters = 102123,
    NAD_1983_StatePlane_Alabama_East_FIPS_0101_Feet = 102629,
    NAD_1983_StatePlane_Alabama_West_FIPS_0102_Feet = 102630,
    NAD_1983_StatePlane_Alaska_1_FIPS_5001_Feet = 102631,
    NAD_1983_StatePlane_Alaska_2_FIPS_5002_Feet = 102632,
    NAD_1983_StatePlane_Alaska_3_FIPS_5003_Feet = 102633,
    NAD_1983_StatePlane_Alaska_4_FIPS_5004_Feet = 102634,
    NAD_1983_StatePlane_Alaska_5_FIPS_5005_Feet = 102635,
    NAD_1983_StatePlane_Alaska_6_FIPS_5006_Feet = 102636,
    NAD_1983_StatePlane_Alaska_7_FIPS_5007_Feet = 102637,
    NAD_1983_StatePlane_Alaska_8_FIPS_5008_Feet = 102638,
    NAD_1983_StatePlane_Alaska_9_FIPS_5009_Feet = 102639,
    NAD_1983_StatePlane_Alaska_10_FIPS_5010_Feet = 102640,
    NAD_1983_StatePlane_California_I_FIPS_0401_Feet = 102641,
    NAD_1983_StatePlane_California_II_FIPS_0402_Feet = 102642,
    NAD_1983_StatePlane_California_III_FIPS_0403_Feet = 102643,
    NAD_1983_StatePlane_California_IV_FIPS_0404_Feet = 102644,
    NAD_1983_StatePlane_California_V_FIPS_0405_Feet = 102645,
    NAD_1983_StatePlane_California_VI_FIPS_0406_Feet = 102646,
    NAD_1983_StatePlane_Arizona_East_FIPS_0201_Feet = 102648,
    NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet = 102649,
    NAD_1983_StatePlane_Arizona_West_FIPS_0203_Feet = 102650,
    NAD_1983_StatePlane_Arkansas_North_FIPS_0301_Feet = 102651,
    NAD_1983_StatePlane_Arkansas_South_FIPS_0302_Feet = 102652,
    NAD_1983_StatePlane_Colorado_North_FIPS_0501_Feet = 102653,
    NAD_1983_StatePlane_Colorado_Central_FIPS_0502_Feet = 102654,
    NAD_1983_StatePlane_Colorado_South_FIPS_0503_Feet = 102655,
    NAD_1983_StatePlane_Connecticut_FIPS_0600_Feet = 102656,
    NAD_1983_StatePlane_Delaware_FIPS_0700_Feet = 102657,
    NAD_1983_StatePlane_Florida_East_FIPS_0901_Feet = 102658,
    NAD_1983_StatePlane_Florida_West_FIPS_0902_Feet = 102659,
    NAD_1983_StatePlane_Florida_North_FIPS_0903_Feet = 102660,
    NAD_1983_StatePlane_Hawaii_1_FIPS_5101_Feet = 102661,
    NAD_1983_StatePlane_Hawaii_2_FIPS_5102_Feet = 102662,
    NAD_1983_StatePlane_Hawaii_3_FIPS_5103_Feet = 102663,
    NAD_1983_StatePlane_Hawaii_4_FIPS_5104_Feet = 102664,
    NAD_1983_StatePlane_Hawaii_5_FIPS_5105_Feet = 102665,
    NAD_1983_StatePlane_Georgia_East_FIPS_1001_Feet = 102666,
    NAD_1983_StatePlane_Georgia_West_FIPS_1002_Feet = 102667,
    NAD_1983_StatePlane_Idaho_East_FIPS_1101_Feet = 102668,
    NAD_1983_StatePlane_Idaho_Central_FIPS_1102_Feet = 102669,
    NAD_1983_StatePlane_Idaho_West_FIPS_1103_Feet = 102670,
    NAD_1983_StatePlane_Illinois_East_FIPS_1201_Feet = 102671,
    NAD_1983_StatePlane_Illinois_West_FIPS_1202_Feet = 102672,
    NAD_1983_StatePlane_Indiana_East_FIPS_1301_Feet = 102673,
    NAD_1983_StatePlane_Indiana_West_FIPS_1302_Feet = 102674,
    NAD_1983_StatePlane_Iowa_North_FIPS_1401_Feet = 102675,
    NAD_1983_StatePlane_Iowa_South_FIPS_1402_Feet = 102676,
    NAD_1983_StatePlane_Kansas_North_FIPS_1501_Feet = 102677,
    NAD_1983_StatePlane_Kansas_South_FIPS_1502_Feet = 102678,
    NAD_1983_StatePlane_Kentucky_North_FIPS_1601_Feet = 102679,
    NAD_1983_StatePlane_Kentucky_South_FIPS_1602_Feet = 102680,
    NAD_1983_StatePlane_Louisiana_North_FIPS_1701_Feet = 102681,
    NAD_1983_StatePlane_Louisiana_South_FIPS_1702_Feet = 102682,
    NAD_1983_StatePlane_Maine_East_FIPS_1801_Feet = 102683,
    NAD_1983_StatePlane_Maine_West_FIPS_1802_Feet = 102684,
    NAD_1983_StatePlane_Maryland_FIPS_1900_Feet = 102685,
    NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001_Feet = 102686,
    NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002_Feet = 102687,
    NAD_1983_StatePlane_Michigan_North_FIPS_2111_Feet = 102688,
    NAD_1983_StatePlane_Michigan_Central_FIPS_2112_Feet = 102689,
    NAD_1983_StatePlane_Michigan_South_FIPS_2113_Feet = 102690,
    NAD_1983_StatePlane_Minnesota_North_FIPS_2201_Feet = 102691,
    NAD_1983_StatePlane_Minnesota_Central_FIPS_2202_Feet = 102692,
    NAD_1983_StatePlane_Minnesota_South_FIPS_2203_Feet = 102693,
    NAD_1983_StatePlane_Mississippi_East_FIPS_2301_Feet = 102694,
    NAD_1983_StatePlane_Mississippi_West_FIPS_2302_Feet = 102695,
    NAD_1983_StatePlane_Missouri_East_FIPS_2401_Feet = 102696,
    NAD_1983_StatePlane_Missouri_Central_FIPS_2402_Feet = 102697,
    NAD_1983_StatePlane_Missouri_West_FIPS_2403_Feet = 102698,
    NAD_1983_StatePlane_Montana_FIPS_2500_Feet = 102700,
    NAD_1983_StatePlane_Nebraska_FIPS_2600_Feet = 102704,
    NAD_1983_StatePlane_Nevada_East_FIPS_2701_Feet = 102707,
    NAD_1983_StatePlane_Nevada_Central_FIPS_2702_Feet = 102708,
    NAD_1983_StatePlane_Nevada_West_FIPS_2703_Feet = 102709,
    NAD_1983_StatePlane_New_Hampshire_FIPS_2800_Feet = 102710,
    NAD_1983_StatePlane_New_Jersey_FIPS_2900_Feet = 102711,
    NAD_1983_StatePlane_New_Mexico_East_FIPS_3001_Feet = 102712,
    NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002_Feet = 102713,
    NAD_1983_StatePlane_New_Mexico_West_FIPS_3003_Feet = 102714,
    NAD_1983_StatePlane_New_York_East_FIPS_3101_Feet = 102715,
    NAD_1983_StatePlane_New_York_Central_FIPS_3102_Feet = 102716,
    NAD_1983_StatePlane_New_York_West_FIPS_3103_Feet = 102717,
    NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104_Feet = 102718,
    NAD_1983_StatePlane_North_Carolina_FIPS_3200_Feet = 102719,
    NAD_1983_StatePlane_North_Dakota_North_FIPS_3301_Feet = 102720,
    NAD_1983_StatePlane_North_Dakota_South_FIPS_3302_Feet = 102721,
    NAD_1983_StatePlane_Ohio_North_FIPS_3401_Feet = 102722,
    NAD_1983_StatePlane_Ohio_South_FIPS_3402_Feet = 102723,
    NAD_1983_StatePlane_Oklahoma_North_FIPS_3501_Feet = 102724,
    NAD_1983_StatePlane_Oklahoma_South_FIPS_3502_Feet = 102725,
    NAD_1983_StatePlane_Oregon_North_FIPS_3601_Feet = 102726,
    NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet = 102727,
    NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet = 102728,
    NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702_Feet = 102729,
    NAD_1983_StatePlane_Rhode_Island_FIPS_3800_Feet = 102730,
    NAD_1983_StatePlane_South_Carolina_FIPS_3900_Feet = 102733,
    NAD_1983_StatePlane_South_Dakota_North_FIPS_4001_Feet = 102734,
    NAD_1983_StatePlane_South_Dakota_South_FIPS_4002_Feet = 102735,
    NAD_1983_StatePlane_Tennessee_FIPS_4100_Feet = 102736,
    NAD_1983_StatePlane_Texas_North_FIPS_4201_Feet = 102737,
    NAD_1983_StatePlane_Texas_North_Central_FIPS_4202_Feet = 102738,
    NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet = 102739,
    NAD_1983_StatePlane_Texas_South_Central_FIPS_4204_Feet = 102740,
    NAD_1983_StatePlane_Texas_South_FIPS_4205_Feet = 102741,
    NAD_1983_StatePlane_Utah_North_FIPS_4301_Feet = 102742,
    NAD_1983_StatePlane_Utah_Central_FIPS_4302_Feet = 102743,
    NAD_1983_StatePlane_Utah_South_FIPS_4303_Feet = 102744,
    NAD_1983_StatePlane_Vermont_FIPS_4400_Feet = 102745,
    NAD_1983_StatePlane_Virginia_North_FIPS_4501_Feet = 102746,
    NAD_1983_StatePlane_Virginia_South_FIPS_4502_Feet = 102747,
    NAD_1983_StatePlane_Washington_North_FIPS_4601_Feet = 102748,
    NAD_1983_StatePlane_Washington_South_FIPS_4602_Feet = 102749,
    NAD_1983_StatePlane_West_Virginia_North_FIPS_4701_Feet = 102750,
    NAD_1983_StatePlane_West_Virginia_South_FIPS_4702_Feet = 102751,
    NAD_1983_StatePlane_Wisconsin_North_FIPS_4801_Feet = 102752,
    NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802_Feet = 102753,
    NAD_1983_StatePlane_Wisconsin_South_FIPS_4803_Feet = 102754,
    NAD_1983_StatePlane_Wyoming_East_FIPS_4901_Feet = 102755,
    NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902_Feet = 102756,
    NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903_Feet = 102757,
    NAD_1983_StatePlane_Wyoming_West_FIPS_4904_Feet = 102758,
    NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200_Feet = 102761,
    NAD_1983_StatePlane_Guam_FIPS_5400_Feet = 102766,
}tkNad83Projection;

typedef
[
    uuid(71C4AFC7-1527-4931-B031-3309C30F3213),
    helpstring("Enumerated tkWgs84Projection Types"),
]
enum tkWgs84Projection
{
    Wgs84_World_Mercator = 3395,
    Wgs84_PDC_Mercator = 3832,
    Wgs84_Pseudo_Mercator = 3857,
    Wgs84_Mercator_41 = 3994,
    Wgs84_World_Equidistant_Cylindrical = 4087,
    Wgs84_UPS_North_EN = 5041,
    Wgs84_UPS_South_EN = 5042,
    Wgs84_UTM_grid_system_northern_hemisphere = 32600,
    Wgs84_UTM_zone_1N = 32601,
    Wgs84_UTM_zone_2N = 32602,
    Wgs84_UTM_zone_3N = 32603,
    Wgs84_UTM_zone_4N = 32604,
    Wgs84_UTM_zone_5N = 32605,
    Wgs84_UTM_zone_6N = 32606,
    Wgs84_UTM_zone_7N = 32607,
    Wgs84_UTM_zone_8N = 32608,
    Wgs84_UTM_zone_9N = 32609,
    Wgs84_UTM_zone_10N = 32610,
    Wgs84_UTM_zone_11N = 32611,
    Wgs84_UTM_zone_12N = 32612,
    Wgs84_UTM_zone_13N = 32613,
    Wgs84_UTM_zone_14N = 32614,
    Wgs84_UTM_zone_15N = 32615,
    Wgs84_UTM_zone_16N = 32616,
    Wgs84_UTM_zone_17N = 32617,
    Wgs84_UTM_zone_18N = 32618,
    Wgs84_UTM_zone_19N = 32619,
    Wgs84_UTM_zone_20N = 32620,
    Wgs84_UTM_zone_21N = 32621,
    Wgs84_UTM_zone_22N = 32622,
    Wgs84_UTM_zone_23N = 32623,
    Wgs84_UTM_zone_24N = 32624,
    Wgs84_UTM_zone_25N = 32625,
    Wgs84_UTM_zone_26N = 32626,
    Wgs84_UTM_zone_27N = 32627,
    Wgs84_UTM_zone_28N = 32628,
    Wgs84_UTM_zone_29N = 32629,
    Wgs84_UTM_zone_30N = 32630,
    Wgs84_UTM_zone_31N = 32631,
    Wgs84_UTM_zone_32N = 32632,
    Wgs84_UTM_zone_33N = 32633,
    Wgs84_UTM_zone_34N = 32634,
    Wgs84_UTM_zone_35N = 32635,
    Wgs84_UTM_zone_36N = 32636,
    Wgs84_UTM_zone_37N = 32637,
    Wgs84_UTM_zone_38N = 32638,
    Wgs84_UTM_zone_39N = 32639,
    Wgs84_UTM_zone_40N = 32640,
    Wgs84_UTM_zone_41N = 32641,
    Wgs84_UTM_zone_42N = 32642,
    Wgs84_UTM_zone_43N = 32643,
    Wgs84_UTM_zone_44N = 32644,
    Wgs84_UTM_zone_45N = 32645,
    Wgs84_UTM_zone_46N = 32646,
    Wgs84_UTM_zone_47N = 32647,
    Wgs84_UTM_zone_48N = 32648,
    Wgs84_UTM_zone_49N = 32649,
    Wgs84_UTM_zone_50N = 32650,
    Wgs84_UTM_zone_51N = 32651,
    Wgs84_UTM_zone_52N = 32652,
    Wgs84_UTM_zone_53N = 32653,
    Wgs84_UTM_zone_54N = 32654,
    Wgs84_UTM_zone_55N = 32655,
    Wgs84_UTM_zone_56N = 32656,
    Wgs84_UTM_zone_57N = 32657,
    Wgs84_UTM_zone_58N = 32658,
    Wgs84_UTM_zone_59N = 32659,
    Wgs84_UTM_zone_60N = 32660,
    Wgs84_UPS_North_NE = 32661,
    Wgs84_BLM_14N_ftUS = 32664,
    Wgs84_BLM_15N_ftUS = 32665,
    Wgs84_BLM_16N_ftUS = 32666,
    Wgs84_BLM_17N_ftUS = 32667,
    Wgs84_UTM_grid_system_southern_hemisphere = 32700,
    Wgs84_UTM_zone_1S = 32701,
    Wgs84_UTM_zone_2S = 32702,
    Wgs84_UTM_zone_3S = 32703,
    Wgs84_UTM_zone_4S = 32704,
    Wgs84_UTM_zone_5S = 32705,
    Wgs84_UTM_zone_6S = 32706,
    Wgs84_UTM_zone_7S = 32707,
    Wgs84_UTM_zone_8S = 32708,
    Wgs84_UTM_zone_9S = 32709,
    Wgs84_UTM_zone_10S = 32710,
    Wgs84_UTM_zone_11S = 32711,
    Wgs84_UTM_zone_12S = 32712,
    Wgs84_UTM_zone_13S = 32713,
    Wgs84_UTM_zone_14S = 32714,
    Wgs84_UTM_zone_15S = 32715,
    Wgs84_UTM_zone_16S = 32716,
    Wgs84_UTM_zone_17S = 32717,
    Wgs84_UTM_zone_18S = 32718,
    Wgs84_UTM_zone_19S = 32719,
    Wgs84_UTM_zone_20S = 32720,
    Wgs84_UTM_zone_21S = 32721,
    Wgs84_UTM_zone_22S = 32722,
    Wgs84_UTM_zone_23S = 32723,
    Wgs84_UTM_zone_24S = 32724,
    Wgs84_UTM_zone_25S = 32725,
    Wgs84_UTM_zone_26S = 32726,
    Wgs84_UTM_zone_27S = 32727,
    Wgs84_UTM_zone_28S = 32728,
    Wgs84_UTM_zone_29S = 32729,
    Wgs84_UTM_zone_30S = 32730,
    Wgs84_UTM_zone_31S = 32731,
    Wgs84_UTM_zone_32S = 32732,
    Wgs84_UTM_zone_33S = 32733,
    Wgs84_UTM_zone_34S = 32734,
    Wgs84_UTM_zone_35S = 32735,
    Wgs84_UTM_zone_36S = 32736,
    Wgs84_UTM_zone_37S = 32737,
    Wgs84_UTM_zone_38S = 32738,
    Wgs84_UTM_zone_39S = 32739,
    Wgs84_UTM_zone_40S = 32740,
    Wgs84_UTM_zone_41S = 32741,
    Wgs84_UTM_zone_42S = 32742,
    Wgs84_UTM_zone_43S = 32743,
    Wgs84_UTM_zone_44S = 32744,
    Wgs84_UTM_zone_45S = 32745,
    Wgs84_UTM_zone_46S = 32746,
    Wgs84_UTM_zone_47S = 32747,
    Wgs84_UTM_zone_48S = 32748,
    Wgs84_UTM_zone_49S = 32749,
    Wgs84_UTM_zone_50S = 32750,
    Wgs84_UTM_zone_51S = 32751,
    Wgs84_UTM_zone_52S = 32752,
    Wgs84_UTM_zone_53S = 32753,
    Wgs84_UTM_zone_54S = 32754,
    Wgs84_UTM_zone_55S = 32755,
    Wgs84_UTM_zone_56S = 32756,
    Wgs84_UTM_zone_57S = 32757,
    Wgs84_UTM_zone_58S = 32758,
    Wgs84_UTM_zone_59S = 32759,
    Wgs84_UTM_zone_60S = 32760,
    Wgs84_UPS_South_NE = 32761,
    // following are the WGS84 constants from esri_extra.wkt
    WGS_1984_Web_Mercator = 102113,
}tkWgs84Projection;

typedef
[
    uuid(29389DAF-9EF7-4C89-B000-D4735EB1D789),
    helpstring("Enumerated Projection Sets"),
]
enum tkProjectionSet
{
    [helpstring("All Projections")] psAll_Projections = 1,
    [helpstring("NAD83 Subset")] psNAD83_Subset = 2,
    [helpstring("WGS84 Subset")] psWGS84_Subset = 4,
}tkProjectionSet;

[
    object,
    uuid(105018E5-A71A-4734-AC06-094A3ABCC7BA),
    dual,
    nonextensible,
    helpstring("IShapeEditor Interface"),
    pointer_default(unique)
]
interface IShapeEditor : IDispatch {

    [propget, id(1)] HRESULT ShapeType([out, retval] ShpfileType* retVal);
    [propput, id(1)] HRESULT ShapeType([in] ShpfileType newVal);
    [propget, id(2)] HRESULT numPoints([out, retval] long* retVal);
    [id(3)] HRESULT get_PointXY([in]long pointIndex, [out]double* x, [out]double* y, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(4)] HRESULT ValidatedShape([out, retval] IShape** retVal);
    [id(5)] HRESULT UndoPoint([out, retval] VARIANT_BOOL* retVal);
    [propget, id(6)] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(7)] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(8)] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(8)] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(9)] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(9)] HRESULT Key([in]BSTR newVal);
    [id(10)] HRESULT Clear();
    [id(11)] HRESULT CopyOptionsFrom([in] IShapeDrawingOptions* options);
    [propget, id(12)] HRESULT SegmentLength([in]int segmentIndex, [out, retval]double* retVal);
    [propget, id(13)] HRESULT SegmentAngle([in]int segmentIndex, [out, retval]double* retVal);
    [propget, id(14)] HRESULT AreaDisplayMode([out, retval]tkAreaDisplayMode* retVal);
    [propput, id(14)] HRESULT AreaDisplayMode([in]tkAreaDisplayMode newVal);
    [propget, id(15)] HRESULT SelectedVertex([out, retval]int* retVal);
    [propput, id(15)] HRESULT SelectedVertex([in]int newVal);
    [propget, id(16)] HRESULT RawData([out, retval] IShape** pVal);
    [propget, id(17)] HRESULT IsDigitizing([out, retval]VARIANT_BOOL* retVal);
    [propget, id(20)] HRESULT Area([out, retval]double* retVal);
    [propget, id(22)] HRESULT BearingType([out, retval]tkBearingType* retVal);
    [propput, id(22)] HRESULT BearingType([in]tkBearingType newVal);
    [id(23)] HRESULT put_PointXY([in]long pointIndex, [in]double X, [in]double Y, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(24)] HRESULT LayerHandle([out, retval]LONG* retVal);
    [propget, id(25)] HRESULT ShapeIndex([out, retval]LONG* retVal);
    [propget, id(28)] HRESULT FillColor([out, retval] OLE_COLOR* pVal);
    [propput, id(28)] HRESULT FillColor([in] OLE_COLOR newVal);
    [propget, id(29)] HRESULT FillTransparency([out, retval] BYTE* pVal);
    [propput, id(29)] HRESULT FillTransparency([in] BYTE newVal);
    [propget, id(30)] HRESULT LineColor([out, retval] OLE_COLOR* pVal);
    [propput, id(30)] HRESULT LineColor([in] OLE_COLOR newVal);
    [propget, id(31)] HRESULT LineWidth([out, retval] FLOAT* pVal);
    [propput, id(31)] HRESULT LineWidth([in] FLOAT newVal);
    [propget, id(33)] HRESULT IsEmpty([out, retval] VARIANT_BOOL* pVal);
    [propget, id(34)] HRESULT SnapTolerance([out, retval] DOUBLE* pVal);
    [propput, id(34)] HRESULT SnapTolerance([in] DOUBLE newVal);
    [propget, id(35)] HRESULT HighlightVertices([out, retval] tkLayerSelection* pVal);
    [propput, id(35)] HRESULT HighlightVertices([in] tkLayerSelection newVal);
    [propget, id(36)] HRESULT SnapBehavior([out, retval] tkLayerSelection* pVal);
    [propput, id(36)] HRESULT SnapBehavior([in] tkLayerSelection newVal);
    [propget, id(37)] HRESULT EditorState([out, retval] tkEditorState* pVal);
    [id(38)] HRESULT StartEdit([in] LONG LayerHandle, [in] LONG ShapeIndex, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(40)] HRESULT IndicesVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(40)] HRESULT IndicesVisible([in] VARIANT_BOOL newVal);
    [propget, id(41)] HRESULT LengthDisplayMode([out, retval] tkLengthDisplayMode* pVal);
    [propput, id(41)] HRESULT LengthDisplayMode([in] tkLengthDisplayMode newVal);
    [id(44)] HRESULT StartUnboundShape([in] ShpfileType shpType, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(45)] HRESULT VerticesVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(45)] HRESULT VerticesVisible([in] VARIANT_BOOL newVal);
    [propget, id(46)] HRESULT ValidationMode([out, retval] tkEditorValidation* pVal);
    [propput, id(46)] HRESULT ValidationMode([in] tkEditorValidation newVal);
    [id(47)] HRESULT StartOverlay([in] tkEditorOverlay overlayType, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(48)] HRESULT EditorBehavior([out, retval] tkEditorBehavior* pVal);
    [propput, id(48)] HRESULT EditorBehavior([in] tkEditorBehavior newVal);
    [id(49)] HRESULT SaveChanges([out, retval] VARIANT_BOOL* retVal);
    [propget, id(50)] HRESULT HasChanges([out, retval] VARIANT_BOOL* pVal);
    [propget, id(51)] HRESULT IsUsingEllipsoid([out, retval] VARIANT_BOOL* pVal);
    [propget, id(52)] HRESULT Length([out, retval] DOUBLE* pVal);
    [propget, id(53)] HRESULT ShowArea([out, retval] VARIANT_BOOL* pVal);
    [propput, id(53)] HRESULT ShowArea([in] VARIANT_BOOL newVal);
    [propget, id(54)] HRESULT AreaPrecision([out, retval] LONG* pVal);
    [propput, id(54)] HRESULT AreaPrecision([in] LONG newVal);
    [propget, id(55)] HRESULT LengthPrecision([out, retval] LONG* pVal);
    [propput, id(55)] HRESULT LengthPrecision([in] LONG newVal);
    [propget, id(56)] HRESULT AngleFormat([out, retval] tkAngleFormat* pVal);
    [propput, id(56)] HRESULT AngleFormat([in] tkAngleFormat newVal);
    [propget, id(57)] HRESULT AnglePrecision([out, retval] LONG* pVal);
    [propput, id(57)] HRESULT AnglePrecision([in] LONG newVal);
    [propget, id(58)] HRESULT ShowBearing([out, retval] VARIANT_BOOL* pVal);
    [propput, id(58)] HRESULT ShowBearing([in] VARIANT_BOOL newVal);
    [propget, id(59)] HRESULT ShowLength([out, retval] VARIANT_BOOL* pVal);
    [propput, id(59)] HRESULT ShowLength([in] VARIANT_BOOL newVal);
    [id(60)] HRESULT Serialize([out, retval] BSTR* retVal);
    [id(61)] HRESULT Deserialize([in] BSTR state, [out, retval] VARIANT_BOOL* retVal);
    [id(62)] HRESULT AddPoint([in] IPoint *newPoint, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(63)] HRESULT SnapMode([out, retval] tkSnapMode* pVal);
    [propput, id(63)] HRESULT SnapMode([in] tkSnapMode newVal);
};


/****************************  Grid Interface ***********************/
[
    object,
    uuid(18DFB64A-9E72-4CBE-AFD6-A5B7421DD0CB),
    dual,
    nonextensible,
    helpstring("IGrid Interface"),
    pointer_default(unique)
]

interface IGrid : IDispatch {
    [propget, id(1), helpstring("property Header")] HRESULT Header([out, retval] IGridHeader**pVal);
    [propget, id(2), helpstring("property Value")] HRESULT Value([in] long Column, [in] long Row, [out, retval] VARIANT *pVal);
    [propput, id(2), helpstring("property Value")] HRESULT Value([in] long Column, [in] long Row, [in] VARIANT newVal);
    [propget, id(3), helpstring("property InRam")] HRESULT InRam([out, retval] VARIANT_BOOL *pVal);
    [propget, id(4), helpstring("property Maximum")] HRESULT Maximum([out, retval] VARIANT *pVal);
    [propget, id(5), helpstring("property Minimum")] HRESULT Minimum([out, retval] VARIANT *pVal);
    [propget, id(6), helpstring("property DataType")] HRESULT DataType([out, retval] GridDataType *pVal);
    [propget, id(7), helpstring("property Filename")] HRESULT Filename([out, retval] BSTR *pVal);
    [propget, id(8), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(9), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(10), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(10), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(11), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(11), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(12), helpstring("method Open")] HRESULT Open([in] BSTR Filename, [in, defaultvalue(UnknownDataType)] GridDataType DataType, [in, defaultvalue(-1)] VARIANT_BOOL InRam, [in, defaultvalue(UseExtension)] GridFileType FileType, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(13), helpstring("method CreateNew")] HRESULT CreateNew([in] BSTR Filename, [in] IGridHeader * Header, [in] GridDataType DataType, [in] VARIANT InitialValue, [in, defaultvalue(-1)] VARIANT_BOOL InRam, [in, defaultvalue(UseExtension)] GridFileType FileType, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(14), helpstring("method Close")] HRESULT Close([out, retval] VARIANT_BOOL* retval);
    [id(15), helpstring("method Save")] HRESULT Save([in, defaultvalue(NULL)] BSTR Filename, [in, defaultvalue(UseExtension)] GridFileType GridFileType, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(16), helpstring("method Clear")] HRESULT Clear([in] VARIANT ClearValue, [out, retval] VARIANT_BOOL* retval);
    [id(17), helpstring("method ProjToCell")] HRESULT ProjToCell([in] double x, [in] double y, [out] long* Column, [out] long* Row);
    [id(18), helpstring("method CellToProj")] HRESULT CellToProj([in] long Column, [in] long Row, [out] double* x, [out] double* y);
    [propget, id(19), helpstring("property CdlgFilter")] HRESULT CdlgFilter([out, retval] BSTR *pVal);
    [id(20), helpstring("method AssignNewProjection")] HRESULT AssignNewProjection([in] BSTR projection, [out, retval] VARIANT_BOOL* retval);
    [propget, id(21), helpstring("property RasterColorTableColoringScheme")] HRESULT RasterColorTableColoringScheme([out, retval] IGridColorScheme**pVal);
    [id(22), helpstring("property GetRow")] HRESULT GetRow([in] long Row, [in, out] float* Vals, [out, retval] VARIANT_BOOL* retval);
    [id(23), helpstring("property PutRow")] HRESULT PutRow([in] long Row, [in, out] float* Vals, [out, retval] VARIANT_BOOL* retval);

    [id(24), helpstring("property GetFloatWindow")] HRESULT GetFloatWindow([in] long StartRow, [in] long EndRow, [in] long StartCol, [in] long EndCol, [in, out] float* Vals, [out, retval] VARIANT_BOOL* retval);
    [id(25), helpstring("property PutFloatWindow")] HRESULT PutFloatWindow([in] long StartRow, [in] long EndRow, [in] long StartCol, [in] long EndCol, [in, out] float* Vals, [out, retval] VARIANT_BOOL* retval);
    [id(26), helpstring("method SetInvalidValuesToNodata")] HRESULT SetInvalidValuesToNodata([in] double MinThresholdValue, [in] double MaxThresholdValue, [out, retval] VARIANT_BOOL* retval);
    [id(27), helpstring("method Resource")] HRESULT Resource([in] BSTR newSrcPath, [out, retval] VARIANT_BOOL *pVal);

    [propget, id(28), helpstring("property NumBands")] HRESULT NumBands([out, retval]int *retVal);
    [propget, id(29), helpstring("property ActiveBand")] HRESULT ActiveBandIndex([out, retval]int *retVal);
    [id(30), helpstring("method OpenBand")] HRESULT OpenBand([in]int bandIndex, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(31), helpstring("property SourceType")] HRESULT SourceType([out, retval]tkGridSourceType *retVal);
    [propget, id(32), helpstring("property Extents")] HRESULT Extents([out, retval]IExtents** retVal);
    [id(33), helpstring("method OpenAsImage")] HRESULT OpenAsImage([in]IGridColorScheme* scheme,
        [in, defaultvalue(gpmAuto)] tkGridProxyMode proxyMode, [in, defaultvalue(NULL)]ICallback* cBack, [out, retval]IImage** retVal);

    [id(34), helpstring("method RetrieveColorScheme")] HRESULT RetrieveColorScheme([in]tkGridSchemeRetrieval method, [out, retval]IGridColorScheme** retVal);
    [id(35), helpstring("method GenerateColorScheme")] HRESULT GenerateColorScheme([in]tkGridSchemeGeneration method, [in]PredefinedColorScheme colors, [out, retval]IGridColorScheme** retVal);

    [id(36), helpstring("method RemoveImageProxy")] HRESULT RemoveImageProxy([out, retval]VARIANT_BOOL* retVal);
    [id(37), helpstring("method CreateImageProxy")] HRESULT CreateImageProxy([in]IGridColorScheme* colorScheme, [out, retval]IImage** retVal);

    [propget, id(38), helpstring("property PreferedDisplayMode")] HRESULT PreferedDisplayMode([out, retval] tkGridProxyMode *retVal);
    [propput, id(38), helpstring("property PreferedDisplayMode")] HRESULT PreferedDisplayMode([in] tkGridProxyMode newVal);
    //[propget, id(39), helpstring("property CanDisplayWithoutProxy")] HRESULT CanDisplayWithoutProxy([out, retval] tkCanDisplayGridWoProxy *retVal);

    [propget, id(40), helpstring("property HasValidImageProxy")] HRESULT HasValidImageProxy([out, retval] VARIANT_BOOL *retVal);

    [id(41), helpstring("method RetrieveOrGenerateColorScheme")] HRESULT RetrieveOrGenerateColorScheme(
        [in, defaultvalue(gsrAuto)]tkGridSchemeRetrieval retrievalMethod,
        [in, defaultvalue(gsgGradient)]tkGridSchemeGeneration generateMethod,
        [in, defaultvalue(FallLeaves)]PredefinedColorScheme colors,
        [out, retval]IGridColorScheme** retVal);

    [id(42), helpstring("property GetFloatWindow2")] HRESULT GetFloatWindow2([in] long StartRow, [in] long EndRow, [in] long StartCol, [in] long EndCol, [in, out] double* Vals, [out, retval] VARIANT_BOOL* retval);
    [id(43), helpstring("property PutFloatWindow2")] HRESULT PutFloatWindow2([in] long StartRow, [in] long EndRow, [in] long StartCol, [in] long EndCol, [in, out] double* Vals, [out, retval] VARIANT_BOOL* retval);
    [id(44), helpstring("property PutRow")] HRESULT PutRow2([in] long Row, [in, out] double* Vals, [out, retval] VARIANT_BOOL* retval);
    [id(45), helpstring("property GetRow")] HRESULT GetRow2([in] long Row, [in, out] double* Vals, [out, retval] VARIANT_BOOL* retval);
    [propget, id(46)] HRESULT Band([in]long bandIndex, [out, retval]IGdalRasterBand** retVal);
    [propget, id(47)] HRESULT ActiveBand([out, retval] IGdalRasterBand** pVal);
};

/****************************  GridHeader Interface ***********************/
[
    object,
    uuid(E42814D1-6269-41B1-93C2-AA848F00E459),
    dual,
    nonextensible,
    helpstring("IGridHeader Interface"),
    pointer_default(unique)
]
interface IGridHeader : IDispatch {
    [propget, id(1), helpstring("property NumberCols")] HRESULT NumberCols([out, retval] long *pVal);
    [propput, id(1), helpstring("property NumberCols")] HRESULT NumberCols([in] long newVal);
    [propget, id(2), helpstring("property NumberRows")] HRESULT NumberRows([out, retval] long *pVal);
    [propput, id(2), helpstring("property NumberRows")] HRESULT NumberRows([in] long newVal);
    [propget, id(3), helpstring("property NodataValue")] HRESULT NodataValue([out, retval] VARIANT *pVal);
    [propput, id(3), helpstring("property NodataValue")] HRESULT NodataValue([in] VARIANT newVal);
    [propget, id(4), helpstring("property dX")] HRESULT dX([out, retval] double *pVal);
    [propput, id(4), helpstring("property dX")] HRESULT dX([in] double newVal);
    [propget, id(5), helpstring("property dY")] HRESULT dY([out, retval] double *pVal);
    [propput, id(5), helpstring("property dY")] HRESULT dY([in] double newVal);
    [propget, id(6), helpstring("property XllCenter")] HRESULT XllCenter([out, retval] double *pVal);
    [propput, id(6), helpstring("property XllCenter")] HRESULT XllCenter([in] double newVal);
    [propget, id(7), helpstring("property YllCenter")] HRESULT YllCenter([out, retval] double *pVal);
    [propput, id(7), helpstring("property YllCenter")] HRESULT YllCenter([in] double newVal);
    [propget, id(8), helpstring("property Projection")] HRESULT Projection([out, retval] BSTR *pVal);
    [propput, id(8), helpstring("property Projection")] HRESULT Projection([in] BSTR newVal);
    [propget, id(9), helpstring("property Notes")] HRESULT Notes([out, retval] BSTR *pVal);
    [propput, id(9), helpstring("property Notes")] HRESULT Notes([in] BSTR newVal);
    [propget, id(10), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(11), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(12), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(12), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(13), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(13), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    //[propput, id(14), helpstring("property Owner")] HRESULT Owner([in] int* t, [in] int* d, [in] int* s, [in] int* l, [in] int* f);
    [id(15), helpstring("method CopyFrom")] HRESULT CopyFrom([in] IGridHeader* pVal);
    [propget, id(16), helpstring("property ColorTable")] HRESULT ColorTable([out, retval] BSTR *pVal);
    [propput, id(16), helpstring("property ColorTable")] HRESULT ColorTable([in] BSTR newVal);
    [propget, id(17), helpstring("property GeoProjection")] HRESULT GeoProjection([out, retval] IGeoProjection** pVal);
    [propput, id(17), helpstring("property GeoProjection")] HRESULT GeoProjection([in] IGeoProjection* newVal);
};

/****************************  EsriGridManager Interface ***********************/
[
    object,
    uuid(55B3F2DA-EB09-4FA9-B74B-9A1B3E457318),
    dual,
    nonextensible,
    helpstring("IESRIGridManager Interface"),
    pointer_default(unique)
]
interface IESRIGridManager : IDispatch {
    [propget, id(1), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(2), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(3), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(3), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [id(4), helpstring("method CanUseESRIGrids")] HRESULT CanUseESRIGrids([out, retval] VARIANT_BOOL* retval);
    [id(5), helpstring("method DeleteESRIGrids")] HRESULT DeleteESRIGrids([in] BSTR Filename, [out, retval] VARIANT_BOOL* retval);
    [id(6), helpstring("method IsESRIGrid")] HRESULT IsESRIGrid([in] BSTR Filename, [out, retval] VARIANT_BOOL* retval);
};


/****************************  Image Interface ***********************/
[
    object,
    uuid(79C5F83E-FB53-4189-9EC4-4AC25440D825),
    dual,
    nonextensible,
    helpstring("IImage Interface"),
    pointer_default(unique)
]
interface IImage : IDispatch {
    [id(1), helpstring("method Open")] HRESULT Open([in]BSTR ImageFileName, [in, defaultvalue(USE_FILE_EXTENSION)]ImageType FileType, [in, defaultvalue(0)] VARIANT_BOOL InRam, [in, defaultvalue(NULL)]ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(2), helpstring("method Save")] HRESULT Save([in]BSTR ImageFileName, [in, defaultvalue(0)]VARIANT_BOOL WriteWorldFile, [in, defaultvalue(USE_FILE_EXTENSION)]ImageType FileType, [in, defaultvalue(NULL)]ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(3), helpstring("method CreateNew")] HRESULT CreateNew([in]long NewWidth, [in]long NewHeight, [out, retval]VARIANT_BOOL* retval);
    [id(4), helpstring("method Close")] HRESULT Close([out, retval]VARIANT_BOOL* retval);
    [id(5), helpstring("method Clear")] HRESULT Clear([in, defaultvalue(0xffffff)] OLE_COLOR CanvasColor, [in, defaultvalue(NULL)] ICallback* CBack, [out, retval]VARIANT_BOOL* retval);
    [id(6), helpstring("method GetRow")] HRESULT GetRow([in] long Row, [in, out] long* Vals, [out, retval]VARIANT_BOOL* retval);
    [propget, id(7), helpstring("property Width")] HRESULT Width([out, retval] long *pVal);
    [propget, id(8), helpstring("property Height")] HRESULT Height([out, retval] long *pVal);
    [propget, id(9), helpstring("property YllCenter")] HRESULT YllCenter([out, retval] double *pVal);
    [propput, id(9), helpstring("property YllCenter")] HRESULT YllCenter([in] double newVal);
    [propget, id(10), helpstring("property XllCenter")] HRESULT XllCenter([out, retval] double *pVal);
    [propput, id(10), helpstring("property XllCenter")] HRESULT XllCenter([in] double newVal);
    [propget, id(11), helpstring("property dY")] HRESULT dY([out, retval] double *pVal);
    [propput, id(11), helpstring("property dY")] HRESULT dY([in] double newVal);
    [propget, id(12), helpstring("property dX")] HRESULT dX([out, retval] double *pVal);
    [propput, id(12), helpstring("property dX")] HRESULT dX([in] double newVal);
    [propget, id(13), helpstring("property Value")] HRESULT Value([in]long row, [in]long col, [out, retval] int *pVal);
    [propput, id(13), helpstring("property Value")] HRESULT Value([in]long row, [in]long col, [in] int newVal);
    [propget, id(14), helpstring("property IsInRam")] HRESULT IsInRam([out, retval] VARIANT_BOOL *pVal);
    [propget, id(15), helpstring("property TransparencyColor")] HRESULT TransparencyColor([out, retval] OLE_COLOR *pVal);
    [propput, id(15), helpstring("property TransparencyColor")] HRESULT TransparencyColor([in] OLE_COLOR newVal);
    [propget, id(16), helpstring("property UseTransparencyColor")] HRESULT UseTransparencyColor([out, retval] VARIANT_BOOL *pVal);
    [propput, id(16), helpstring("property UseTransparencyColor")] HRESULT UseTransparencyColor([in] VARIANT_BOOL newVal);
    [propget, id(17), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(18), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in]long ErrorCode, [out, retval] BSTR* pVal);
    [propget, id(19), helpstring("property CdlgFilter")] HRESULT CdlgFilter([out, retval] BSTR *pVal);
    [propget, id(20), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(20), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(21), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(21), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [propget, id(22), helpstring("property FileHandle"), hidden] HRESULT FileHandle([out, retval] long *pVal);
    [propget, id(23), helpstring("property ImageType")] HRESULT ImageType([out, retval] ImageType *pVal);
    [propget, id(24), helpstring("property Picture")] HRESULT Picture([out, retval] IPictureDisp**pVal);
    [propputref, id(24), helpstring("property Picture")] HRESULT Picture([in] IPictureDisp* newVal);
    [propget, id(25), helpstring("property Filename")] HRESULT Filename([out, retval] BSTR *pVal);
    [id(26), helpstring("method GetImageBitsDC")] HRESULT GetImageBitsDC([in] long hDC, [out, retval] VARIANT_BOOL* retval);
    [id(27), helpstring("method SetImageBitsDC")] HRESULT SetImageBitsDC([in] long hDC, [out, retval] VARIANT_BOOL* retval);
    [id(28), helpstring("method SetVisibleExtents"), hidden] HRESULT SetVisibleExtents([in] double newMinX, [in] double newMinY, [in] double newMaxX, [in] double newMaxY, [in] long newPixelsInView, [in] float transPercent);
    [id(29), helpstring("method SetProjection")] HRESULT SetProjection([in] BSTR Proj4, [out, retval] VARIANT_BOOL* retval);
    [id(30), helpstring("method GetProjection")] HRESULT GetProjection([out, retval] BSTR* Proj4);
    [propget, id(31), helpstring("method OriginalWidth")] HRESULT OriginalWidth([out, retval]LONG* OriginalWidth);
    [propget, id(32), helpstring("method OriginalHeight")] HRESULT OriginalHeight([out, retval]LONG* OriginalHeight);
    [id(33), helpstring("method Resource")] HRESULT Resource([in] BSTR newImgPath, [out, retval] VARIANT_BOOL *pVal);
    [id(34), helpstring("method _pushSchemetkRaster")] HRESULT _pushSchemetkRaster([in] IGridColorScheme* cScheme, [out, retval] VARIANT_BOOL* retval);

#ifdef OLD_API	
    [id(35), helpstring("method GetOriginalXllCenter"), hidden] HRESULT GetOriginalXllCenter([out, retval] double *pVal);
    [id(36), helpstring("method GetOriginalYllCenter"), hidden] HRESULT GetOriginalYllCenter([out, retval] double *pVal);
    [id(37), helpstring("method GetOriginal_dX"), hidden] HRESULT GetOriginal_dX([out, retval] double *pVal);
    [id(38), helpstring("method GetOriginal_dY"), hidden] HRESULT GetOriginal_dY([out, retval] double *pVal);
    [id(39), helpstring("method GetOriginalHeight"), hidden] HRESULT GetOriginalHeight([out, retval] long *pVal);
    [id(40), helpstring("method GetOriginalWidth"), hidden] HRESULT GetOriginalWidth([out, retval] long *pVal);
#endif

    [propget, id(41), helpstring("property AllowHillshade")] HRESULT AllowHillshade([out, retval] VARIANT_BOOL *pVal);
    [propput, id(41), helpstring("property AllowHillshade")] HRESULT AllowHillshade([in] VARIANT_BOOL newValue);
    [propget, id(42), helpstring("property SetToGrey")] HRESULT SetToGrey([out, retval] VARIANT_BOOL *pVal);
    [propput, id(42), helpstring("property SetToGrey")] HRESULT SetToGrey([in] VARIANT_BOOL newValue);
    [propget, id(43), helpstring("property UseHistogram")] HRESULT UseHistogram([out, retval] VARIANT_BOOL *pVal);
    [propput, id(43), helpstring("property UseHistogram")] HRESULT UseHistogram([in] VARIANT_BOOL newValue);
    [propget, id(44), helpstring("property HasColorTable")] HRESULT HasColorTable([out, retval] VARIANT_BOOL *pVal);
    [propget, id(45), helpstring("property PaletteInterpretation")] HRESULT PaletteInterpretation([out, retval] BSTR *pVal);
    [propget, id(46), helpstring("property BufferSize")] HRESULT BufferSize([out, retval] int *pVal);
    [propput, id(46), helpstring("property BufferSize")] HRESULT BufferSize([in] int newValue);
    [propget, id(47), helpstring("property NoBands")] HRESULT NoBands([out, retval] int *pVal);
    [propget, id(48), helpstring("property ImageColorScheme")] HRESULT ImageColorScheme([out, retval] PredefinedColorScheme *pVal);
    [propput, id(48), helpstring("property ImageColorScheme")] HRESULT ImageColorScheme([in] PredefinedColorScheme newValue);
    [propget, id(49), helpstring("property DrawingMethod")] HRESULT DrawingMethod([out, retval] int* retVal);
    [propput, id(49), helpstring("property DrawingMethod")] HRESULT DrawingMethod([in] int newVal);
    [id(50), helpstring("Deprecated method BuildOverviews, use CGdalUtils::GdalBuildOverviews instead")] HRESULT BuildOverviews([in]tkGDALResamplingMethod ResamplingMethod, [in]int NumOverviews, [in]SAFEARRAY(int) OverviewList, [out, retval]VARIANT_BOOL* retval);
    [propget, id(51), helpstring("property ClearGDALCache")] HRESULT ClearGDALCache([out, retval] VARIANT_BOOL* retVal);
    [propput, id(51), helpstring("property ClearGDALCache")] HRESULT ClearGDALCache([in] VARIANT_BOOL newVal);
    [propget, id(52), helpstring("property TransparencyPercent")] HRESULT TransparencyPercent([out, retval] double* retVal);
    [propput, id(52), helpstring("property TransparencyPercent")] HRESULT TransparencyPercent([in] double newVal);
    [propget, id(53), helpstring("property TransparencyColor2")] HRESULT TransparencyColor2([out, retval] OLE_COLOR* retVal);
    [propput, id(53), helpstring("property TransparencyColor2")] HRESULT TransparencyColor2([in] OLE_COLOR newVal);
    [propget, id(54), helpstring("property DownsamplingMode")] HRESULT DownsamplingMode([out, retval] tkInterpolationMode* retVal);
    [propput, id(54), helpstring("property DownsamplingMode")] HRESULT DownsamplingMode([in] tkInterpolationMode newVal);
    [propget, id(55), helpstring("property UpsamplingMode")] HRESULT UpsamplingMode([out, retval] tkInterpolationMode* retVal);
    [propput, id(55), helpstring("property UpsamplingMode")] HRESULT UpsamplingMode([in] tkInterpolationMode newVal);
    [propget, id(56), helpstring("property Labels")] HRESULT Labels([out, retval] ILabels** pVal);
    [propput, id(56), helpstring("property Labels")] HRESULT Labels([in] ILabels* newVal);
    [propget, id(57), helpstring("property Extents")] HRESULT Extents([out, retval] IExtents** pVal);
    [id(58), helpstring("method ProjectionToImage")] HRESULT ProjectionToImage([in]double ProjX, [in]double ProjY, [out]long* Column, [out]long* Row);
    [id(59), helpstring("method ImageToProjection")] HRESULT ImageToProjection([in]long Column, [in]long Row, [out]double* ProjX, [out]double* ProjY);
    [id(60), helpstring("method ProjectionToBuffer")] HRESULT ProjectionToBuffer([in]double ProjX, [in]double ProjY, [out]long* BufferX, [out]long* BufferY);
    [id(61), helpstring("method BufferToProjection")] HRESULT BufferToProjection([in]long BufferX, [in]long BufferY, [out]double* ProjX, [out] double* ProjY);
    [propget, id(62), helpstring("property CanUseGrouping")] HRESULT CanUseGrouping([out, retval] VARIANT_BOOL* pVal);
    [propput, id(62), helpstring("property CanUseGrouping")] HRESULT CanUseGrouping([in] VARIANT_BOOL newVal);
    [propget, id(63), helpstring("property OriginalXllCenter")] HRESULT OriginalXllCenter([out, retval] double* pVal);
    [propput, id(63), helpstring("property OriginalXllCenter")] HRESULT OriginalXllCenter([in] double newVal);
    [propget, id(64), helpstring("property OriginalYllCenter")] HRESULT OriginalYllCenter([out, retval] double* pVal);
    [propput, id(64), helpstring("property OriginalYllCenter")] HRESULT OriginalYllCenter([in] double newVal);
    [propget, id(65), helpstring("property OriginalDX")] HRESULT OriginalDX([out, retval] double* pVal);
    [propput, id(65), helpstring("property OriginalDX")] HRESULT OriginalDX([in] double newVal);
    [propget, id(66), helpstring("property OriginalDY")] HRESULT OriginalDY([out, retval] double* pVal);
    [propput, id(66), helpstring("property OriginalDY")] HRESULT OriginalDY([in] double newVal);
    [id(67), helpstring("method GetUniqueColors")] HRESULT GetUniqueColors([in]double MaxBufferSizeMB, [out] VARIANT* Colors, [out]VARIANT* Frequencies, [out, retval]LONG* Count);
    [id(68), helpstring("method SetNoDataValue")] HRESULT SetNoDataValue(double Value, VARIANT_BOOL* Result);
    [propget, id(69), helpstring("property NumOverviews")] HRESULT NumOverviews([out, retval] int* retval);
    [id(70), helpstring("method LoadBuffer")] HRESULT LoadBuffer([in, defaultvalue(50.0)]double maxBufferSize, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(71), helpstring("property SourceType")] HRESULT SourceType([out, retval] tkImageSourceType* pVal);
    [id(72), helpstring("method Serialize")] HRESULT Serialize([in]VARIANT_BOOL SerializePixels, [out, retval]BSTR* retVal);
    [id(73), helpstring("method Deserialize")] HRESULT Deserialize([in]BSTR newVal);
    [propget, id(74), helpstring("property Warped")] HRESULT Warped([out, retval] VARIANT_BOOL* retVal);
    [propget, id(75), helpstring("property SourceGridName")] HRESULT SourceGridName([out, retval]BSTR *retVal);
    [propget, id(76), helpstring("property IsGridProxy")] HRESULT IsGridProxy([out, retval]VARIANT_BOOL *retVal);
    [propget, id(77), helpstring("property CustomColorScheme")] HRESULT CustomColorScheme([out, retval] IGridColorScheme** pVal);
    [propput, id(77), helpstring("property CustomColorScheme")] HRESULT CustomColorScheme([in] IGridColorScheme* newVal);
    [propget, id(79), helpstring("property AllowGridRendering")] HRESULT AllowGridRendering([out, retval] tkGridRendering* pVal);
    [propput, id(79), helpstring("property AllowGridRendering")] HRESULT AllowGridRendering([in] tkGridRendering newVal);
    [propget, id(80), helpstring("property GridRendering")] HRESULT GridRendering([out, retval] VARIANT_BOOL* pVal);
    [id(81), helpstring("method SetTransparentColor")] HRESULT SetTransparentColor([in]OLE_COLOR color);
    [propget, id(82), helpstring("property IsRgb")] HRESULT IsRgb([out, retval] VARIANT_BOOL* pVal);
    [id(83), helpstring("method OpenAsGrid")] HRESULT OpenAsGrid([out, retval] IGrid** retVal);
    [propget, id(84), helpstring("property SourceFilename")] HRESULT SourceFilename([out, retval]BSTR *retVal);
    [propget, id(85), helpstring("property SourceGridBandIndex")] HRESULT SourceGridBandIndex([out, retval] int* pVal);
    [propput, id(85), helpstring("property SourceGridBandIndex")] HRESULT SourceGridBandIndex([in] int newVal);
    [propget, id(86), helpstring("property GridProxyColorScheme")] HRESULT GridProxyColorScheme([out, retval] IGridColorScheme** retVal);
    [propget, id(87)] HRESULT GeoProjection([out, retval] IGeoProjection** pVal);
    [propput, id(87)] HRESULT GeoProjection([in] IGeoProjection* newVal);
    [propget, id(88)] HRESULT IsEmpty([out, retval] VARIANT_BOOL* pVal);
    [propget, id(89)] HRESULT Band([in]long bandIndex, [out, retval]IGdalRasterBand** retVal);
    [propget, id(90)] HRESULT PaletteInterpretation2([out, retval] tkPaletteInterpretation* pVal);
    [propget, id(91)] HRESULT ActiveBand([out, retval] IGdalRasterBand** pVal);
    [propget, id(92)] HRESULT Brightness([out, retval] FLOAT* pVal);
    [propput, id(92)] HRESULT Brightness([in] FLOAT newVal);
    [propget, id(93)] HRESULT Contrast([out, retval] FLOAT* pVal);
    [propput, id(93)] HRESULT Contrast([in] FLOAT newVal);
    [propget, id(94)] HRESULT Saturation([out, retval] FLOAT* pVal);
    [propput, id(94)] HRESULT Saturation([in] FLOAT newVal);
    [propget, id(95)] HRESULT Hue([out, retval] FLOAT* pVal);
    [propput, id(95)] HRESULT Hue([in] FLOAT newVal);
    [propget, id(96)] HRESULT Gamma([out, retval] FLOAT* pVal);
    [propput, id(96)] HRESULT Gamma([in] FLOAT newVal);
    [propget, id(97)] HRESULT ColorizeIntensity([out, retval] FLOAT* pVal);
    [propput, id(97)] HRESULT ColorizeIntensity([in] FLOAT newVal);
    [propget, id(98)] HRESULT ColorizeColor([out, retval] OLE_COLOR* pVal);
    [propput, id(98)] HRESULT ColorizeColor([in] OLE_COLOR newVal);
    [id(99)] HRESULT ClearOverviews([out, retval] VARIANT_BOOL* retVal);
    [propget, id(100)] HRESULT GdalDriver([out, retval] IGdalDriver** pVal);
    [propget, id(101)] HRESULT RedBandIndex([out, retval] LONG* pVal);
    [propput, id(101)] HRESULT RedBandIndex([in] LONG newVal);
    [propget, id(102)] HRESULT GreenBandIndex([out, retval] LONG* pVal);
    [propput, id(102)] HRESULT GreenBandIndex([in] LONG newVal);
    [propget, id(103)] HRESULT BlueBandIndex([out, retval] LONG* pVal);
    [propput, id(103)] HRESULT BlueBandIndex([in] LONG newVal);
    [propget, id(104)] HRESULT UseRgbBandMapping([out, retval] VARIANT_BOOL* pVal);
    [propput, id(104)] HRESULT UseRgbBandMapping([in] VARIANT_BOOL newVal);
    [propget, id(105)] HRESULT ForceSingleBandRendering([out, retval] VARIANT_BOOL* pVal);
    [propput, id(105)] HRESULT ForceSingleBandRendering([in] VARIANT_BOOL newVal);
    [propget, id(106)] HRESULT AlphaBandIndex([out, retval] LONG* pVal);
    [propput, id(106)] HRESULT AlphaBandIndex([in] LONG newVal);
    [propget, id(107)] HRESULT UseActiveBandAsAlpha([out, retval] VARIANT_BOOL* pVal);
    [propput, id(107)] HRESULT UseActiveBandAsAlpha([in] VARIANT_BOOL newVal);
    [propget, id(108)] HRESULT BandMinimum([in] LONG bandIndex, [out, retval] DOUBLE* pVal);
    [propget, id(109)] HRESULT BandMaximum([in] LONG bandIndex, [out, retval] DOUBLE* pVal);
    [id(110)] HRESULT SetBandMinMax([in] LONG bandIndex, [in] DOUBLE min, [in]DOUBLE max, [out, retval]VARIANT_BOOL* retVal);
    [id(111)] HRESULT SetDefaultMinMax([in] LONG bandIndex, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(112)] HRESULT ReverseGreyscale([out, retval] VARIANT_BOOL* pVal);
    [propput, id(112)] HRESULT ReverseGreyscale([in] VARIANT_BOOL newVal);
    [propget, id(113)] HRESULT IgnoreColorTable([out, retval] VARIANT_BOOL* pVal);
    [propput, id(113)] HRESULT IgnoreColorTable([in] VARIANT_BOOL newVal);
    [propget, id(114)] HRESULT RenderingMode([out, retval] tkRasterRendering* pVal);
    [propget, id(115)] HRESULT ValueWithAlpha([in] LONG row, [in] LONG col, [out, retval] OLE_COLOR* pVal);
    [propput, id(115)] HRESULT ValueWithAlpha([in] LONG row, [in] LONG col, [in] OLE_COLOR newVal);
    [propget, id(116)] HRESULT BufferOffsetX([out, retval] LONG* pVal);
    [propget, id(117)] HRESULT BufferOffsetY([out, retval] LONG* pVal);
    [propget, id(118)] HRESULT ActiveColorScheme([out, retval] IGridColorScheme** pVal);
};

/****************************  Shapefile Interface ***********************/
[
    object,
    uuid(5DC72405-C39C-4755-8CFC-9876A89225BC),
    dual,
    nonextensible,
    helpstring("IShapefile Interface"),
    pointer_default(unique)
]
interface IShapefile : IDispatch {
    [propget, id(1), helpstring("property NumShapes")] HRESULT NumShapes([out, retval] long *pVal);
    [propget, id(2), helpstring("property NumFields")] HRESULT NumFields([out, retval] long *pVal);
    [propget, id(3), helpstring("property Extents")] HRESULT Extents([out, retval] IExtents**pVal);
    [propget, id(4), helpstring("property ShapefileType")] HRESULT ShapefileType([out, retval] ShpfileType *pVal);
    [propget, id(5), helpstring("property Shape")] HRESULT Shape([in]long ShapeIndex, [out, retval] IShape**pVal);
    [propget, id(6), helpstring("property EditingShapes")] HRESULT EditingShapes([out, retval] VARIANT_BOOL *pVal);
    [propget, id(7), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(8), helpstring("property CdlgFilter")] HRESULT CdlgFilter([out, retval] BSTR *pVal);
    [propget, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(10), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(10), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(11), helpstring("method Open")] HRESULT Open([in] BSTR ShapefileName, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval]VARIANT_BOOL* retval);
    [id(12), helpstring("method CreateNew")] HRESULT CreateNew([in] BSTR ShapefileName, [in] ShpfileType ShapefileType, [out, retval] VARIANT_BOOL* retval);
    [id(13), helpstring("method SaveAs")] HRESULT SaveAs([in] BSTR ShapefileName, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(14), helpstring("method Close")] HRESULT Close([out, retval] VARIANT_BOOL* retval);
    [id(15), helpstring("method EditClear")] HRESULT EditClear([out, retval] VARIANT_BOOL* retval);
    [id(16), helpstring("method EditInsertShape")] HRESULT EditInsertShape([in]IShape* Shape, [in, out] long* ShapeIndex, [out, retval] VARIANT_BOOL* retval);
    [id(17), helpstring("method EditDeleteShape")] HRESULT EditDeleteShape([in]long ShapeIndex, [out, retval] VARIANT_BOOL* retval);
    midl_pragma warning(disable:2402)
        // function effectively requires the Result parameter (to capture the results);
        // it was made optional only because it follows other optional parameters, and
        // cannot reasonably be changed without breaking the interface. (MWGIS-185)
        // this pragma disables the warning only for this (and similar) functions.
        [id(18), helpstring("method SelectShapes")] HRESULT SelectShapes([in] IExtents* BoundBox, [in, defaultvalue(0.0)]double Tolerance, [in, defaultvalue(INTERSECTION)] SelectMode SelectMode, [in, out, optional] VARIANT* Result, [out, retval] VARIANT_BOOL* retval);
    midl_pragma warning(enable:2402)
        [id(19), helpstring("method StartEditingShapes")] HRESULT StartEditingShapes([in, defaultvalue(-1)] VARIANT_BOOL StartEditTable, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(20), helpstring("method StopEditingShapes")] HRESULT StopEditingShapes([in, defaultvalue(-1)] VARIANT_BOOL ApplyChanges, [in, defaultvalue(-1)]VARIANT_BOOL StopEditTable, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(22), helpstring("method EditInsertField")] HRESULT EditInsertField([in] IField* NewField, [in, out]long* FieldIndex, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(23), helpstring("method EditDeleteField")] HRESULT EditDeleteField([in] long FieldIndex, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(24), helpstring("method EditCellValue")] HRESULT EditCellValue([in] long FieldIndex, [in] long ShapeIndex, [in] VARIANT NewVal, [out, retval] VARIANT_BOOL* retval);
    [id(25), helpstring("method StartEditingTable")] HRESULT StartEditingTable([in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(26), helpstring("method StopEditingTable")] HRESULT StopEditingTable([in, defaultvalue(-1)] VARIANT_BOOL ApplyChanges, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [propget, id(27), helpstring("property Field")] HRESULT Field([in] long FieldIndex, [out, retval] IField**pVal);
    [propget, id(28), helpstring("property CellValue")] HRESULT CellValue([in] long FieldIndex, [in] long ShapeIndex, [out, retval] VARIANT *pVal);
    [propget, id(29), helpstring("property EditingTable")] HRESULT EditingTable([out, retval] VARIANT_BOOL *pVal);
    [propget, id(21), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(30), helpstring("property FileHandle"), hidden] HRESULT FileHandle([out, retval] long* pVal);
    [propget, id(31), helpstring("property Filename")] HRESULT Filename([out, retval] BSTR *pVal);
    [id(32), helpstring("method QuickPoint")] HRESULT QuickPoint([in] long ShapeIndex, [in] long PointIndex, [out, retval] IPoint ** retval);
    [id(33), helpstring("method QuickExtents")] HRESULT QuickExtents([in] long ShapeIndex, [out, retval] IExtents ** retval);
    [id(34), helpstring("method QuickPoints")] HRESULT QuickPoints([in] long ShapeIndex, [in, out] long* numPoints, [out, retval] SAFEARRAY(double)* retval);
    [id(35), helpstring("method PointInShape")] HRESULT PointInShape([in] LONG ShapeIndex, [in] DOUBLE x, [in] DOUBLE y, [out, retval] VARIANT_BOOL* retval);
    [id(36), helpstring("method PointInShapefile")] HRESULT PointInShapefile([in] DOUBLE x, [in] DOUBLE y, [out, retval] LONG* ShapeIndex);
    [id(37), helpstring("method BeginPointInShapefile")] HRESULT BeginPointInShapefile([out, retval] VARIANT_BOOL* retval);
    [id(38), helpstring("method EndPointInShapefile")] HRESULT EndPointInShapefile(void);
    [propget, id(39), helpstring("property Projection")] HRESULT Projection([out, retval] BSTR *pVal);
    [propput, id(39), helpstring("property Projection")] HRESULT Projection([in] BSTR proj4String);
    [propget, id(40), helpstring("property FieldByName")] HRESULT FieldByName([in] BSTR FieldName, [out, retval] IField**pVal);
    [propget, id(41), helpstring("property NumPoints")] HRESULT NumPoints([in] long Shapeindex, [out, retval] long *pVal);
    [id(42), helpstring("method CreateNewWithShapeID")] HRESULT CreateNewWithShapeID([in] BSTR ShapefileName, [in] ShpfileType ShapefileType, [out, retval] VARIANT_BOOL* retval);
    [propget, id(43), helpstring("property UseSpatialIndex")] HRESULT UseSpatialIndex([out, retval]  VARIANT_BOOL *pVal);
    [propput, id(43), helpstring("property UseSpatialIndex")] HRESULT UseSpatialIndex([in] VARIANT_BOOL pVal);
    [id(44), helpstring("method CreateSpatialIndex")] HRESULT CreateSpatialIndex([in] BSTR ShapefileName, [out, retval] VARIANT_BOOL* retval);
    [propget, id(45), helpstring("property HasSpatialIndex")] HRESULT HasSpatialIndex([out, retval]  VARIANT_BOOL *pVal);
    [propput, id(45), helpstring("property HasSpatialIndex")] HRESULT HasSpatialIndex([in] VARIANT_BOOL);
    [id(46), helpstring("method Resource")] HRESULT Resource([in] BSTR newShpPath, [out, retval] VARIANT_BOOL *pVal);
    [propget, id(47), helpstring("property CacheExtents")] HRESULT CacheExtents([out, retval] VARIANT_BOOL *pVal);
    [propput, id(47), helpstring("property CacheExtents")] HRESULT CacheExtents([in] VARIANT_BOOL newVal);
    [id(48), helpstring("method RefreshExtents")] HRESULT RefreshExtents([out, retval] VARIANT_BOOL *pVal);
    [id(49), helpstring("method RefreshShapeExtents")] HRESULT RefreshShapeExtents([in] LONG ShapeId, [out, retval] VARIANT_BOOL* pVal);
    //[id(50),helpstring("method QuickQueryInEditMode")] HRESULT QuickQueryInEditMode([in] IExtents *BoundBox, [in, out] int** Result,[in, out] int* ResultCount);
    [propget, id(51), helpstring("property UseQTree In Edit Mode (default true)")] HRESULT UseQTree([out, retval] VARIANT_BOOL *pVal);
    [propput, id(51), helpstring("property UseQTree In Edit Mode (default true)")] HRESULT UseQTree([in, defaultvalue(-1)] VARIANT_BOOL pVal);
    [id(52), helpstring("method Save")] HRESULT Save([in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(53), helpstring("method IsSpatialIndexValid")] HRESULT IsSpatialIndexValid([out, retval] VARIANT_BOOL* pVal);
    [propput, id(54), helpstring("property SpatialIndexMaxAreaPercent")] HRESULT SpatialIndexMaxAreaPercent([in] DOUBLE newVal);
    [propget, id(54), helpstring("property SpatialIndexMaxAreaPercent")] HRESULT SpatialIndexMaxAreaPercent([out, retval] DOUBLE* pVal);
    [propget, id(55), helpstring("property CanUseSpatialIndex")] HRESULT CanUseSpatialIndex([in] IExtents* pArea, [out, retval] VARIANT_BOOL* pVal);
    [id(56), helpstring("method GetIntersection")] HRESULT GetIntersection([in]VARIANT_BOOL SelectedOnlyOfThis, [in]IShapefile* sf, [in]VARIANT_BOOL SelectedOnly, [in] ShpfileType fileType, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IShapefile** retval);
    [id(57), helpstring("method SelectByShapefile")] HRESULT SelectByShapefile([in]IShapefile* sf, [in]tkSpatialRelation Relation, [in]VARIANT_BOOL SelectedOnly, [in, out] VARIANT *Result, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    [propget, id(58), helpstring("property NumSelected")] HRESULT NumSelected([out, retval] long* pVal);
    [propget, id(59), helpstring("property ShapeSelected")] HRESULT ShapeSelected([in]long ShapeIndex, [out, retval] VARIANT_BOOL* pVal);
    [propput, id(59), helpstring("property ShapeSelected")] HRESULT ShapeSelected([in]long ShapeIndex, [in] VARIANT_BOOL newVal);
    [propget, id(60), helpstring("property SelectionDrawingOptions")] HRESULT SelectionDrawingOptions([out, retval]IShapeDrawingOptions** pVal);
    [propput, id(60), helpstring("property SelectionDrawingOptions")] HRESULT SelectionDrawingOptions([in]IShapeDrawingOptions* newVal);
    [id(62), helpstring("method SelectAll")] HRESULT SelectAll();
    [id(63), helpstring("method SelectNone")] HRESULT SelectNone();
    [id(64), helpstring("method InvertSelection")] HRESULT InvertSelection();
    [id(65), helpstring("method Dissolve")] HRESULT Dissolve([in]long FieldIndex, [in] VARIANT_BOOL SelectedOnly, [out, retval]IShapefile** sf);
    [propget, id(66), helpstring("property Labels")] HRESULT Labels([out, retval] ILabels** pVal);
    [propput, id(66), helpstring("property Labels")] HRESULT Labels([in] ILabels* newVal);
    [id(67), helpstring("method GenerateLabels")] HRESULT GenerateLabels([in]long FieldIndex, [in]tkLabelPositioning Method, [in, defaultvalue(0)]VARIANT_BOOL LargestPartOnly, [in, defaultvalue(-1)]long OffsetXFieldIndex, [in, defaultvalue(-1)]long OffsetYFieldIndex, [out, retval] long* count);
    [id(68), helpstring("method Clone")] HRESULT Clone([out, retval]IShapefile** retVal);
    [propget, id(69), helpstring("property DefaultDrawingOptions")] HRESULT DefaultDrawingOptions([out, retval]IShapeDrawingOptions** pVal);
    [propput, id(69), helpstring("property DefaultDrawingOptions")] HRESULT DefaultDrawingOptions([in]IShapeDrawingOptions* newVal);
    [propget, id(70), helpstring("property Categories")] HRESULT Categories([out, retval] IShapefileCategories** pVal);
    [propput, id(70), helpstring("property Categories")] HRESULT Categories([in] IShapefileCategories* newVal);
    [propget, id(71), helpstring("property Charts")] HRESULT Charts([out, retval] ICharts** pVal);
    [propput, id(71), helpstring("property Charts")] HRESULT Charts([in] ICharts* newVal);
    [propget, id(72), helpstring("property ShapeCategory")] HRESULT ShapeCategory([in] long ShapeIndex, [out, retval] long* pVal);
    [propput, id(72), helpstring("property ShapeCategory")] HRESULT ShapeCategory([in] long ShapeIndex, [in] long newVal);
    [propget, id(73), helpstring("property Table")] HRESULT Table([out, retval] ITable** retVal);
    [propget, id(74), helpstring("property VisibilityExpression")] HRESULT VisibilityExpression([out, retval] BSTR* pVal);
    [propput, id(74), helpstring("property VisibilityExpression")] HRESULT VisibilityExpression([in] BSTR newVal);
    [propget, id(75), helpstring("property FastMode")] HRESULT FastMode([out, retval] VARIANT_BOOL* pVal);
    [propput, id(75), helpstring("property FastMode")] HRESULT FastMode([in] VARIANT_BOOL newVal);
    [propget, id(76), helpstring("property MinDrawingSize")] HRESULT MinDrawingSize([out, retval] LONG* pVal);
    [propput, id(76), helpstring("property MinDrawingSize")] HRESULT MinDrawingSize([in] LONG newVal);
    [propget, id(77), helpstring("property SourceType")] HRESULT SourceType([out, retval] tkShapefileSourceType* pVal);
    [id(78), helpstring("method BufferByDistance")] HRESULT BufferByDistance([in]double Distance, [in]LONG nSegments, [in]VARIANT_BOOL SelectedOnly, [in]VARIANT_BOOL MergeResults, [out, retval]IShapefile** sf);
    [propget, id(79), helpstring("property GeometryEngine")] HRESULT GeometryEngine([out, retval] tkGeometryEngine* pVal);
    [propput, id(79), helpstring("property GeometryEngine")] HRESULT GeometryEngine([in] tkGeometryEngine newVal);
    [id(80), helpstring("method Difference")] HRESULT Difference([in]VARIANT_BOOL SelectedOnlySubject, [in]IShapefile* sfOverlay, [in]VARIANT_BOOL SelectedOnlyOverlay, [out, retval]IShapefile** retval);
    [id(81), helpstring("method Clip")] HRESULT Clip([in]VARIANT_BOOL SelectedOnlySubject, [in]IShapefile* sfOverlay, [in]VARIANT_BOOL SelectedOnlyOverlay, [out, retval]IShapefile** retval);
    [id(82), helpstring("method SymmDifference")] HRESULT SymmDifference([in]VARIANT_BOOL SelectedOnlySubject, [in]IShapefile* sfOverlay, [in]VARIANT_BOOL SelectedOnlyOverlay, [out, retval]IShapefile** retval);
    [id(83), helpstring("method Union")] HRESULT Union([in]VARIANT_BOOL SelectedOnlySubject, [in]IShapefile* sfOverlay, [in]VARIANT_BOOL SelectedOnlyOverlay, [out, retval]IShapefile** retval);
    [id(84), helpstring("method ExplodeShapes")] HRESULT ExplodeShapes([in]VARIANT_BOOL SelectedOnly, [out, retval]IShapefile** retval);
    [id(85), helpstring("method AggregateShapes")] HRESULT AggregateShapes([in]VARIANT_BOOL SelectedOnly, [in, defaultvalue(-1)]LONG FieldIndex, [out, retval]IShapefile** retval);
    [id(86), helpstring("method ExportSelection")] HRESULT ExportSelection([out, retval]IShapefile** retval);
    [id(87), helpstring("method Sort")] HRESULT Sort([in]LONG FieldIndex, [in]VARIANT_BOOL Ascending, [out, retval]IShapefile** retval);
    [id(88), helpstring("method Merge")] HRESULT Merge([in]VARIANT_BOOL SelectedOnlyThis, [in]IShapefile* sf, [in]VARIANT_BOOL SelectedOnly, [out, retval]IShapefile** retval);
    [propget, id(89), helpstring("property SelectionColor")] HRESULT SelectionColor([out, retval] OLE_COLOR* retval);
    [propput, id(89), helpstring("property SelectionColor")] HRESULT SelectionColor([in] OLE_COLOR newVal);
    [propget, id(90), helpstring("property SelectionAppearance")] HRESULT SelectionAppearance([out, retval] tkSelectionAppearance* retval);
    [propput, id(90), helpstring("property SelectionAppearance")] HRESULT SelectionAppearance([in] tkSelectionAppearance newVal);
    [propget, id(91), helpstring("property CollisionMode")] HRESULT CollisionMode([out, retval] tkCollisionMode* retval);
    [propput, id(91), helpstring("property CollisionMode")] HRESULT CollisionMode([in] tkCollisionMode newVal);
    [propget, id(92), helpstring("property SelectionTransparency")] HRESULT SelectionTransparency([out, retval] BYTE* retval);
    [propput, id(92), helpstring("property SelectionTransparency")] HRESULT SelectionTransparency([in] BYTE newVal);
    [propput, id(93), helpstring("property StopExecution")] HRESULT StopExecution([in] IStopExecution* stopper);
    [id(94), helpstring("property Serialize")] HRESULT Serialize([in]VARIANT_BOOL SaveSelection, [out, retval]BSTR* retVal);
    [id(95), helpstring("property Deserialize")] HRESULT Deserialize([in]VARIANT_BOOL LoadSelection, [in]BSTR newVal);
    [propget, id(96), helpstring("property GeoProjection")] HRESULT GeoProjection([out, retval] IGeoProjection** retVal);
    [propput, id(96), helpstring("property GeoProjection")] HRESULT GeoProjection([in] IGeoProjection* pVal);
    [id(97), helpstring("method Reproject")] HRESULT Reproject([in] IGeoProjection* newProjection, [in, out]LONG* reprojectedCount, [out, retval] IShapefile** retVal);
    [id(98), helpstring("method ReprojectInPlace")] HRESULT ReprojectInPlace([in] IGeoProjection* newProjection, [in, out]LONG* reprojectedCount, [out, retval] VARIANT_BOOL* retVal);
    [id(99), helpstring("method SimplifyLines")] HRESULT SimplifyLines([in] DOUBLE Tolerance, [in]VARIANT_BOOL SelectedOnly, [out, retval] IShapefile** retVal);
    [id(100), helpstring("method FixUpShapes")] HRESULT FixUpShapes([out]IShapefile** retVal, [out, retval]VARIANT_BOOL* fixed);
    [id(101), helpstring("method EditAddShape")] HRESULT EditAddShape([in]IShape* shape, [out, retval]long* shapeIndex);
    [id(102), helpstring("method EditAddField")] HRESULT EditAddField([in]BSTR name, [in]FieldType type, [in]int precision,
        [in]int width, [out, retval]long* fieldIndex);
    [id(103), helpstring("method GetRelatedShapes")] HRESULT GetRelatedShapes([in] long referenceIndex, [in] tkSpatialRelation relation, [in, out] VARIANT* resultArray, [out, retval] VARIANT_BOOL* retval);
    [id(104), helpstring("method GetRelatedShapes2")] HRESULT GetRelatedShapes2([in] IShape* referenceShape, [in] tkSpatialRelation relation, [in, out] VARIANT* resultArray, [out, retval] VARIANT_BOOL* retval);
    [propget, id(105)] HRESULT Identifiable([out, retval] VARIANT_BOOL* retVal);
    [propput, id(105)] HRESULT Identifiable([in] VARIANT_BOOL newVal);
    [id(106), helpstring("method Segmentize")] HRESULT Segmentize([in, defaultvalue(0)] double metersTolerance, [out, retval] IShapefile** retVal);
    [id(107), helpstring("method GetClosestVertex")] HRESULT GetClosestVertex([in]double x, [in]double y, [in]double maxDistance,
        [out]long* shapeIndex, [out]long* pointIndex, [out] double* distance, [out, retval]VARIANT_BOOL* retVal);
    /**** Out of order for compatibility reasons. ****/
    [id(109), helpstring("method HasInvalidShapes")] HRESULT HasInvalidShapes([out, retval]VARIANT_BOOL* result);
    /*************************************************/
    [propget, id(110), helpstring("property ShapeCategory2")] HRESULT ShapeCategory2([in]long ShapeIndex, [out, retval] BSTR* categoryName);
    [propput, id(110), helpstring("property ShapeCategory2")] HRESULT ShapeCategory2([in]long ShapeIndex, [in] BSTR categoryName);
    [propget, id(111), helpstring("property ShapeCategory3")] HRESULT ShapeCategory3([in]long ShapeIndex, [out, retval] IShapefileCategory** category);
    [propput, id(111), helpstring("property ShapeCategory3")] HRESULT ShapeCategory3([in]long ShapeIndex, [in] IShapefileCategory* category);
    [id(112), helpstring("method Dump")] HRESULT Dump([in] BSTR ShapefileName, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(113), helpstring("method LoadDataFrom")] HRESULT LoadDataFrom([in] BSTR ShapefileName, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [propget, id(114), helpstring("property LastInputValidation")] HRESULT LastInputValidation([out, retval] IShapeValidationInfo** retVal);
    [propget, id(115), helpstring("property LastOutputValidation")] HRESULT LastOutputValidation([out, retval] IShapeValidationInfo** retVal);
    [id(116), helpstring("property ClearCachedGeometries")] HRESULT ClearCachedGeometries();
    [id(117), helpstring("method AggregateShapesWithStats")] HRESULT AggregateShapesWithStats([in]VARIANT_BOOL SelectedOnly,
        [in, defaultvalue(-1)]LONG FieldIndex, [in, defaultvalue(NULL)]IFieldStatOperations* statOperations, [out, retval]IShapefile** retval);
    [id(118), helpstring("method DissolveWithStats")] HRESULT DissolveWithStats([in]long FieldIndex, [in] VARIANT_BOOL SelectedOnly,
        [in, defaultvalue(NULL)]IFieldStatOperations* statOperations, [out, retval]IShapefile** sf);
    [propget, id(119)] HRESULT ShapeVisible([in] long ShapeIndex, [out, retval] VARIANT_BOOL* pVal);
    [propget, id(120)] HRESULT ShapeRotation([in] long ShapeIndex, [out, retval] double* pVal);
    [propput, id(120)] HRESULT ShapeRotation([in] long ShapeIndex, [in] double newVal);
    [propget, id(121)] HRESULT Volatile([out, retval] VARIANT_BOOL* pVal);
    [propput, id(121)] HRESULT Volatile([in] VARIANT_BOOL newVal);
    [id(122)] HRESULT EditUpdateShape([in]long ShapeIndex, [in]IShape* shpNew, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(123)] HRESULT ShapeModified([in] long ShapeIndex, [out, retval] VARIANT_BOOL* retVal);
    [propput, id(123)] HRESULT ShapeModified([in] long ShapeIndex, [in] VARIANT_BOOL newVal);
    [propget, id(125)] HRESULT InteractiveEditing([out, retval] VARIANT_BOOL* pVal);
    [propput, id(125)] HRESULT InteractiveEditing([in] VARIANT_BOOL newVal);
    [propget, id(126)] HRESULT ShapeIsHidden([in] LONG shapeIndex, [out, retval] VARIANT_BOOL* pVal);
    [propput, id(126)] HRESULT ShapeIsHidden([in] LONG shapeIndex, [in] VARIANT_BOOL newVal);
    [propget, id(127)] HRESULT Snappable([out, retval] VARIANT_BOOL* pVal);
    [propput, id(127)] HRESULT Snappable([in] VARIANT_BOOL newVal);
    [id(128)] HRESULT Serialize2([in]VARIANT_BOOL SaveSelection, [in]VARIANT_BOOL SerializeCategories, [out, retval]BSTR* retVal);
    [propget, id(129)] HRESULT ShapefileType2D([out, retval] ShpfileType* pVal);
    [propget, id(130)] HRESULT FieldIndexByName([in] BSTR FieldName, [out, retval] LONG* pVal);
    [id(131)] HRESULT Move([in] DOUBLE xOffset, [in] DOUBLE yOffset, [out, retval]VARIANT_BOOL* retVal);
    [id(132)] HRESULT RemoveSpatialIndex([out, retval]VARIANT_BOOL* retVal);
    [propget, id(133)] HRESULT ShapeRendered([in] LONG ShapeIndex, [out, retval] VARIANT_BOOL* pVal);
    [propget, id(134)] HRESULT SortField([out, retval] BSTR* pVal);
    [propput, id(134)] HRESULT SortField([in] BSTR newVal);
    [propget, id(135)] HRESULT SortAscending([out, retval] VARIANT_BOOL* pVal);
    [propput, id(135)] HRESULT SortAscending([in] VARIANT_BOOL newVal);
    [id(136)] HRESULT UpdateSortField();
    [id(137)] HRESULT SaveAsEx([in] BSTR newFilename, [in] VARIANT_BOOL stopEditing, [in] VARIANT_BOOL unboundFile, [out, retval] VARIANT_BOOL* retVal);
    [id(138)] HRESULT FixUpShapes2([in] VARIANT_BOOL SelectedOnly, [out] IShapefile** result, [out, retval] VARIANT_BOOL* fixed);
    [id(139)] HRESULT StartAppendMode([out, retval] VARIANT_BOOL* retVal);
    [id(140)] HRESULT StopAppendMode();
    [propget, id(141)] HRESULT AppendMode([out, retval] VARIANT_BOOL* pVal);
    [propget, id(142)] HRESULT IsGeographicProjection([out, retval] VARIANT_BOOL* retVal);
    [propget, id(143)] HRESULT Selectable([out, retval] VARIANT_BOOL* retVal);
    [propput, id(143)] HRESULT Selectable([in] VARIANT_BOOL newVal);
    [id(144), helpstring("method GetClosestSnapPosition")] HRESULT GetClosestSnapPosition([in]double x, [in]double y, [in]double maxDistance,
        [out]long* shapeIndex, [out] double* fx, [out] double* fy, [out] double* distance, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(145)] HRESULT HasOgrFidMapping([out, retval] VARIANT_BOOL* pVal);
    [id(146)] HRESULT OgrFid2ShapeIndex([in] long OgrFid, [out, retval] LONG* ShapeIndex);
};

/****************************  Shape Interface ***********************/
[
    object,
    uuid(5FA550E3-2044-4034-BAAA-B4CCE90A0C41),
    dual,
    nonextensible,
    helpstring("IShape Interface"),
    pointer_default(unique)
]
interface IShape : IDispatch {
    [propget, id(1), helpstring("property NumPoints")] HRESULT NumPoints([out, retval] long *pVal);
    [propget, id(2), helpstring("property NumParts")] HRESULT NumParts([out, retval] long *pVal);
    [propget, id(3), helpstring("property ShapeType")] HRESULT ShapeType([out, retval] ShpfileType *pVal);
    [propput, id(3), helpstring("property ShapeType")] HRESULT ShapeType([in] ShpfileType newVal);
    [propget, id(4), helpstring("property Point")] HRESULT Point([in] long PointIndex, [out, retval] IPoint**pVal);
    [propput, id(4), helpstring("property Point")] HRESULT Point([in] long PointIndex, [in] IPoint* newVal);
    [propget, id(5), helpstring("property Part")] HRESULT Part([in] long PartIndex, [out, retval] long *pVal);
    [propput, id(5), helpstring("property Part")] HRESULT Part([in] long PartIndex, [in] long newVal);
    [propget, id(6), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(7), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(8), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(8), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(9), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(9), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(10), helpstring("method Create")] HRESULT Create([in] ShpfileType ShpType, [out, retval] VARIANT_BOOL* retval);
    [id(11), helpstring("method InsertPoint")] HRESULT InsertPoint([in] IPoint* NewPoint, [in, out]long* PointIndex, [out, retval] VARIANT_BOOL* retval);
    [id(12), helpstring("method DeletePoint")] HRESULT DeletePoint([in] long PointIndex, [out, retval] VARIANT_BOOL* retval);
    [id(13), helpstring("method InsertPart")] HRESULT InsertPart([in] long PointIndex, [in, out] long* PartIndex, [out, retval] VARIANT_BOOL* retval);
    [id(14), helpstring("method DeletePart")] HRESULT DeletePart([in] long PartIndex, [out, retval] VARIANT_BOOL* retval);
    [propget, id(15), helpstring("property Extents")] HRESULT Extents([out, retval] IExtents**pVal);
    [id(16), helpstring("method SerializeToString")] HRESULT SerializeToString([out, retval] BSTR* Serialized);
    [id(17), helpstring("method CreateFromString")] HRESULT CreateFromString([in] BSTR Serialized, [out, retval] VARIANT_BOOL* retval);
    [id(18), helpstring("method PointInThisPoly")] HRESULT PointInThisPoly([in] IPoint* pt, [out, retval] VARIANT_BOOL *retval);
    [propget, id(19), helpstring("property Centroid")] HRESULT Centroid([out, retval] IPoint** pVal);
    [propget, id(24), helpstring("property Length")] HRESULT Length([out, retval] double *pVal);
    [propget, id(25), helpstring("property Perimeter")] HRESULT Perimeter([out, retval] double *pVal);
    [propget, id(26), helpstring("property Area")] HRESULT Area([out, retval] double *pVal);
    [id(20), helpstring("method Relates")] HRESULT Relates([in] IShape* Shape, [in] tkSpatialRelation Relation, [out, retval] VARIANT_BOOL* retval);
    [id(21), helpstring("method Distance")] HRESULT Distance([in] IShape* Shape, [out, retval] DOUBLE* retval);
    [id(22), helpstring("method Buffer")] HRESULT Buffer([in] DOUBLE Distance, [in] long nQuadSegments, [out, retval] IShape** retval);
    [id(23), helpstring("method Clip")] HRESULT Clip([in] IShape* Shape, [in] tkClipOperation Operation, [out, retval] IShape** retval);
    [id(27), helpstring("method Contains")] HRESULT Contains([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(28), helpstring("method Crosses")] HRESULT Crosses([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(29), helpstring("method Disjoint")] HRESULT Disjoint([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(30), helpstring("method Equals")] HRESULT Equals([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(31), helpstring("method Intersects")] HRESULT Intersects([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(32), helpstring("method Overlaps")] HRESULT Overlaps([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(33), helpstring("method Touches")] HRESULT Touches([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(34), helpstring("method Within")] HRESULT Within([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    // spelling error corrected; was spelled as Boundry; 13-march-2014
    [id(35), helpstring("method Boundary")] HRESULT Boundary([out, retval] IShape** retval);
    [id(36), helpstring("method ConvexHull")] HRESULT ConvexHull([out, retval] IShape** retval);
    [propget, id(37), helpstring("property IsValid")] HRESULT IsValid([out, retval] VARIANT_BOOL* retval);
    [propget, id(38), helpstring("property XY")] HRESULT XY([in]long PointIndex, [in, out]double* x, [in, out]double* y, [out, retval] VARIANT_BOOL* retval);
    [propget, id(39), helpstring("Returns true if points of shape's part are in clockwise direction")]
    HRESULT PartIsClockWise([in] long PartIndex, [out, retval] VARIANT_BOOL* retval);
    [id(40), helpstring("Changes the shape's part order of points (clockwise, counter clockwise)")]
    HRESULT ReversePointsOrder([in] long PartIndex, [out, retval] VARIANT_BOOL* retval);
    [id(41), helpstring("Returns array of shape type with the results of intersection of 2 shapes. Resulting shapes can belong to different types.")]
    HRESULT GetIntersection([in] IShape* Shape, [in, out] VARIANT* Results, [out, retval]VARIANT_BOOL* retval);
    [propget, id(42), helpstring("property Center")] HRESULT Center([out, retval] IPoint** pVal);
    [propget, id(43), helpstring("property EndOfPart")] HRESULT EndOfPart([in]long PartIndex, [out, retval] long* retval);
    [propget, id(44), helpstring("property PartAsShape")] HRESULT PartAsShape([in]long PartIndex, [out, retval] IShape** retval);
    [propget, id(45), helpstring("property IsValidReason")] HRESULT IsValidReason([out, retval] BSTR* retval);
    [propget, id(46), helpstring("property InteriorPoint")] HRESULT InteriorPoint([out, retval] IPoint** retval);
    [id(47), helpstring("method Clone")] HRESULT Clone([out, retval] IShape** retval);
    [id(48), helpstring("method Explode")] HRESULT Explode([in, out]VARIANT* Results, [out, retval]VARIANT_BOOL* retval);
    [id(49), helpstring("method put_XY")] HRESULT put_XY([in] LONG pointIndex, [in] DOUBLE x, [in] DOUBLE y, [out, retval] VARIANT_BOOL* retVal);
    [id(50), helpstring("method ExportToBinary")] HRESULT ExportToBinary([in, out] VARIANT* bytesArray, [out, retval] VARIANT_BOOL* retVal);
    [id(51), helpstring("method ImportFromBinary")] HRESULT ImportFromBinary([in] VARIANT bytesArray, [out, retval] VARIANT_BOOL* retVal);
    [id(52), helpstring("method Fixup")] HRESULT FixUp([out]IShape** retval);

    [id(53), helpstring("method AddPoint")] HRESULT AddPoint([in]double x, [in]double y, [out, retval]long* pointIndex);
    [id(54), helpstring("method ExportToWKT")] HRESULT ExportToWKT([out, retval] BSTR* retVal);
    [id(55), helpstring("method ImportToWKT")] HRESULT ImportFromWKT([in] BSTR Serialized, [out, retval]VARIANT_BOOL *retVal);
    [id(56), helpstring("method CopyFrom")] HRESULT CopyFrom([in] IShape* sourceShape, [out, retval]VARIANT_BOOL* retVal);
    [id(57), helpstring("method ClosestPoints")] HRESULT ClosestPoints([in]IShape* shape2, [out, retval]IShape** result);
    [id(58), helpstring("method put_M")] HRESULT put_M([in]LONG pointIndex, [in]double m, [out, retval]VARIANT_BOOL* retVal);
    [id(59), helpstring("method put_Z")] HRESULT put_Z([in]LONG pointIndex, [in]double z, [out, retval]VARIANT_BOOL* retVal);
    [id(60), helpstring("method get_M")] HRESULT get_M([in]LONG pointIndex, [out]double* m, [out, retval]VARIANT_BOOL* retVal);
    [id(61), helpstring("method get_Z")] HRESULT get_Z([in]LONG pointIndex, [out]double* z, [out, retval]VARIANT_BOOL* retVal);
    [id(62)] HRESULT BufferWithParams([in] DOUBLE Distance,
        [in, defaultvalue(30)] LONG numSegments,
        [in, defaultvalue(0)] VARIANT_BOOL singleSided,
        [in, defaultvalue(0)] tkBufferCap capStyle,
        [in, defaultvalue(0)] tkBufferJoin joinStyle,
        [in, defaultvalue(5.0)] DOUBLE mitreLimit,
        [out, retval] IShape** retVal);
    [id(63)] HRESULT Move([in] DOUBLE xOffset, [in] DOUBLE yOffset);
    [id(64)] HRESULT Rotate([in] DOUBLE originX, [in] DOUBLE originY, [in] DOUBLE angle);
    [propget, id(65)] HRESULT ShapeType2D([out, retval] ShpfileType* pVal);
    [id(66)] HRESULT SplitByPolyline([in] IShape* polyline, [in, out]VARIANT* results, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(67)] HRESULT IsEmpty([out, retval] VARIANT_BOOL* pVal);

    [id(68)] HRESULT Clear();
    [id(69)] HRESULT FixUp2([in] tkUnitsOfMeasure units, [out, retval] IShape** retVal);
    [id(70), helpstring("method InterpolatePoint")] HRESULT InterpolatePoint([in] IPoint* startPoint, [in] double distance, [in, defaultvalue(0)] VARIANT_BOOL normalized, [out, retval] IPoint **retVal);
    [id(71), helpstring("method ProjectDistanceTo")] HRESULT ProjectDistanceTo([in] IShape* referenceShape, [out, retval] double* distance);
    [id(72), helpstring("method Covers")] HRESULT Covers([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
    [id(73), helpstring("method CoveredBy")] HRESULT CoveredBy([in] IShape* Shape, [out, retval] VARIANT_BOOL* retval);
};

/****************************  Extents Interface ***********************/
[
    object,
    uuid(A5692259-035E-487A-8D89-509DD6DD0F64),
    dual,
    nonextensible,
    helpstring("IExtents Interface"),
    pointer_default(unique)
]
interface IExtents : IDispatch {
    [id(1), helpstring("method SetBounds")] HRESULT SetBounds([in] double xMin, [in] double yMin, [in] double zMin, [in] double xMax, [in] double yMax, [in] double zMax);
    [id(2), helpstring("method GetBounds")] HRESULT GetBounds([out] double* xMin, [out] double* yMin, [out] double* zMin, [out] double* xMax, [out] double* yMax, [out] double* zMax);
    [propget, id(3), helpstring("property xMin")] HRESULT xMin([out, retval] double *pVal);
    [propget, id(4), helpstring("property xMax")] HRESULT xMax([out, retval] double *pVal);
    [propget, id(5), helpstring("property yMin")] HRESULT yMin([out, retval] double *pVal);
    [propget, id(6), helpstring("property yMax")] HRESULT yMax([out, retval] double *pVal);
    [propget, id(7), helpstring("property zMin")] HRESULT zMin([out, retval] double *pVal);
    [propget, id(8), helpstring("property zMax")] HRESULT zMax([out, retval] double *pVal);
    [propget, id(9), helpstring("property mMin")] HRESULT mMin([out, retval] double *pVal);
    [propget, id(10), helpstring("property mMax")] HRESULT mMax([out, retval] double *pVal);
    [id(11), helpstring("method GetMeasureBounds")] HRESULT GetMeasureBounds([out] double* mMin, [out] double* mMax);
    [id(12), helpstring("method SetMeasureBounds")] HRESULT SetMeasureBounds([in]double mMin, [in]double mMax);
    [id(13), helpstring("method ToDebugString")] HRESULT ToDebugString([out, retval] BSTR* retVal);
    [id(14), helpstring("method PointIsWithin")] HRESULT PointIsWithin([in]double x, [in]double y, [out, retval]VARIANT_BOOL* retVal);
    [id(15), helpstring("method ToShape")] HRESULT ToShape([out, retval]IShape** retval);
    [propget, id(16), helpstring("property Center")] HRESULT Center([out, retval]IPoint** retVal);
    [id(17), helpstring("method MoveTo")] HRESULT MoveTo([in]double x, [in]double y);
    //[id(13), helpstring("method Disjoint")] HRESULT Disjoint([in]IExtents* ext, [out, retval]VARIANT_BOOL* retval);
    //[id(15), helpstring("method Union")] HRESULT Union([in]IExtents* ext);
    //[id(16), helpstring("method GetIntersection")] HRESULT GetIntersection([in]IExtents* ext, [out, retval]IExtents** retval);
    [propget, id(18), helpstring("property Width")] HRESULT Width([out, retval]double* pVal);
    [propget, id(19), helpstring("property Height")] HRESULT Height([out, retval]double* pVal);
    [propget, id(20), helpstring("property Depth")] HRESULT Depth([out, retval]double* pVal);
};

/****************************  Point Interface ***********************/
[
    object,
    uuid(74F07889-1380-43EE-837A-BBB268311005),
    dual,
    nonextensible,
    helpstring("IPoint Interface"),
    pointer_default(unique)
]
interface IPoint : IDispatch {
    [propget, id(1), helpstring("property X")] HRESULT X([out, retval] double *pVal);
    [propput, id(1), helpstring("property X")] HRESULT X([in] double newVal);
    [propget, id(2), helpstring("property Y")] HRESULT Y([out, retval] double *pVal);
    [propput, id(2), helpstring("property Y")] HRESULT Y([in] double newVal);
    [propget, id(3), helpstring("property Z")] HRESULT Z([out, retval] double *pVal);
    [propput, id(3), helpstring("property Z")] HRESULT Z([in] double newVal);
    [propget, id(4), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(5), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(6), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(6), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(7), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(7), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [propget, id(8), helpstring("property M")] HRESULT M([out, retval] double *pVal);
    [propput, id(8), helpstring("property M")] HRESULT M([in] double newVal);
    [id(9), helpstring("method Clone")] HRESULT Clone([out, retval] IPoint** retVal);
    [id(10), helpstring("Sets X, Y, and Z values")] HRESULT Set([in] double newX, [in] double newY, [in, defaultvalue(0.0)] double newZ);
};

/****************************  Table Interface ***********************/
[
    object,
    uuid(4365A8A1-2E46-4223-B2DC-65764262D88B),
    dual,
    nonextensible,
    helpstring("ITable Interface"),
    pointer_default(unique)
]
interface ITable : IDispatch {
    [propget, id(1), helpstring("property NumRows")] HRESULT NumRows([out, retval] long *pVal);
    [propget, id(2), helpstring("property NumFields")] HRESULT NumFields([out, retval] long *pVal);
    [propget, id(3), helpstring("property Field")] HRESULT Field([in] long FieldIndex, [out, retval] IField**pVal);
    [propget, id(4), helpstring("property CellValue")] HRESULT CellValue([in] long FieldIndex, [in] long RowIndex, [out, retval] VARIANT *pVal);
    [propget, id(5), helpstring("property EditingTable")] HRESULT EditingTable([out, retval] VARIANT_BOOL *pVal);
    [propget, id(6), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(7), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(8), helpstring("property CdlgFilter")] HRESULT CdlgFilter([out, retval] BSTR *pVal);
    [propget, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(10), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(10), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(11), helpstring("method Open")] HRESULT Open([in] BSTR dbfFilename, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(12), helpstring("method CreateNew")] HRESULT CreateNew([in] BSTR dbfFilename, [out, retval] VARIANT_BOOL* retval);
    [id(13), helpstring("method SaveAs")] HRESULT SaveAs([in] BSTR dbfFilename, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(14), helpstring("method Close")] HRESULT Close([out, retval] VARIANT_BOOL* retval);
    [id(15), helpstring("method EditClear")] HRESULT EditClear([out, retval] VARIANT_BOOL* retval);
    [id(16), helpstring("method EditInsertField")] HRESULT EditInsertField([in] IField* Field, [in, out] long* FieldIndex, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(17), helpstring("method EditReplaceField")] HRESULT EditReplaceField([in] long FieldIndex, [in] IField* newField, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(18), helpstring("method EditDeleteField")] HRESULT EditDeleteField([in] long FieldIndex, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(19), helpstring("method EditInsertRow")] HRESULT EditInsertRow([in, out] long* RowIndex, [out, retval] VARIANT_BOOL* retval);
    [id(20), helpstring("method EditCellValue")] HRESULT EditCellValue([in] long FieldIndex, [in] long RowIndex, [in] VARIANT newVal, [out, retval] VARIANT_BOOL* retval);
    [id(21), helpstring("method StartEditingTable")] HRESULT StartEditingTable([in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(22), helpstring("method StopEditingTable")] HRESULT StopEditingTable([in, defaultvalue(-1)] VARIANT_BOOL ApplyChanges, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(23), helpstring("method EditDeleteRow")] HRESULT EditDeleteRow([in] long RowIndex, [out, retval] VARIANT_BOOL* retval);
    [id(24), helpstring("method Save")] HRESULT Save([in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [propget, id(25), helpstring("property MinValue")] HRESULT MinValue([in]long FieldIndex, [out, retval] VARIANT* retval);
    [propget, id(26), helpstring("property MaxValue")] HRESULT MaxValue([in]long FieldIndex, [out, retval] VARIANT* retval);
    [propget, id(27), helpstring("property MeanValue")] HRESULT MeanValue([in]long FieldIndex, [out, retval] double* retval);
    [propget, id(28), helpstring("property StandardDeviation")] HRESULT StandardDeviation([in]long FieldIndex, [out, retval] double* retval);

    [id(29), helpstring("method ParseExpression")] HRESULT ParseExpression([in]BSTR Expression, [in, out]BSTR* ErrorString, [out, retval]VARIANT_BOOL* retVal);
    [id(30), helpstring("method Query")] HRESULT Query([in]BSTR Expression, [in, out]VARIANT* Result, [in, out]BSTR* ErrorString, [out, retval]VARIANT_BOOL* retval);
    [propget, id(31), helpstring("property FieldIndexByName")] HRESULT FieldIndexByName([in]BSTR FieldName, [out, retval]long* retval);
    [id(32), helpstring("method TestExpression")] HRESULT TestExpression([in] BSTR Expression, [in] tkValueType ReturnType, [in, out] BSTR* ErrorString, [out, retval] VARIANT_BOOL* retVal);
    [id(33), helpstring("method Calculate")] HRESULT Calculate([in] BSTR Expression, [in] LONG RowIndex, [out] VARIANT* Result, [out] BSTR* ErrorString, [out, retval] VARIANT_BOOL* retVal);
    //[id(34), helpstring("method CalculateStat")] HRESULT CalculateStat([in] LONG FieldIndex, [in] tkGroupOperation Statistic, [in] BSTR Expression, [out] VARIANT* Result, VARIANT_BOOL* retVal);

    [id(34), helpstring("method EditAddField")] HRESULT EditAddField([in]BSTR name, [in]FieldType type, [in]int precision,
        [in]int width, [out, retval]long* fieldIndex);

    [id(35), helpstring("")] HRESULT Join([in]ITable* table2, [in]BSTR field1, [in]BSTR field2, [out, retval]VARIANT_BOOL* retVal);
    [id(36), helpstring("")] HRESULT Join2([in]ITable* table2, [in]BSTR field1, [in]BSTR field2, [in]BSTR filenameToReopen, [in]BSTR JoinOptions, [out, retval]VARIANT_BOOL* retVal);

    [id(37), helpstring("")] HRESULT StopJoin([in]int joinIndex, [out, retval]VARIANT_BOOL* retVal);
    [id(38), helpstring("")] HRESULT StopAllJoins();

    [propget, id(39), helpstring("")] HRESULT IsJoined([out, retval]VARIANT_BOOL* retVal);
    [propget, id(40), helpstring("")] HRESULT JoinCount([out, retval]int* retVal);

    [propget, id(41), helpstring("")] HRESULT JoinFilename([in]int joinIndex, [out, retval]BSTR* retVal);
    [propget, id(42), helpstring("")] HRESULT JoinFromField([in]int joinIndex, [out, retval]BSTR* retVal);
    [propget, id(43), helpstring("")] HRESULT JoinToField([in]int joinIndex, [out, retval]BSTR* retVal);

    [propget, id(44), helpstring("")] HRESULT FieldIsJoined([in]int fieldIndex, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(45), helpstring("")] HRESULT FieldJoinIndex([in]int fieldIndex, [out, retval]int* retVal);

    [id(46), helpstring("")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(47), helpstring("")] HRESULT Deserialize([in]BSTR newVal);
    [id(48), helpstring("")] HRESULT TryJoin([in]ITable* table2, [in]BSTR fieldTo, [in]BSTR fieldFrom, [out]int* rowCount, [out]int* joinRowCount, [out, retval]VARIANT_BOOL* retVal);
    [id(49), helpstring("")] HRESULT Join3([in]ITable* table2, [in]BSTR field1, [in]BSTR field2, [in]BSTR filenameToReopen, [in]BSTR JoinOptions, [in]SAFEARRAY(BSTR) fieldList, [out, retval]VARIANT_BOOL* retVal);

    [id(50), helpstring("")] HRESULT Dump([in] BSTR dbfFilename, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [propget, id(51)] HRESULT JoinFields([in] LONG joinIndex, [out, retval] BSTR* pVal);
    [propget, id(52)] HRESULT Filename([out, retval] BSTR* pVal);
    [propget, id(53)] HRESULT JoinOptions([in] LONG joinIndex, [out, retval] BSTR* pVal);
    [id(54)] HRESULT ClearCache();
    [propget, id(55)] HRESULT RowIsModified([in] LONG RowIndex, [out, retval] VARIANT_BOOL* pVal);
};


/****************************  Field Interface ***********************/
[
    object,
    uuid(3F3751A5-4CF8-4AC3-AFC2-60DE8B90FC7B),
    dual,
    nonextensible,
    helpstring("IField Interface"),
    pointer_default(unique)
]
interface IField : IDispatch {
    [propget, id(1), helpstring("property Name")] HRESULT Name([out, retval] BSTR *pVal);
    [propput, id(1), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
    [propget, id(2), helpstring("property Width")] HRESULT Width([out, retval] long *pVal);
    [propput, id(2), helpstring("property Width")] HRESULT Width([in] long newVal);
    [propget, id(3), helpstring("property Precision")] HRESULT Precision([out, retval] long *pVal);
    [propput, id(3), helpstring("property Precision")] HRESULT Precision([in] long newVal);
    [propget, id(4), helpstring("property Type")] HRESULT Type([out, retval] FieldType *pVal);
    [propput, id(4), helpstring("property Type")] HRESULT Type([in] FieldType newVal);
    [propget, id(5), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(6), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(7), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(7), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(8), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(8), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(9), helpstring("method Clone")] HRESULT Clone([out, retval] IField** retVal);
    [propget, id(10)] HRESULT Visible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(10)] HRESULT Visible([in] VARIANT_BOOL newVal);
    [propget, id(11)] HRESULT Alias([out, retval] BSTR* pVal);
    [propput, id(11)] HRESULT Alias([in] BSTR newVal);
    [propget, id(12)] HRESULT Joined([out, retval] VARIANT_BOOL* pVal);
    [propget, id(13)] HRESULT Expression([out, retval] BSTR* pVal);
    [propput, id(13)] HRESULT Expression([in] BSTR newVal);
    [propget, id(14)] HRESULT Modified([out, retval] VARIANT_BOOL* pVal);
    [propput, id(14)] HRESULT Modified([in] VARIANT_BOOL newVal);
};

/****************************  ShapeNetwork Interface ***********************/
[
    object,
    uuid(2D4968F2-40D9-4F25-8BE6-B51B959CC1B0),
    dual,
    nonextensible,
    helpstring("IShapeNetwork Interface"),
    pointer_default(unique)
]
interface IShapeNetwork : IDispatch {
    [id(1), helpstring("method Build")] HRESULT Build([in]IShapefile *Shapefile, [in]long ShapeIndex, [in]long FinalPointIndex, [in]double Tolerance, [in]AmbiguityResolution ar, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] long* retval);
    [id(2), helpstring("method DeleteShape")] HRESULT DeleteShape([in]long ShapeIndex, [out, retval]VARIANT_BOOL* retval);
    [id(3), helpstring("method RasterizeD8")] HRESULT RasterizeD8([in]VARIANT_BOOL UseNetworkBounds, [in, defaultvalue(NULL)] IGridHeader* Header, [in, defaultvalue(30.0)] double Cellsize, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IGrid ** retval);
    [id(4), helpstring("method MoveUp")] HRESULT MoveUp([in]long UpIndex, [out, retval]VARIANT_BOOL* retval);
    [id(5), helpstring("method MoveDown")] HRESULT MoveDown([out, retval]VARIANT_BOOL *retval);
    [id(6), helpstring("method MoveTo")] HRESULT MoveTo([in]long ShapeIndex, [out, retval] VARIANT_BOOL* retval);
    [id(7), helpstring("method MoveToOutlet")] HRESULT MoveToOutlet([out, retval] VARIANT_BOOL* retval);
    [propget, id(8), helpstring("property Shapefile")] HRESULT Shapefile([out, retval] IShapefile**pVal);
    [propget, id(9), helpstring("property CurrentShape")] HRESULT CurrentShape([out, retval] IShape**pVal);
    [propget, id(10), helpstring("property CurrentShapeIndex")] HRESULT CurrentShapeIndex([out, retval] long *pVal);
    [propget, id(11), helpstring("property DistanceToOutlet")] HRESULT DistanceToOutlet([in] long PointIndex, [out, retval] double *pVal);
    [propget, id(12), helpstring("property NumDirectUps")] HRESULT NumDirectUps([out, retval] long *pVal);
    [propget, id(13), helpstring("property NetworkSize")] HRESULT NetworkSize([out, retval] long *pVal);
    [propget, id(14), helpstring("property AmbigShapeIndex")] HRESULT AmbigShapeIndex([in] long Index, [out, retval] long *pVal);
    [propget, id(15), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(16), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(17), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(17), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(18), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(18), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [propget, id(19), helpstring("property ParentIndex")] HRESULT ParentIndex([out, retval] long *pVal);
    [propput, id(19), helpstring("property ParentIndex")] HRESULT ParentIndex([in] long newVal);
    [id(20), helpstring("method Open")] HRESULT Open([in] IShapefile* sf, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(21), helpstring("method Close")] HRESULT Close([out, retval] VARIANT_BOOL* retval);
};

/****************************  Callback Interface ***********************/
[
    object,
    uuid(90E6BBF7-A956-49be-A5CD-A4640C263AB6),
    dual,
    helpstring("ICallback Interface"),
    pointer_default(unique)
]
interface ICallback : IDispatch
{
    [id(1), helpstring("method Progress")] HRESULT Progress([in]BSTR KeyOfSender, [in]long Percent, [in]BSTR Message);
    [id(2), helpstring("method Error")] HRESULT Error([in]BSTR KeyOfSender, [in]BSTR ErrorMsg);
};


/****************************  StopExecution Interface ***********************/
[
    object,
    uuid(52A29829-BB46-4d76-8082-55551E538BDA),
    dual,
    helpstring("IStopExecution Interface"),
    pointer_default(unique)
]
interface IStopExecution : IDispatch
{
    [id(1), helpstring("method StopFunction")] HRESULT StopFunction([out, retval]VARIANT_BOOL* retVal);
    //[id(2), helpstring("method PromptForMissingFile")] HRESULT PromptForMissingFile([in] BSTR* Filename, [in] BSTR Msg, [in] VARIANT_BOOL* Retry, [in] VARIANT_BOOL* Skip, [in] VARIANT_BOOL* Abort);
};

/****************************  Utils Interface ***********************/
[
    object,
    uuid(360BEC33-7703-4693-B6CA-90FEA22CF1B7),
    dual,
    nonextensible,
    helpstring("IUtils Interface"),
    pointer_default(unique)
]
interface IUtils : IDispatch {
    [id(1), helpstring("method PointInPolygon")] HRESULT PointInPolygon([in] IShape* Shp, [in]IPoint* TestPoint, [out, retval] VARIANT_BOOL* retval);
    [id(2), helpstring("method GridReplace")] HRESULT GridReplace([in] IGrid* Grd, [in] VARIANT OldValue, [in] VARIANT NewValue, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(3), helpstring("method GridInterpolateNoData")] HRESULT GridInterpolateNoData([in] IGrid* Grd, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(4), helpstring("method RemoveColinearPoints")] HRESULT RemoveColinearPoints([in] IShapefile* Shapes, [in]double LinearTolerance, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [propget, id(5), helpstring("property Length")] HRESULT Length([in] IShape* Shape, [out, retval] double *pVal);
    [propget, id(6), helpstring("property Perimeter")] HRESULT Perimeter([in] IShape* Shape, [out, retval] double *pVal);
    [propget, id(7), helpstring("property Area")] HRESULT Area([in] IShape* Shape, [out, retval] double *pVal);
    [propget, id(8), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(9), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(10), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(10), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(11), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(11), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(12), helpstring("method ClipPolygon")] HRESULT ClipPolygon([in] PolygonOperation op, [in] IShape* SubjectPolygon, [in] IShape* ClipPolygon, [out, retval] IShape ** retval);
    [id(13), helpstring("method GridMerge")] HRESULT GridMerge([in] VARIANT Grids, [in] BSTR MergeFilename, [in, defaultvalue(-1)] VARIANT_BOOL InRam, [in, defaultvalue(UseExtension)] GridFileType GrdFileType, [in, defaultvalue(NULL)]ICallback * cBack, [out, retval] IGrid ** retval);
    [id(14), helpstring("method ShapeMerge")] HRESULT ShapeMerge([in] IShapefile* Shapes, [in]long IndexOne, [in]long IndexTwo, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IShape ** retval);
    [id(15), helpstring("method GridToImage")] HRESULT GridToImage([in] IGrid* Grid, [in] IGridColorScheme* cScheme, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IImage ** retval);
    [id(16), helpstring("method GridToShapefile")] HRESULT GridToShapefile([in] IGrid* Grid, [in, defaultvalue(NULL)] IGrid* ConnectionGrid, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IShapefile ** retval);
    [id(17), helpstring("method GridToGrid")] HRESULT GridToGrid([in] IGrid* Grid, [in] GridDataType OutDataType, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IGrid ** retval);
    [id(18), helpstring("method ShapeToShapeZ")] HRESULT ShapeToShapeZ([in] IShapefile* Shapefile, [in] IGrid* Grid, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IShapefile ** retval);
    [id(19), helpstring("method TinToShapefile")] HRESULT TinToShapefile([in] ITin* Tin, [in] ShpfileType Type, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] IShapefile ** retval);
    [id(20), helpstring("method ShapefileToGrid")] HRESULT ShapefileToGrid([in] IShapefile * Shpfile, [in, defaultvalue(-1)] VARIANT_BOOL UseShapefileBounds, [in, defaultvalue(NULL)]IGridHeader * GrdHeader, [in, defaultvalue(30.0)]double Cellsize, [in, defaultvalue(-1)]VARIANT_BOOL UseShapeNumber, [in, defaultvalue(1)]short SingleValue, [out, retval] IGrid ** retval);
    [id(21), helpstring("method hBitmapToPicture")] HRESULT hBitmapToPicture([in] long hBitmap, [out, retval] IPictureDisp ** retval);
    [id(22), helpstring("method GenerateHillShade")] HRESULT GenerateHillShade([in] BSTR bstrGridFilename, [in] BSTR bstrShadeFilename, [in, defaultvalue(1)] float z, [in, defaultvalue(1)] float scale, [in, defaultvalue(315)] float az, [in, defaultvalue(45)] float alt, [out, retval] VARIANT_BOOL* retval);
    [id(23), helpstring("method GenerateContour")] HRESULT GenerateContour([in] BSTR pszSrcFilename, [in] BSTR pszDstFilename, [in] double dfInterval, [in, defaultvalue(0)] double dfNoData, [in, defaultvalue(0)] VARIANT_BOOL Is3D, [in, defaultvalue(NULL)] VARIANT dblFLArray, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    [id(24), helpstring("Deprecated method GDALWarp, use CGdalUtils::GdalRasterTranslate instead")] HRESULT TranslateRaster([in] BSTR bstrSrcFilename, [in] BSTR bstrDstFilename, [in] BSTR bstrOptions, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    [id(25), helpstring("Reads vector layer through GDAL/OGR library and converts it to the in-memory shapefile. Layer format is defined automatically. For formats which can store geometries of different types the type of resulting shapefile should be specified in shpType parameter.")]
    HRESULT OGRLayerToShapefile([in]BSTR Filename, [in, defaultvalue(SHP_NULLSHAPE)] ShpfileType shpType, [in, defaultvalue(NULL)] ICallback *cBack, [out, retval] IShapefile** sf);
    [id(26), helpstring("method MergeImages")] HRESULT MergeImages([in]SAFEARRAY(BSTR) InputNames, [in] BSTR OutputName, [out, retval]VARIANT_BOOL* retVal);
    [id(27), helpstring("method ReprojectShapefile")] HRESULT ReprojectShapefile([in] IShapefile* sf, [in] IGeoProjection* source, [in] IGeoProjection* target, [out, retval] IShapefile** result);
    [id(28), helpstring("method ColorByName")] HRESULT ColorByName([in] tkMapColor name, [out, retval] OLE_COLOR* retVal);
    [id(30), helpstring("method ClipGridWithPolygon")] HRESULT ClipGridWithPolygon([in]BSTR inputGridfile, [in]IShape* poly, [in]BSTR resultGridfile, [in]VARIANT_BOOL keepExtents, [out, retval]VARIANT_BOOL* retVal);
    [id(31), helpstring("method ClipGridWithPolygon2")] HRESULT ClipGridWithPolygon2([in]IGrid* inputGrid, [in]IShape* poly, [in]BSTR resultGridfile, [in]VARIANT_BOOL keepExtents, [out, retval]VARIANT_BOOL* retVal);
    [id(32), helpstring("method GridStatisticsToShapefile")] HRESULT GridStatisticsToShapefile([in]IGrid* grid, [in]IShapefile* sf, [in]VARIANT_BOOL selectedOnly, [in]VARIANT_BOOL overwriteFields, [in, defaultvalue(-1)] VARIANT_BOOL useCenterWithinMethod, [out, retval]VARIANT_BOOL* retVal);
    [id(33), helpstring("method Polygonize")] HRESULT Polygonize([in] BSTR pszSrcFilename, [in] BSTR pszDstFilename, [in, defaultvalue(1)] int iSrcBand, [in, defaultvalue(0)] VARIANT_BOOL NoMask, [in, defaultvalue(NULL)] BSTR pszMaskFilename, [in, defaultvalue("GML")] BSTR pszOGRFormat, [in, defaultvalue("out")] BSTR pszDstLayerName, [in, defaultvalue("DN")] BSTR pszPixValFieldName, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] VARIANT_BOOL * retval);
    [id(36), helpstring("method GDALInfo")] HRESULT GDALInfo([in] BSTR bstrSrcFilename, [in] BSTR bstrOptions, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] BSTR* bstrInfo);
    [id(37), helpstring("Deprecated method GDALWarp, use CGdalUtils::GdalRasterWarp instead")] HRESULT GDALWarp([in] BSTR bstrSrcFilename, [in] BSTR bstrDstFilename, [in] BSTR bstrOptions, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    [id(38), helpstring("method GDALBuildVrt")] HRESULT GDALBuildVrt([in] BSTR bstrDstFilename, [in] BSTR bstrOptions, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    [id(39), helpstring("method GDALAddOverviews, use CGdalUtils::GdalBuildOverviews instead")] HRESULT GDALAddOverviews([in] BSTR bstrSrcFilename, [in] BSTR bstrOptions, [in] BSTR bstrLevels, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    [id(40), helpstring("method GDALRasterize")] HRESULT GDALRasterize([in] BSTR bstrSrcFilename, [in] BSTR bstrDstFilename, [in] BSTR bstrOptions, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    [id(41), helpstring("method OGRInfo")] HRESULT OGRInfo([in] BSTR bstrSrcFilename, [in] BSTR bstrOptions, [in, defaultvalue(NULL)] BSTR bstrLayers, [in, defaultvalue(NULL)] ICallback * cBack, [out, retval] BSTR * bstrInfo);
    [id(42), helpstring("Deprecated method OGR2OGR")] HRESULT OGR2OGR([in] BSTR bstrSrcFilename, [in] BSTR bstrDstFilename, [in] BSTR bstrOptions, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL *retval);
    /**** 4.9 only ****/
    [id(29), helpstring("method ConvertDistance")] HRESULT ConvertDistance([in] tkUnitsOfMeasure sourceUnit, [in] tkUnitsOfMeasure targetUnit, [in, out] DOUBLE* Value, [out, retval] VARIANT_BOOL* retval);
    [id(34), helpstring("method CreateInstance")] HRESULT CreateInstance([in]tkInterface interfaceId, [out, retval]IDispatch** retVal);
    [id(35), helpstring("method GeodesicDistance")] HRESULT GeodesicDistance([in]double lat1, [in]double lng1, [in]double lat2, [in]double lng2, [out, retval]double* retVal);
    [id(43), helpstring("method MaskRaster")] HRESULT MaskRaster([in] BSTR Filename, [in]BYTE newPerBandValue, [out, retval]VARIANT_BOOL* retVal);

    [id(44), helpstring("")] HRESULT GridStatisticsForPolygon([in]IGrid* grid, [in]IGridHeader* header, [in]IExtents* gridExtents, [in]IShape* shape,
        [in]double noDataValue, [in, out]double* meanValue, [in, out]double* minValue, [in, out]double* maxValue, [out, retval]VARIANT_BOOL* retVal);
    [id(45), helpstring("method CopyNodataValues")] HRESULT CopyNodataValues([in]BSTR sourceFilename, [in]BSTR destFilename, [out, retval]VARIANT_BOOL* retVal);

    [id(46), helpstring("method GridToImage2")] HRESULT GridToImage2([in]IGrid* grid, [in]IGridColorScheme* ci, [in]tkGridProxyFormat imageFormat, [in]VARIANT_BOOL inRam, [in] ICallback* cBack, [out, retval]IImage ** retVal);
    //[id(47), helpstring("method GridToImageInRam")] HRESULT GridToImageInRam([in]IGrid* grid, [in]IGridColorScheme* ci, [in] ICallback* cBack, [out,retval]IImage ** retVal);
    [id(48), helpstring("method ErrorMsgFromObject")] HRESULT ErrorMsgFromObject([in]IDispatch* comClass, [out, retval]BSTR* retVal);
    [id(49), helpstring("method TileProjectionToGeoProjection")] HRESULT TileProjectionToGeoProjection(
        [in]tkTileProjection projection, [out, retval]IGeoProjection** retVal);
    [propget, id(50), helpstring("method ComUsageReport")] HRESULT ComUsageReport([in]VARIANT_BOOL unreleasedOnly, [out, retval]BSTR* retVal);
    [id(51)] HRESULT CalculateRaster([in]SAFEARRAY(BSTR) filenames, [in]BSTR expression, [in]BSTR outputFilename,
        [in]BSTR gdalOutputFormat, [in] float noDataValue, [in] ICallback* cBack, [out]BSTR* errorMsg, [out, retval]VARIANT_BOOL* retVal);
    [id(52)] HRESULT ReclassifyRaster([in]BSTR Filename, [in]int bandIndex, [in]BSTR outputName,
        [in]SAFEARRAY(double) LowerBounds, [in]SAFEARRAY(double) UpperBounds,
        [in]SAFEARRAY(double) NewValues, [in]BSTR gdalOutputFormat, [in] ICallback* cBack, [out, retval]VARIANT_BOOL* retVal);
    [id(53)] HRESULT IsTiffGrid([in] BSTR Filename, [out, retval] VARIANT_BOOL* retVal);
    [id(54)] HRESULT GeodesicArea([in] IShape* shapeWgs84, [out, retval] DOUBLE* retVal);
    [id(55)] HRESULT FixUpShapes([in] IShapefile* subject, [in] VARIANT_BOOL SelectedOnly, [in] BSTR outputFilename, [in] VARIANT_BOOL Overwrite, [out, retval] VARIANT_BOOL* retVal);
    [id(56)] HRESULT BufferByDistance([in] IShapefile* subject, [in] DOUBLE Distance, [in] LONG nSegments, [in] VARIANT_BOOL SelectedOnly, [in] VARIANT_BOOL MergeResults, [in] BSTR outputFilename, [in] VARIANT_BOOL Overwrite, [out, retval]VARIANT_BOOL* retVal);
    [id(57)] HRESULT ExplodeShapes([in] IShapefile* subject, [in] VARIANT_BOOL SelectedOnly, [in] BSTR outputFilename, [in] VARIANT_BOOL Overwrite, [out, retval] VARIANT_BOOL* retVal);
    [id(58)] HRESULT ExportSelection([in] IShapefile* subject, [in] BSTR outputFilename, [in] VARIANT_BOOL Overwrite, [out, retval] VARIANT_BOOL* retVal);
    [id(59), helpstring("method EPSGUnitConversion")] HRESULT EPSGUnitConversion([in] int EPSGUnitCode, [out, retval] tkUnitsOfMeasure* retVal);
    [id(60), helpstring("method GetNAD83ProjectionName")] HRESULT GetNAD83ProjectionName([in] tkNad83Projection projectionID, [out, retval] BSTR* retVal);
    [id(61), helpstring("method GetWGS84ProjectionName")] HRESULT GetWGS84ProjectionName([in] tkWgs84Projection projectionID, [out, retval] BSTR* retVal);
    [id(62), helpstring("method GetProjectionNameByID")] HRESULT GetProjectionNameByID([in] int SRID, [out, retval] BSTR* retVal);
    [id(63), helpstring("method GetProjectionList")] HRESULT GetProjectionList([in] tkProjectionSet projectionSets, [in, out] VARIANT* list, [out, retval] VARIANT_BOOL* retVal);
    [id(64), helpstring("method GetAngle")] HRESULT GetAngle([in] IPoint* firstPoint, [in] IPoint* secondPoint, [out, retval] double* retVal);
    [id(65), helpstring("method LineInterpolatePoint")] HRESULT LineInterpolatePoint([in] IShape* sourceLine, [in] IPoint* startPoint, [in] double distance, [in, defaultvalue(0)] VARIANT_BOOL normalized, [out, retval] IPoint **retVal);
    [id(66), helpstring("method LineProjectDistanceTo")] HRESULT LineProjectDistanceTo([in] IShape* sourceLine, [in] IShape* referenceShape, [out, retval] double* distance);
};

/****************************  Vector Interface ***********************/
[
    object,
    uuid(C60625AB-AD4C-405E-8CA2-62E36E4B3F73),
    dual,
    nonextensible,
    helpstring("IVector Interface"),
    pointer_default(unique)
]
interface IVector : IDispatch {
    [propget, id(1), helpstring("property i")] HRESULT i([out, retval] double *pVal);
    [propput, id(1), helpstring("property i")] HRESULT i([in] double newVal);
    [propget, id(2), helpstring("property j")] HRESULT j([out, retval] double *pVal);
    [propput, id(2), helpstring("property j")] HRESULT j([in] double newVal);
    [propget, id(3), helpstring("property k")] HRESULT k([out, retval] double *pVal);
    [propput, id(3), helpstring("property k")] HRESULT k([in] double newVal);
    [id(4), helpstring("method Normalize")] HRESULT Normalize();
    [id(5), helpstring("method Dot")] HRESULT Dot([in] IVector* V, [out, retval] double* result);
    [id(6), helpstring("method CrossProduct")] HRESULT CrossProduct([in] IVector* V, [out, retval] IVector ** result);
    [propget, id(7), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(8), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(10), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(10), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
};
/************************************  GridColorScheme Interface  ********************************/
[
    object,
    uuid(1C43B56D-2065-4953-9138-31AFE8470FF5),
    dual,
    nonextensible,
    helpstring("IGridColorScheme Interface"),
    pointer_default(unique)
]
interface IGridColorScheme : IDispatch {
    [propget, id(1), helpstring("property NumBreaks")] HRESULT NumBreaks([out, retval] long *pVal);
    [propget, id(2), helpstring("property AmbientIntensity")] HRESULT AmbientIntensity([out, retval] double *pVal);
    [propput, id(2), helpstring("property AmbientIntensity")] HRESULT AmbientIntensity([in] double newVal);
    [propget, id(3), helpstring("property LightSourceIntensity")] HRESULT LightSourceIntensity([out, retval] double *pVal);
    [propput, id(3), helpstring("property LightSourceIntensity")] HRESULT LightSourceIntensity([in] double newVal);
    [propget, id(4), helpstring("property LightSourceAzimuth")] HRESULT LightSourceAzimuth([out, retval] double *pVal);
    [propget, id(5), helpstring("property LightSourceElevation")] HRESULT LightSourceElevation([out, retval] double *pVal);
    [id(6), helpstring("method SetLightSource")] HRESULT SetLightSource([in] double Azimuth, [in] double Elevation);
    [id(7), helpstring("method InsertBreak")] HRESULT InsertBreak([in] IGridColorBreak* BrkInfo);
    [propget, id(8), helpstring("property Break")] HRESULT Break([in] long Index, [out, retval] IGridColorBreak ** pVal);
    [id(9), helpstring("method DeleteBreak")] HRESULT DeleteBreak([in] long Index);
    [id(10), helpstring("method Clear")] HRESULT Clear();
    [propget, id(11), helpstring("property NoDataColor")] HRESULT NoDataColor([out, retval] OLE_COLOR *pVal);
    [propput, id(11), helpstring("property NoDataColor")] HRESULT NoDataColor([in] OLE_COLOR newVal);
    [id(12), helpstring("method UsePredefined")] HRESULT UsePredefined([in] double LowValue, [in] double HighValue, [in, defaultvalue(SummerMountains)] PredefinedColorScheme Preset);
    [id(13), helpstring("method GetLightSource")] HRESULT GetLightSource([out, retval] IVector ** result);
    [propget, id(14), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(15), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(16), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(16), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(17), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(17), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(18), helpstring("method InsertAt")] HRESULT InsertAt([in] int Position, [in] IGridColorBreak *Break);
    [id(19), helpstring("property Serialize")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(20), helpstring("property Deserialize")] HRESULT Deserialize([in]BSTR newVal);
    [id(21), helpstring("property ReadFromFile")] HRESULT ReadFromFile([in]BSTR mwlegFilename, [in, defaultvalue("GridColoringScheme")]BSTR nodeName, [out, retval]VARIANT_BOOL* retVal);
    [id(22), helpstring("property WriteToFile")] HRESULT WriteToFile([in]BSTR mwlegFilename, [in, defaultvalue("")]BSTR gridName, [in, defaultvalue(1)]int bandIndex, [out, retval]VARIANT_BOOL* retVal);
    [id(23), helpstring("property ApplyColoringType")] HRESULT ApplyColoringType([in]ColoringType coloringType);
    [id(24), helpstring("property ApplyGradientModel")] HRESULT ApplyGradientModel([in]GradientModel gradientModel);
    [id(25)] HRESULT ApplyColors([in] tkColorSchemeType schemeType, [in] IColorScheme* scheme,
        [in] VARIANT_BOOL gradientWithinCategories, [out, retval] VARIANT_BOOL* retVal);
};

/************************************  GridColorBreak Interface  ********************************/

[
    object,
    uuid(1C6ECF5D-04FA-43C4-97B1-22D5FFB55FBD),
    dual,
    nonextensible,
    helpstring("IGridColorBreak Interface"),
    pointer_default(unique)
]
interface IGridColorBreak : IDispatch {
    [propget, id(1), helpstring("property HighColor")] HRESULT HighColor([out, retval] OLE_COLOR *pVal);
    [propput, id(1), helpstring("property HighColor")] HRESULT HighColor([in] OLE_COLOR newVal);
    [propget, id(2), helpstring("property LowColor")] HRESULT LowColor([out, retval] OLE_COLOR *pVal);
    [propput, id(2), helpstring("property LowColor")] HRESULT LowColor([in] OLE_COLOR newVal);
    [propget, id(3), helpstring("property HighValue")] HRESULT HighValue([out, retval] double *pVal);
    [propput, id(3), helpstring("property HighValue")] HRESULT HighValue([in] double newVal);
    [propget, id(4), helpstring("property LowValue")] HRESULT LowValue([out, retval] double *pVal);
    [propput, id(4), helpstring("property LowValue")] HRESULT LowValue([in] double newVal);
    [propget, id(5), helpstring("property ColoringType")] HRESULT ColoringType([out, retval] ColoringType *pVal);
    [propput, id(5), helpstring("property ColoringType")] HRESULT ColoringType([in] ColoringType newVal);
    [propget, id(6), helpstring("property GradientModel")] HRESULT GradientModel([out, retval] GradientModel *pVal);
    [propput, id(6), helpstring("property GradientModel")] HRESULT GradientModel([in] GradientModel newVal);
    [propget, id(7), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(8), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(10), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(10), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [propget, id(11), helpstring("property Caption")] HRESULT Caption([out, retval] BSTR* pVal);
    [propput, id(11), helpstring("property Caption")] HRESULT Caption([in] BSTR newVal);
    [propget, id(12)] HRESULT Visible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(12)] HRESULT Visible([in] VARIANT_BOOL newVal);
};

/************************************  Tin Interface  ********************************/
[
    object,
    uuid(55DD824E-332E-41CA-B40C-C8DC81EE209C),
    dual,
    nonextensible,
    helpstring("ITin Interface"),
    pointer_default(unique)
]
interface ITin : IDispatch {
    [id(1), helpstring("method Open")] HRESULT Open([in] BSTR TinFile, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(2), helpstring("method CreateNew")] HRESULT CreateNew([in] IGrid* Grid, [in] double Deviation, [in] SplitMethod SplitTest, [in] double STParam, [in] long MeshDivisions, [in, defaultvalue(1073741824)] long MaximumTriangles, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(3), helpstring("method Save")] HRESULT Save([in] BSTR TinFilename, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval] VARIANT_BOOL* retval);
    [id(4), helpstring("method Close")] HRESULT Close([out, retval] VARIANT_BOOL* retval);
    [id(5), helpstring("method Select")] HRESULT Select([in, out] long* TriangleHint, [in] double X, [in] double Y, [out] double* Z, [out, retval] VARIANT_BOOL* retval);
    [propget, id(6), helpstring("property NumTriangles")] HRESULT NumTriangles([out, retval] long *pVal);
    [propget, id(7), helpstring("property NumVertices")] HRESULT NumVertices([out, retval] long *pVal);
    [propget, id(8), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(9), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(10), helpstring("property CdlgFilter")] HRESULT CdlgFilter([out, retval] BSTR *pVal);
    [propget, id(11), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(11), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(12), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(12), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(13), helpstring("method Triangle")] HRESULT Triangle([in] long TriIndex, [out] long* vtx1Index, [out] long* vtx2Index, [out] long* vtx3Index);
    [id(14), helpstring("method Vertex")] HRESULT Vertex([in] long VtxIndex, [out] double* X, [out] double* Y, [out] double* Z);
    [id(15), helpstring("method Max")] HRESULT Max([out] double* X, [out] double* Y, [out] double* Z);
    [id(16), helpstring("method Min")] HRESULT Min([out] double* X, [out] double* Y, [out] double* Z);
    [propget, id(17), helpstring("property Filename")] HRESULT Filename([out, retval] BSTR *pVal);
    [propget, id(18), helpstring("property IsNDTriangle")] HRESULT IsNDTriangle([in] long TriIndex, [out, retval] VARIANT_BOOL *pVal);
    [id(19), helpstring("method TriangleNeighbors")] HRESULT TriangleNeighbors([in] long TriIndex, [in, out] long* triIndex1, [in, out] long* triIndex2, [in, out] long* triIndex3);
    midl_pragma warning(disable:2456)
        // this function passes a SAFEARRAY of pointers to interfaces, and the warning 
        // would indicate that this cannot work.  It is unclear if anyone is using this
        // function, and it cannot reasonably be changed without breaking the interface.
        // we have chosen to disable this warning for now, and only for this function.
        // any new functions will still raise the warning, and hopefully be corrected.
        [id(20), helpstring("method CreateTinFromPoints")] HRESULT CreateTinFromPoints([in] SAFEARRAY(IPoint*) Points, [out, retval] VARIANT_BOOL* retval);
    midl_pragma warning(enable:2456)
};
/**************************  ShapeDrawingOptions Interface  ***************************/
[
    object,
    uuid(7399B752-61D9-4A23-973F-1033431DD009),
    dual,
    nonextensible,
    helpstring("IShapeDrawingOptions Interface"),
    pointer_default(unique)
]
interface IShapeDrawingOptions : IDispatch {
    // draw flags
    [propget, id(1), helpstring("property FillVisible")] HRESULT FillVisible([out, retval] VARIANT_BOOL *pVal);
    [propput, id(1), helpstring("property FillVisible")] HRESULT FillVisible([in] VARIANT_BOOL newVal);
    [propget, id(2), helpstring("property LineVisible")] HRESULT LineVisible([out, retval] VARIANT_BOOL *pVal);
    [propput, id(2), helpstring("property LineVisible")] HRESULT LineVisible([in] VARIANT_BOOL newVal);
    [propget, id(3), helpstring("property LineTransparency")] HRESULT LineTransparency([out, retval] float *pVal);
    [propput, id(3), helpstring("property LineTransparency")] HRESULT LineTransparency([in] float newVal);
    // colors
    [propget, id(4), helpstring("property FillColor")] HRESULT FillColor([out, retval] OLE_COLOR *pVal);
    [propput, id(4), helpstring("property FillColor")] HRESULT FillColor([in] OLE_COLOR newVal);
    [propget, id(5), helpstring("property LineColor")] HRESULT LineColor([out, retval] OLE_COLOR *pVal);
    [propput, id(5), helpstring("property LineColor")] HRESULT LineColor([in] OLE_COLOR newVal);

    [propget, id(6), helpstring("property DrawingMode")] HRESULT DrawingMode([out, retval] tkVectorDrawingMode *pVal);
    [propput, id(6), helpstring("property DrawingMode")] HRESULT DrawingMode([in] tkVectorDrawingMode newVal);

    // stipples
    [propget, id(7), helpstring("property FillHatchStyle")] HRESULT FillHatchStyle([out, retval] tkGDIPlusHatchStyle *pVal);
    [propput, id(7), helpstring("property FillHatchStyle")] HRESULT FillHatchStyle([in] tkGDIPlusHatchStyle newVal);
    [propget, id(8), helpstring("property LineStipple")] HRESULT LineStipple([out, retval] tkDashStyle *pVal);
    [propput, id(8), helpstring("property LineStipple")] HRESULT LineStipple([in] tkDashStyle newVal);
    [propget, id(9), helpstring("property PointShape")] HRESULT PointShape([out, retval] tkPointShapeType *pVal);
    [propput, id(9), helpstring("property PointShape")] HRESULT PointShape([in] tkPointShapeType newVal);
    // size, width, transparency
    [propget, id(10), helpstring("property FillTransparency")] HRESULT FillTransparency([out, retval] float *pVal);
    [propput, id(10), helpstring("property FillTransparency")] HRESULT FillTransparency([in] float newVal);
    [propget, id(11), helpstring("property LineWidth")] HRESULT LineWidth([out, retval] float *pVal);
    [propput, id(11), helpstring("property LineWidth")] HRESULT LineWidth([in] float newVal);
    [propget, id(12), helpstring("property PointSize")] HRESULT PointSize([out, retval] float *pVal);
    [propput, id(12), helpstring("property PointSize")] HRESULT PointSize([in] float newVal);
    // stipple transparency and color
    [propget, id(13), helpstring("property FillBgTransparent")] HRESULT FillBgTransparent([out, retval] VARIANT_BOOL *pVal);
    [propput, id(13), helpstring("property FillBgTransparent")] HRESULT FillBgTransparent([in] VARIANT_BOOL newVal);
    [propget, id(14), helpstring("property FillBgColor")] HRESULT FillBgColor([out, retval] OLE_COLOR *pVal);
    [propput, id(14), helpstring("property FillBgColor")] HRESULT FillBgColor([in] OLE_COLOR newVal);
    // raster fill
    [propget, id(15), helpstring("property Picture")] HRESULT Picture([out, retval] IImage** pVal);
    [propput, id(15), helpstring("property Picture")] HRESULT Picture([in] IImage* newValue);
    [propget, id(16), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
    [propput, id(16), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);

    [propget, id(17), helpstring("property FillType")] HRESULT FillType([out, retval] tkFillType* pVal);
    [propput, id(17), helpstring("property FillType")] HRESULT FillType([in] tkFillType newValue);
    [propget, id(18), helpstring("property FillGradientType")] HRESULT FillGradientType([out, retval] tkGradientType* pVal);
    [propput, id(18), helpstring("property FillGradientType")] HRESULT FillGradientType([in] tkGradientType newVal);
    [propget, id(19), helpstring("property PointType")] HRESULT PointType([out, retval] tkPointSymbolType* pVal);
    [propput, id(19), helpstring("property PointType")] HRESULT PointType([in] tkPointSymbolType newVal);

    [propget, id(20), helpstring("property FillColor2")] HRESULT FillColor2([out, retval] OLE_COLOR *pVal);
    [propput, id(20), helpstring("property FillColor2")] HRESULT FillColor2([in] OLE_COLOR newVal);

    [propget, id(21), helpstring("property PointRotation")] HRESULT PointRotation([out, retval] double *pVal);
    [propput, id(21), helpstring("property PointRotation")] HRESULT PointRotation([in] double newVal);

    [propget, id(22), helpstring("property PointSidesCount")] HRESULT PointSidesCount([out, retval] long *pVal);
    [propput, id(22), helpstring("property PointSidesCount")] HRESULT PointSidesCount([in] long newVal);

    [propget, id(23), helpstring("property PointSidesRatio")] HRESULT PointSidesRatio([out, retval] float *pVal);
    [propput, id(23), helpstring("property PointSidesRatio")] HRESULT PointSidesRatio([in] float newVal);

    [propget, id(24), helpstring("property FillRotation")] HRESULT FillRotation([out, retval] double *pVal);
    [propput, id(24), helpstring("property FillRotation")] HRESULT FillRotation([in] double newVal);

    [propget, id(25), helpstring("property FillGradientBounds")] HRESULT FillGradientBounds([out, retval] tkGradientBounds *pVal);
    [propput, id(25), helpstring("property FillGradientBounds")] HRESULT FillGradientBounds([in] tkGradientBounds newVal);

    [propget, id(26), helpstring("property PictureScaleX")] HRESULT PictureScaleX([out, retval] double *pVal);
    [propput, id(26), helpstring("property PictureScaleX")] HRESULT PictureScaleX([in] double newVal);

    [propget, id(27), helpstring("property PictureScaleY")] HRESULT PictureScaleY([out, retval] double *pVal);
    [propput, id(27), helpstring("property PictureScaleY")] HRESULT PictureScaleY([in] double newVal);

    [id(28), helpstring("method DrawShape")] HRESULT DrawShape([in]int hdc, [in]float x, [in]float y, [in]IShape* shape, [in]VARIANT_BOOL drawVertices,
        [in]int clipWidth, [in]int clipHeight,
        [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha,
        [out, retval] VARIANT_BOOL* retVal);

    [propget, id(29), helpstring("property PointCharacter")] HRESULT PointCharacter([out, retval] short *pVal);
    [propput, id(29), helpstring("property PointCharacter")] HRESULT PointCharacter([in] short newVal);

    [propget, id(30), helpstring("property FontName")] HRESULT FontName([out, retval] BSTR* pVal);
    [propput, id(30), helpstring("property FontName")] HRESULT FontName([in] BSTR newVal);

    [id(31), helpstring("method Clone")] HRESULT Clone([out, retval]IShapeDrawingOptions** retval);

    [propget, id(32), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(33), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);

    [id(34), helpstring("method DrawRectangle")] HRESULT DrawRectangle([in]int hdc, [in]float x, [in]float y, [in]int width, [in]int height, [in]VARIANT_BOOL drawVertices,
        [in, defaultvalue(0)]int clipWidth, [in, defaultvalue(0)]int clipHeight,
        [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha,
        [out, retval] VARIANT_BOOL* retVal);

    [id(35), helpstring("method DrawPoint")] HRESULT DrawPoint([in]int hdc, [in]float x, [in]float y,
        [in, defaultvalue(0)]int clipWidth, [in, defaultvalue(0)]int clipHeight,
        [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha,
        [out, retval] VARIANT_BOOL* retVal);

    [propget, id(36), helpstring("property VerticesVisible")] HRESULT VerticesVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(36), helpstring("property VerticesVisible")] HRESULT VerticesVisible([in] VARIANT_BOOL newVal);
    [propget, id(37), helpstring("property VerticesType")] HRESULT VerticesType([out, retval] tkVertexType* pVal);
    [propput, id(37), helpstring("property VerticesType")] HRESULT VerticesType([in] tkVertexType newVal);
    [propget, id(38), helpstring("property VerticesColor")] HRESULT VerticesColor([out, retval] OLE_COLOR* pVal);
    [propput, id(38), helpstring("property VerticesColor")] HRESULT VerticesColor([in] OLE_COLOR newVal);
    [propget, id(39), helpstring("property VerticesSize")] HRESULT VerticesSize([out, retval] LONG* pVal);
    [propput, id(39), helpstring("property VerticesSize")] HRESULT VerticesSize([in] LONG newVal);
    [propget, id(40), helpstring("property VerticesFillVisible")] HRESULT VerticesFillVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(40), helpstring("property VerticesFillVisible")] HRESULT VerticesFillVisible([in] VARIANT_BOOL newVal);

    [id(45), helpstring("method DrawLine")] HRESULT DrawLine([in]int hdc, [in]float x, [in]float y, [in]int width, [in]int height, [in]VARIANT_BOOL drawVertices,
        [in]int clipWidth, [in]int clipHeight,
        [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha,
        [out, retval] VARIANT_BOOL* retVal);

    [propget, id(46), helpstring("property LinePattern")] HRESULT LinePattern([out, retval] ILinePattern** pVal);
    [propput, id(46), helpstring("property LinePattern")] HRESULT LinePattern([in] ILinePattern* newVal);
    [propget, id(47), helpstring("property Tag")] HRESULT Tag([out, retval] BSTR* retVal);
    [propput, id(47), helpstring("property Tag")] HRESULT Tag([in] BSTR newVal);
    [id(48), helpstring("method SetGradientFill")] HRESULT SetGradientFill([in]OLE_COLOR color, [in]short range);

    [id(50), helpstring("method SetDefaultPointSymbol")] HRESULT SetDefaultPointSymbol([in] tkDefaultPointSymbol symbol);

    [propget, id(51), helpstring("property UseLinePattern")] HRESULT UseLinePattern([out, retval] VARIANT_BOOL* retVal);
    [propput, id(51), helpstring("property UseLinePattern")] HRESULT UseLinePattern([in] VARIANT_BOOL newVal);

    [id(52), helpstring("property Serialize")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(53), helpstring("property Deserialize")] HRESULT Deserialize([in]BSTR newVal);

    //[id(54), helpstring("method DrawPointVB")] HRESULT DrawPointVB([in]int hdc, [in]float x, [in]float y, 
    //															   [in, defaultvalue(0)] int clipWidth, [in, defaultvalue(0)] int clipHeight,  
    //															   [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha, 
    //															   [out, retval] VARIANT_BOOL* retVal);

    //[id(55), helpstring("method DrawLineVB")] HRESULT DrawLineVB([in]int hdc, [in]float x, [in]float y, [in]int width, [in]int height,
    //															 [in]VARIANT_BOOL drawVertices,														 
    //															 [in] int clipWidth, [in] int clipHeight,
    //															 [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha, 
    //															 [out, retval] VARIANT_BOOL* retVal);
    //
    //[id(56), helpstring("method DrawRectangleVB")] HRESULT DrawRectangleVB([in] int hdc, [in] float x, [in] float y, [in] int width, [in] int height,
    //													   [in] VARIANT_BOOL drawVertices, 
    //													   [in, defaultvalue(0)] int clipWidth, [in, defaultvalue(0)] int clipHeight,   
    //													   [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha, 
    //													   [out, retval] VARIANT_BOOL* retVal);
    //
    //[id(57), helpstring("method DrawShapeVB")] HRESULT DrawShapeVB([in]int hdc, [in]float x, [in]float y, [in]IShape* shape,
    //													   [in]VARIANT_BOOL drawVertices, 
    //													   [in] int clipWidth, [in] int clipHeight,   
    //													   [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha, 
    //													   [out, retval] VARIANT_BOOL* retVal);

    [propget, id(58), helpstring("property DynamicVisibility")] HRESULT DynamicVisibility([out, retval]VARIANT_BOOL* retval);
    [propput, id(58), helpstring("property DynamicVisibility")] HRESULT DynamicVisibility([in]VARIANT_BOOL newVal);

    [propget, id(59), helpstring("property MaxVisibleScale")] HRESULT MaxVisibleScale([out, retval]double* retval);
    [propput, id(59), helpstring("property MaxVisibleScale")] HRESULT MaxVisibleScale([in]double newVal);

    [propget, id(60), helpstring("property MinVisibleScale")] HRESULT MinVisibleScale([out, retval]double* retval);
    [propput, id(60), helpstring("property MinVisibleScale")] HRESULT MinVisibleScale([in]double newVal);

    [propget, id(62), helpstring("property AlignPictureByBottom")] HRESULT AlignPictureByBottom([out, retval] VARIANT_BOOL* pVal);
    [propput, id(62), helpstring("property AlignPictureByBottom")] HRESULT AlignPictureByBottom([in] VARIANT_BOOL newVal);

    [propget, id(63), helpstring("property FrameVisible")] HRESULT FrameVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(63), helpstring("property FrameVisible")] HRESULT FrameVisible([in] VARIANT_BOOL newVal);

    [propget, id(64), helpstring("property FrameType")] HRESULT FrameType([out, retval] tkLabelFrameType* pVal);
    [propput, id(64), helpstring("property FrameType")] HRESULT FrameType([in] tkLabelFrameType newVal);

    [propget, id(65), helpstring("property PointReflection")] HRESULT PointReflection([out, retval] tkPointReflectionType* pVal);
    [propput, id(65), helpstring("property PointReflection")] HRESULT PointReflection([in] tkPointReflectionType newVal);

    [propget, id(66), helpstring("property PointRotationExpression")] HRESULT PointRotationExpression([out, retval] BSTR* pVal);
    [propput, id(66), helpstring("property PointRotationExpression")] HRESULT PointRotationExpression([in] BSTR newVal);

    [propget, id(67), helpstring("property MaxVisibleZoom")] HRESULT MaxVisibleZoom([out, retval]LONG* retval);
    [propput, id(67), helpstring("property MaxVisibleZoom")] HRESULT MaxVisibleZoom([in]LONG newVal);

    [propget, id(68), helpstring("property MinVisibleZoom")] HRESULT MinVisibleZoom([out, retval]LONG* retval);
    [propput, id(68), helpstring("property MinVisibleZoom")] HRESULT MinVisibleZoom([in]LONG newVal);
};

// ***********************************  Label Interface  **********************************
[
    object,
    uuid(4B341A36-CFA6-4421-9D08-FD5B06097307),
    dual,
    nonextensible,
    helpstring("ILabel Interface"),
    pointer_default(unique)
]
interface ILabel : IDispatch {
    [propget, id(1), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL* retval);
    [propput, id(1), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);

    [propget, id(2), helpstring("property Rotation")] HRESULT Rotation([out, retval] double* retval);
    [propput, id(2), helpstring("property Rotation")] HRESULT Rotation([in] double newVal);

    [propget, id(3), helpstring("property Text")] HRESULT Text([out, retval] BSTR* retval);
    [propput, id(3), helpstring("property Text")] HRESULT Text([in] BSTR newVal);

    [propget, id(4), helpstring("property X")] HRESULT X([out, retval] double* retval);
    [propput, id(4), helpstring("property X")] HRESULT X([in] double newVal);

    [propget, id(5), helpstring("property Y")] HRESULT Y([out, retval] double* retval);
    [propput, id(5), helpstring("property Y")] HRESULT Y([in] double newVal);

    [propget, id(6), helpstring("property IsDrawn")] HRESULT IsDrawn([out, retval] VARIANT_BOOL* retval);

    [propget, id(7), helpstring("property Category")] HRESULT Category([out, retval] long* retval);
    [propput, id(7), helpstring("property Category")] HRESULT Category([in] long newVal);

    [propget, id(8), helpstring("property ScreenExtents")] HRESULT ScreenExtents([out, retval] IExtents** retval);

    [propget, id(9), helpstring("property OffsetX")] HRESULT OffsetX([out, retval] double* retval);
    [propput, id(9), helpstring("property OffsetX")] HRESULT OffsetX([in] double newVal);

    [propget, id(10), helpstring("property OffsetY")] HRESULT OffsetY([out, retval] double* retval);
    [propput, id(10), helpstring("property OffsetY")] HRESULT OffsetY([in] double newVal);
};

// ***********************************  Labels Interface  ******************************* 
[
    object,
    uuid(A73AF37E-3A6A-4532-B48F-FA53309FA117),
    dual,
    nonextensible,
    helpstring("ILabels Interface"),
    pointer_default(unique)
]
interface ILabels : IDispatch {
    [propget, id(1), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(2), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(3), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(3), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(4), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(4), helpstring("property Key")] HRESULT Key([in] BSTR newVal);

    [propget, id(5), helpstring("property VerticalPosition")] HRESULT VerticalPosition([out, retval] tkVerticalPosition* retval);
    [propput, id(5), helpstring("property VerticalPosition")] HRESULT VerticalPosition([in] tkVerticalPosition newVal);
    [propget, id(6), helpstring("property Category")] HRESULT Category([in]long Index, [out, retval]ILabelCategory** pVal);
    [propput, id(6), helpstring("property Category")] HRESULT Category([in]long Index, [in]ILabelCategory* newVal);

    // methods
    [id(7), helpstring("method AddLabel")] HRESULT AddLabel([in]BSTR Text, [in]double x, [in]double y, [in, defaultvalue(0)]double Rotation, [in, defaultvalue(-1)]long Category, [in, defaultvalue(0)]double offsetX, [in, defaultvalue(0)]double offsetY);
    [id(8), helpstring("method InsertLabel")] HRESULT InsertLabel([in]long Index, [in]BSTR Text, [in]double x, [in]double y, [in, defaultvalue(0)]double Rotation, [in, defaultvalue(-1)]long Category, [in, defaultvalue(0)]double offsetX, [in, defaultvalue(0)]double offsetY, [out, retval]VARIANT_BOOL* retval);
    [id(9), helpstring("method RemoveLabel")] HRESULT RemoveLabel([in]long Index, [out, retval]VARIANT_BOOL* retval);

    [id(10), helpstring("method AddPart")] HRESULT AddPart([in] long Index, [in]BSTR Text, [in]double x, [in]double y, [in, defaultvalue(0)]double Rotation, [in, defaultvalue(-1)]long Category, [in, defaultvalue(0)]double offsetX, [in, defaultvalue(0)]double offsetY);
    [id(11), helpstring("method InsertPart")] HRESULT InsertPart([in] long Index, [in] long Part, [in]BSTR Text, [in]double x, [in]double y, [in, defaultvalue(0)]double Rotation, [in, defaultvalue(-1)]long Category, [in, defaultvalue(0)]double offsetX, [in, defaultvalue(0)]double offsetY, [out, retval]VARIANT_BOOL* retval);
    [id(12), helpstring("method RemovePart")] HRESULT RemovePart([in]long Index, [in]long Part, [out, retval]VARIANT_BOOL* vbretval);

    [id(13), helpstring("method AddCategory")] HRESULT AddCategory([in]BSTR Name, [out, retval]ILabelCategory** retVal);
    [id(14), helpstring("method InsertCategory")] HRESULT InsertCategory([in] long Index, [in]BSTR Name, [out, retval]ILabelCategory** retVal);
    [id(15), helpstring("method RemoveCategory")] HRESULT RemoveCategory([in] long Index, [out, retval] VARIANT_BOOL* vbretval);

    [id(16), helpstring("method ClearAllLabels")] HRESULT Clear();
    [id(17), helpstring("method ClearAllCategories")] HRESULT ClearCategories();

    /*[id(18), helpstring("method SetRandomColors")] HRESULT SetRandomColors(tkLabelElements Element,
                                                                           [in,defaultvalue(0)]long MinRed, [in,defaultvalue(0)]long MinGreen,
                                                                           [in,defaultvalue(0)]long MinBlue, [in,defaultvalue(255)]long MaxRed,
                                                                           [in,defaultvalue(255)]long MaxGreen, [in,defaultvalue(255)]long MaxBlue);
    [id(19), helpstring("method SetGraduatedColors")] HRESULT SetGraduatedColors([in]tkLabelElements Element, [in]OLE_COLOR ColorStart, [in]OLE_COLOR ColorEnd, [in, defaultvalue(0)] VARIANT_BOOL ByCategoryIndex);*/
    midl_pragma warning(disable:2402)
        // function effectively requires the LabelIndices and PartIndices parameters, 
        // they were made optional only because they follow other optional parameters, 
        // and cannot reasonably be changed without breaking the interface.
        // this pragma disables the warning only for this (and similar) functions.
        [id(20), helpstring("method Select")] HRESULT Select([in]IExtents* BoundingBox, [in, defaultvalue(0)]long Tolerance, [in, defaultvalue(INTERSECTION)]SelectMode SelectMode, [in, optional, out]VARIANT* LabelIndices, [in, optional, out]VARIANT* PartIndices, [out, retval]VARIANT_BOOL* retval);
    midl_pragma warning(enable:2402)

        // class specific properties
        [propget, id(21), helpstring("property NumLabels")] HRESULT Count([out, retval] long* pVal);
    [propget, id(22), helpstring("property NumParts")] HRESULT NumParts([in]long Index, [out, retval] long* pVal);
    [propget, id(23), helpstring("property NumCategories")] HRESULT NumCategories([out, retval] long* pVal);

    [propget, id(24), helpstring("property Label")] HRESULT Label([in]long Index, [in]long Part, [out, retval] ILabel** pVal);
    //[propput, id(24), helpstring("property Label")] HRESULT Label([in]long Index, [in]long Part, [in] ILabel* newVal);

    [propget, id(25), helpstring("property Synchronized")] HRESULT Synchronized([out, retval] VARIANT_BOOL* retval);
    [propput, id(25), helpstring("property Synchronized")] HRESULT Synchronized([in] VARIANT_BOOL newVal);

    [propget, id(26), helpstring("property ScaleLabels")] HRESULT ScaleLabels([out, retval] VARIANT_BOOL* retval);
    [propput, id(26), helpstring("property ScaleLabels")] HRESULT ScaleLabels([in] VARIANT_BOOL newVal);

    [propget, id(27), helpstring("property BasicScale")] HRESULT BasicScale([out, retval] double* retval);
    [propput, id(27), helpstring("property BasicScale")] HRESULT BasicScale([in] double newVal);

    [propget, id(28), helpstring("property MaxVisibleScale")] HRESULT MaxVisibleScale([out, retval]double* retval);
    [propput, id(28), helpstring("property MaxVisibleScale")] HRESULT MaxVisibleScale([in]double newVal);

    [propget, id(29), helpstring("property MinVisibleScale")] HRESULT MinVisibleScale([out, retval]double* retval);
    [propput, id(29), helpstring("property MinVisibleScale")] HRESULT MinVisibleScale([in]double newVal);

    [propget, id(30), helpstring("property DynamicVisibility")] HRESULT DynamicVisibility([out, retval]VARIANT_BOOL* retval);
    [propput, id(30), helpstring("property DynamicVisibility")] HRESULT DynamicVisibility([in]VARIANT_BOOL newVal);

    [propget, id(31), helpstring("property AvoidCollisions")] HRESULT AvoidCollisions([out, retval]VARIANT_BOOL* retval);
    [propput, id(31), helpstring("property AvoidCollisions")] HRESULT AvoidCollisions([in]VARIANT_BOOL newVal);

    [propget, id(32), helpstring("property CollisionBuffer")] HRESULT CollisionBuffer([out, retval]long* retval);
    [propput, id(32), helpstring("property CollisionBuffer")] HRESULT CollisionBuffer([in]long newVal);

    [propget, id(33), helpstring("property UseWidthLimits")] HRESULT UseWidthLimits([out, retval]VARIANT_BOOL* retval);
    [propput, id(33), helpstring("property UseWidthLimits")] HRESULT UseWidthLimits([in]VARIANT_BOOL newVal);

    [propget, id(34), helpstring("property RemoveDuplicates")] HRESULT RemoveDuplicates([out, retval]VARIANT_BOOL* retval);
    [propput, id(34), helpstring("property RemoveDuplicates")] HRESULT RemoveDuplicates([in]VARIANT_BOOL newVal);

    [propget, id(35), helpstring("property UseGdiPlus")] HRESULT UseGdiPlus([out, retval]VARIANT_BOOL* retval);
    [propput, id(35), helpstring("property UseGdiPlus")] HRESULT UseGdiPlus([in]VARIANT_BOOL newVal);

    // Properties common for CLabels and CLabelCategory
    [propget, id(36), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL* retval);
    [propput, id(36), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);

    // position
    [propget, id(37), helpstring("property OffsetX")] HRESULT OffsetX([out, retval] double* retval);
    [propput, id(37), helpstring("property OffsetX")] HRESULT OffsetX([in] double newVal);
    [propget, id(38), helpstring("property OffsetY")] HRESULT OffsetY([out, retval] double* retval);
    [propput, id(38), helpstring("property OffsetY")] HRESULT OffsetY([in] double newVal);
    [propget, id(39), helpstring("property Alignment")] HRESULT Alignment([out, retval] tkLabelAlignment* retval);
    [propput, id(39), helpstring("property Alignment")] HRESULT Alignment([in] tkLabelAlignment newVal);
    [propget, id(40), helpstring("property LineOrientation")] HRESULT LineOrientation([out, retval]tkLineLabelOrientation* retval);
    [propput, id(40), helpstring("property LineOrientation")] HRESULT LineOrientation([in]tkLineLabelOrientation newVal);

    // font
    [propget, id(41), helpstring("property FontName")] HRESULT FontName([out, retval] BSTR* retval);
    [propput, id(41), helpstring("property FontName")] HRESULT FontName([in] BSTR newVal);
    [propget, id(42), helpstring("property FontSize")] HRESULT FontSize([out, retval] long* retval);
    [propput, id(42), helpstring("property FontSize")] HRESULT FontSize([in] long newVal);
    [propget, id(43), helpstring("property FontItalic")] HRESULT FontItalic([out, retval] VARIANT_BOOL* retval);
    [propput, id(43), helpstring("property FontItalic")] HRESULT FontItalic([in] VARIANT_BOOL newVal);
    [propget, id(44), helpstring("property FontBold")] HRESULT FontBold([out, retval] VARIANT_BOOL* retval);
    [propput, id(44), helpstring("property FontBold")] HRESULT FontBold([in] VARIANT_BOOL newVal);
    [propget, id(45), helpstring("property FontUnderline")] HRESULT FontUnderline([out, retval] VARIANT_BOOL* retval);
    [propput, id(45), helpstring("property FontUnderline")] HRESULT FontUnderline([in] VARIANT_BOOL newVal);
    [propget, id(46), helpstring("property FontStrikeOut")] HRESULT FontStrikeOut([out, retval] VARIANT_BOOL* retval);
    [propput, id(46), helpstring("property FontStrikeOut")] HRESULT FontStrikeOut([in] VARIANT_BOOL newVal);

    [propget, id(47), helpstring("property FontColor")] HRESULT FontColor([out, retval] OLE_COLOR* retval);
    [propput, id(47), helpstring("property FontColor")] HRESULT FontColor([in] OLE_COLOR newVal);
    [propget, id(48), helpstring("property FontColor2")] HRESULT FontColor2([out, retval] OLE_COLOR* retval);
    [propput, id(48), helpstring("property FontColor2")] HRESULT FontColor2([in] OLE_COLOR newVal);
    [propget, id(49), helpstring("property FontGradientMode")] HRESULT FontGradientMode([out, retval] tkLinearGradientMode* retval);
    [propput, id(49), helpstring("property FontGradientMode")] HRESULT FontGradientMode([in] tkLinearGradientMode newVal);
    [propget, id(50), helpstring("property FontTransparency")] HRESULT FontTransparency([out, retval] LONG* retval);
    [propput, id(50), helpstring("property FontTransparency")] HRESULT FontTransparency([in] LONG newVal);

    // outline
    [propget, id(51), helpstring("property FontOutlineVisible")] HRESULT FontOutlineVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(51), helpstring("property FontOutlineVisible")] HRESULT FontOutlineVisible([in] VARIANT_BOOL newVal);
    [propget, id(52), helpstring("property ShadowVisible")] HRESULT ShadowVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(52), helpstring("property ShadowVisible")] HRESULT ShadowVisible([in] VARIANT_BOOL newVal);
    [propget, id(53), helpstring("property HaloVisible")] HRESULT HaloVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(53), helpstring("property HaloVisible")] HRESULT HaloVisible([in] VARIANT_BOOL newVal);

    [propget, id(54), helpstring("property FontOutlineColor")] HRESULT FontOutlineColor([out, retval] OLE_COLOR* retval);
    [propput, id(54), helpstring("property FontOutlineColor")] HRESULT FontOutlineColor([in] OLE_COLOR newVal);
    [propget, id(55), helpstring("property ShadowColor")] HRESULT ShadowColor([out, retval] OLE_COLOR* retval);
    [propput, id(55), helpstring("property ShadowColor")] HRESULT ShadowColor([in] OLE_COLOR newVal);
    [propget, id(56), helpstring("property HaloColor")] HRESULT HaloColor([out, retval] OLE_COLOR* retval);
    [propput, id(56), helpstring("property HaloColor")] HRESULT HaloColor([in] OLE_COLOR newVal);

    [propget, id(57), helpstring("property FontOutlineWidth")] HRESULT FontOutlineWidth([out, retval] LONG* retval);
    [propput, id(57), helpstring("property FontOutlineWidth")] HRESULT FontOutlineWidth([in] LONG newVal);
    [propget, id(58), helpstring("property ShadowOffsetX")] HRESULT ShadowOffsetX([out, retval] LONG* retval);
    [propput, id(58), helpstring("property ShadowOffsetX")] HRESULT ShadowOffsetX([in] LONG newVal);
    [propget, id(59), helpstring("property ShadowOffsetY")] HRESULT ShadowOffsetY([out, retval] LONG* retval);
    [propput, id(59), helpstring("property ShadowOffsetY")] HRESULT ShadowOffsetY([in] LONG newVal);
    [propget, id(60), helpstring("property HaloSize")] HRESULT HaloSize([out, retval] LONG* retval);
    [propput, id(60), helpstring("property HaloSize")] HRESULT HaloSize([in] LONG newVal);

    // frame
    [propget, id(61), helpstring("property FrameType")] HRESULT FrameType([out, retval]tkLabelFrameType* retval);
    [propput, id(61), helpstring("property FrameType")] HRESULT FrameType([in]tkLabelFrameType newVal);
    [propget, id(62), helpstring("property FrameOutlineColor")] HRESULT FrameOutlineColor([out, retval]OLE_COLOR* retval);
    [propput, id(62), helpstring("property FrameOutlineColor")] HRESULT FrameOutlineColor([in]OLE_COLOR newVal);
    [propget, id(63), helpstring("property FrameBackColor")] HRESULT FrameBackColor([out, retval]OLE_COLOR* retval);
    [propput, id(63), helpstring("property FrameBackColor")] HRESULT FrameBackColor([in]OLE_COLOR newVal);
    [propget, id(64), helpstring("property FrameBackColor2")] HRESULT FrameBackColor2([out, retval]OLE_COLOR* retval);
    [propput, id(64), helpstring("property FrameBackColor2")] HRESULT FrameBackColor2([in]OLE_COLOR newVal);

    [propget, id(65), helpstring("property FrameGradientMode")] HRESULT FrameGradientMode([out, retval] tkLinearGradientMode* retval);
    [propput, id(65), helpstring("property FrameGradientMode")] HRESULT FrameGradientMode([in] tkLinearGradientMode newVal);
    [propget, id(66), helpstring("property FrameOutlineStyle")] HRESULT FrameOutlineStyle([out, retval] tkDashStyle* retval);
    [propput, id(66), helpstring("property FrameOutlineStyle")] HRESULT FrameOutlineStyle([in] tkDashStyle newVal);
    [propget, id(67), helpstring("property FrameOutlineWidth")] HRESULT FrameOutlineWidth([out, retval] LONG* retval);
    [propput, id(67), helpstring("property FrameOutlineWidth")] HRESULT FrameOutlineWidth([in] LONG newVal);

    [propget, id(68), helpstring("property FramePaddingX")] HRESULT FramePaddingX([out, retval] LONG* retval);
    [propput, id(68), helpstring("property FramePaddingX")] HRESULT FramePaddingX([in] LONG newVal);
    [propget, id(69), helpstring("property FramePaddingY")] HRESULT FramePaddingY([out, retval] LONG* retval);
    [propput, id(69), helpstring("property FramePaddingY")] HRESULT FramePaddingY([in] LONG newVal);
    [propget, id(70), helpstring("property FrameTransparency")] HRESULT FrameTransparency([out, retval] LONG* retval);
    [propput, id(70), helpstring("property FrameTransparency")] HRESULT FrameTransparency([in] LONG newVal);

    [propget, id(71), helpstring("property InboxAlignment")] HRESULT InboxAlignment([out, retval] tkLabelAlignment* retval);
    [propput, id(71), helpstring("property InboxAlignment")] HRESULT InboxAlignment([in] tkLabelAlignment newVal);
    // End of Properties common for CLabels and CLabelCategory

    [propget, id(72), helpstring("property ClassificationField")] HRESULT ClassificationField([out, retval]long* FieldIndex);
    [propput, id(72), helpstring("property ClassificationField")] HRESULT ClassificationField([in]long FieldIndex);

    [id(73), helpstring("method GenerateCategories")] HRESULT GenerateCategories([in]long FieldIndex, [in]tkClassificationType ClassificationType, [in]long numClasses, [out, retval] VARIANT_BOOL* vbretval);
    [id(74), helpstring("method ApplyCategories")] HRESULT ApplyCategories();

    [propget, id(75), helpstring("property Options")] HRESULT Options([out, retval]ILabelCategory** retVal);
    [propput, id(75), helpstring("property Options")] HRESULT Options([in]ILabelCategory* newVal);

    [id(76), helpstring("method ApplyColorScheme")] HRESULT ApplyColorScheme([in]tkColorSchemeType Type, [in]IColorScheme* ColorScheme);
    [id(77), helpstring("method ApplyColorScheme2")] HRESULT ApplyColorScheme2([in]tkColorSchemeType Type, [in]IColorScheme* ColorScheme, [in]tkLabelElements Element);
    [id(78), helpstring("method ApplyColorScheme3")] HRESULT ApplyColorScheme3([in]tkColorSchemeType Type, [in]IColorScheme* ColorScheme,
        [in]tkLabelElements Element, [in]long CategoryStartIndex, [in]long CategoryEndIndex);

    [propget, id(79), helpstring("property FrameVisible")] HRESULT FrameVisible([out, retval]VARIANT_BOOL* retVal);
    [propput, id(79), helpstring("property FrameVisible")] HRESULT FrameVisible([in]VARIANT_BOOL newVal);

    [propget, id(80), helpstring("property VisibilityExpression")] HRESULT VisibilityExpression([out, retval]BSTR* retVal);
    [propput, id(80), helpstring("property VisibilityExpression")] HRESULT VisibilityExpression([in]BSTR newVal);

    [propget, id(81), helpstring("property MinDrawingSize")] HRESULT MinDrawingSize([out, retval]LONG* retVal);
    [propput, id(81), helpstring("property MinDrawingSize")] HRESULT MinDrawingSize([in]LONG newVal);

    [id(82), helpstring("property MoveCategoryUp")] HRESULT MoveCategoryUp([in]long Index, [out, retval]VARIANT_BOOL* retval);
    [id(83), helpstring("property MoveCategoryDown")] HRESULT MoveCategoryDown([in]long Index, [out, retval]VARIANT_BOOL* retval);

    [propget, id(84), helpstring("property AutoOffset")] HRESULT AutoOffset([out, retval]VARIANT_BOOL* retVal);
    [propput, id(84), helpstring("property AutoOffset")] HRESULT AutoOffset([in]VARIANT_BOOL newVal);

    [id(85), helpstring("property Serialize")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(86), helpstring("property Deserialize")] HRESULT Deserialize([in]BSTR newVal);

    [propget, id(87), helpstring("property Expression")] HRESULT Expression([out, retval]BSTR* retVal);
    [propput, id(87), helpstring("property Expression")] HRESULT Expression([in]BSTR newVal);

    [id(88), helpstring("method SaveToXML")] HRESULT SaveToXML([in]BSTR Filename, [out, retval]VARIANT_BOOL* retVal);
    [id(89), helpstring("method LoadFromXML")] HRESULT LoadFromXML([in]BSTR Filename, [out, retval]VARIANT_BOOL* retVal);

    [id(90), helpstring("method SaveToDbf")] HRESULT SaveToDbf([in, defaultvalue(0)] VARIANT_BOOL saveText,
        [in, defaultvalue(0)] VARIANT_BOOL saveCategory,
        [out, retval] VARIANT_BOOL* retVal);

    [id(91), helpstring("method SaveToDbf2")] HRESULT SaveToDbf2([in, defaultvalue("_LabelX")]BSTR xField,
        [in, defaultvalue("_LabelY")]BSTR yField,
        [in, defaultvalue("_LabelAngle")]BSTR angleField,
        [in, defaultvalue("_LabelText")]BSTR textField,
        [in, defaultvalue("_LabelCtg")]BSTR categoryField,
        [in, defaultvalue(0)] VARIANT_BOOL saveText,
        [in, defaultvalue(0)] VARIANT_BOOL saveCategory,
        [in, defaultvalue(0)] VARIANT_BOOL createFields,
        [out, retval] VARIANT_BOOL* retVal);

    [id(92), helpstring("method LoadFromDbf")] HRESULT LoadFromDbf([in, defaultvalue(0)] VARIANT_BOOL loadText,
        [in, defaultvalue(0)] VARIANT_BOOL loadCategory,
        [out, retval] VARIANT_BOOL* retVal);

    [id(93), helpstring("method LoadFromDbf2")] HRESULT LoadFromDbf2([in, defaultvalue("_LabelX")]BSTR xField,
        [in, defaultvalue("_LabelY")]BSTR yField,
        [in, defaultvalue("_LabelAngle")]BSTR angleField,
        [in, defaultvalue("_LabelText")]BSTR textField,
        [in, defaultvalue("_LabelCtg")]BSTR categoryField,
        [in, defaultvalue(0)] VARIANT_BOOL loadText,
        [in, defaultvalue(0)] VARIANT_BOOL loadCategory,
        [out, retval] VARIANT_BOOL* retVal);

    [id(94), helpstring("method Generate")] HRESULT Generate([in]BSTR Expression, [in]tkLabelPositioning Method, [in]VARIANT_BOOL LargestPartOnly, [out, retval]long* Count);

    [propget, id(95), helpstring("property SavingMode")] HRESULT SavingMode([out, retval]tkSavingMode* retVal);
    [propput, id(95), helpstring("property SavingMode")] HRESULT SavingMode([in]tkSavingMode newVal);
    [propget, id(96), helpstring("property Positioning")] HRESULT Positioning([out, retval] tkLabelPositioning* pVal);
    [propput, id(96), helpstring("property Positioning")] HRESULT Positioning([in] tkLabelPositioning newVal);
    [propget, id(97), helpstring("property TextRenderingHint")] HRESULT TextRenderingHint([out, retval] tkTextRenderingHint* pVal);
    [propput, id(97), helpstring("property TextRenderingHint")] HRESULT TextRenderingHint([in] tkTextRenderingHint newVal);
    [propget, id(98)] HRESULT FloatNumberFormat([out, retval] BSTR* pVal);
    [propput, id(98)] HRESULT FloatNumberFormat([in] BSTR newVal);
    [id(99), helpstring("Deprecated method ForceRecalculateExpression, use ILabels::ApplyLabelExpression instead")] HRESULT ForceRecalculateExpression();
    [propget, id(100)] HRESULT FontSize2([out, retval] LONG* pVal);
    [propput, id(100)] HRESULT FontSize2([in] LONG newVal);
    [propget, id(101)] HRESULT UseVariableSize([out, retval] VARIANT_BOOL* pVal);
    [propput, id(101)] HRESULT UseVariableSize([in] VARIANT_BOOL newVal);
    [propget, id(102)] HRESULT LogScaleForSize([out, retval] VARIANT_BOOL* pVal);
    [propput, id(102)] HRESULT LogScaleForSize([in] VARIANT_BOOL newVal);
    [id(103)] HRESULT UpdateSizeField();
    [propget, id(104)] HRESULT MinVisibleZoom([out, retval] LONG* pVal);
    [propput, id(104)] HRESULT MinVisibleZoom([in] LONG newVal);
    [propget, id(105)] HRESULT MaxVisibleZoom([out, retval] LONG* pVal);
    [propput, id(105)] HRESULT MaxVisibleZoom([in] LONG newVal);
    [propget, id(106), helpstring("property OffsetXField")] HRESULT OffsetXField([out, retval] long* retval);
    [propput, id(106), helpstring("property OffsetXField")] HRESULT OffsetXField([in] long newVal);
    [propget, id(107), helpstring("property OffsetYField")] HRESULT OffsetYField([out, retval] long* retval);
    [propput, id(107), helpstring("property OffsetYField")] HRESULT OffsetYField([in] long newVal);
    [id(108)] HRESULT ApplyLabelExpression();
};

// *******************************  LabelCategory Interface  *****************************
[
    object,
    uuid(4BB3D2B2-A72D-4538-A092-9E1E69ED6001),
    dual,
    nonextensible,
    helpstring("ILabelCategory Interface"),
    pointer_default(unique)
]
interface ILabelCategory : IDispatch {
    [propget, id(1), helpstring("property Priority")] HRESULT Priority([out, retval] LONG* retval);
    [propput, id(1), helpstring("property Priority")] HRESULT Priority([in] LONG newVal);

    [propget, id(2), helpstring("property Name")] HRESULT Name([out, retval] BSTR* retval);
    [propput, id(2), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
    [propget, id(3), helpstring("property Expression")] HRESULT Expression([out, retval] BSTR* retval);
    [propput, id(3), helpstring("property Expression")] HRESULT Expression([in] BSTR retval);
    [propget, id(4), helpstring("property MinValue")] HRESULT MinValue([out, retval] VARIANT* pVal);
    [propput, id(4), helpstring("property MinValue")] HRESULT MinValue([in] VARIANT newVal);
    [propget, id(5), helpstring("property MaxValue")] HRESULT MaxValue([out, retval] VARIANT* pVal);
    [propput, id(5), helpstring("property MaxValue")] HRESULT MaxValue([in] VARIANT newVal);

    // Properties common for CLabels and CLabelCategory
    [propget, id(6), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL* retval);
    [propput, id(6), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL retval);

    // position
    [propget, id(7), helpstring("property OffsetX")] HRESULT OffsetX([out, retval] double* retval);
    [propput, id(7), helpstring("property OffsetX")] HRESULT OffsetX([in] double retval);
    [propget, id(8), helpstring("property OffsetY")] HRESULT OffsetY([out, retval] double* retval);
    [propput, id(8), helpstring("property OffsetY")] HRESULT OffsetY([in] double retval);
    [propget, id(9), helpstring("property Alignment")] HRESULT Alignment([out, retval] tkLabelAlignment* retval);
    [propput, id(9), helpstring("property Alignment")] HRESULT Alignment([in] tkLabelAlignment retval);
    [propget, id(10), helpstring("property LineOrientation")] HRESULT LineOrientation([out, retval]tkLineLabelOrientation* retval);
    [propput, id(10), helpstring("property LineOrientation")] HRESULT LineOrientation([in]tkLineLabelOrientation newVal);

    // font
    [propget, id(11), helpstring("property FontName")] HRESULT FontName([out, retval] BSTR* retval);
    [propput, id(11), helpstring("property FontName")] HRESULT FontName([in] BSTR retval);
    [propget, id(12), helpstring("property FontSize")] HRESULT FontSize([out, retval] long* retval);
    [propput, id(12), helpstring("property FontSize")] HRESULT FontSize([in] long retval);
    [propget, id(13), helpstring("property FontItalic")] HRESULT FontItalic([out, retval] VARIANT_BOOL* retval);
    [propput, id(13), helpstring("property FontItalic")] HRESULT FontItalic([in] VARIANT_BOOL retval);
    [propget, id(14), helpstring("property FontBold")] HRESULT FontBold([out, retval] VARIANT_BOOL* retval);
    [propput, id(14), helpstring("property FontBold")] HRESULT FontBold([in] VARIANT_BOOL retval);
    [propget, id(15), helpstring("property FontUnderline")] HRESULT FontUnderline([out, retval] VARIANT_BOOL* retval);
    [propput, id(15), helpstring("property FontUnderline")] HRESULT FontUnderline([in] VARIANT_BOOL retval);
    [propget, id(16), helpstring("property FontStrikeOut")] HRESULT FontStrikeOut([out, retval] VARIANT_BOOL* retval);
    [propput, id(16), helpstring("property FontStrikeOut")] HRESULT FontStrikeOut([in] VARIANT_BOOL retval);

    [propget, id(17), helpstring("property FontColor")] HRESULT FontColor([out, retval] OLE_COLOR* retval);
    [propput, id(17), helpstring("property FontColor")] HRESULT FontColor([in] OLE_COLOR retval);
    [propget, id(18), helpstring("property FontColor2")] HRESULT FontColor2([out, retval] OLE_COLOR* retval);
    [propput, id(18), helpstring("property FontColor2")] HRESULT FontColor2([in] OLE_COLOR retval);
    [propget, id(19), helpstring("property FontGradientMode")] HRESULT FontGradientMode([out, retval] tkLinearGradientMode* retval);
    [propput, id(19), helpstring("property FontGradientMode")] HRESULT FontGradientMode([in] tkLinearGradientMode retval);
    [propget, id(20), helpstring("property FontTransparency")] HRESULT FontTransparency([out, retval] LONG* retval);
    [propput, id(20), helpstring("property FontTransparency")] HRESULT FontTransparency([in] LONG retval);

    // outline
    [propget, id(21), helpstring("property FontOutlineVisible")] HRESULT FontOutlineVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(21), helpstring("property FontOutlineVisible")] HRESULT FontOutlineVisible([in] VARIANT_BOOL retval);
    [propget, id(22), helpstring("property ShadowVisible")] HRESULT ShadowVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(22), helpstring("property ShadowVisible")] HRESULT ShadowVisible([in] VARIANT_BOOL retval);
    [propget, id(23), helpstring("property HaloVisible")] HRESULT HaloVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(23), helpstring("property HaloVisible")] HRESULT HaloVisible([in] VARIANT_BOOL retval);

    [propget, id(24), helpstring("property FontOutlineColor")] HRESULT FontOutlineColor([out, retval] OLE_COLOR* retval);
    [propput, id(24), helpstring("property FontOutlineColor")] HRESULT FontOutlineColor([in] OLE_COLOR retval);
    [propget, id(25), helpstring("property ShadowColor")] HRESULT ShadowColor([out, retval] OLE_COLOR* retval);
    [propput, id(25), helpstring("property ShadowColor")] HRESULT ShadowColor([in] OLE_COLOR retval);
    [propget, id(26), helpstring("property HaloColor")] HRESULT HaloColor([out, retval] OLE_COLOR* retval);
    [propput, id(26), helpstring("property HaloColor")] HRESULT HaloColor([in] OLE_COLOR retval);

    [propget, id(27), helpstring("property FontOutlineWidth")] HRESULT FontOutlineWidth([out, retval] LONG* retval);
    [propput, id(27), helpstring("property FontOutlineWidth")] HRESULT FontOutlineWidth([in] LONG retval);
    [propget, id(28), helpstring("property ShadowOffsetX")] HRESULT ShadowOffsetX([out, retval] LONG* retval);
    [propput, id(28), helpstring("property ShadowOffsetX")] HRESULT ShadowOffsetX([in] LONG retval);
    [propget, id(29), helpstring("property ShadowOffsetY")] HRESULT ShadowOffsetY([out, retval] LONG* retval);
    [propput, id(29), helpstring("property ShadowOffsetY")] HRESULT ShadowOffsetY([in] LONG retval);
    [propget, id(30), helpstring("property HaloSize")] HRESULT HaloSize([out, retval] LONG* retval);
    [propput, id(30), helpstring("property HaloSize")] HRESULT HaloSize([in] LONG retval);

    // frame
    [propget, id(31), helpstring("property FrameType")] HRESULT FrameType([out, retval]tkLabelFrameType* retval);
    [propput, id(31), helpstring("property FrameType")] HRESULT FrameType([in]tkLabelFrameType newVal);
    [propget, id(32), helpstring("property FrameOutlineColor")] HRESULT FrameOutlineColor([out, retval]OLE_COLOR* retval);
    [propput, id(32), helpstring("property FrameOutlineColor")] HRESULT FrameOutlineColor([in]OLE_COLOR newVal);
    [propget, id(33), helpstring("property FrameBackColor")] HRESULT FrameBackColor([out, retval]OLE_COLOR* retval);
    [propput, id(33), helpstring("property FrameBackColor")] HRESULT FrameBackColor([in]OLE_COLOR newVal);
    [propget, id(34), helpstring("property FrameBackColor2")] HRESULT FrameBackColor2([out, retval]OLE_COLOR* retval);
    [propput, id(34), helpstring("property FrameBackColor2")] HRESULT FrameBackColor2([in]OLE_COLOR newVal);

    [propget, id(35), helpstring("property FrameGradientMode")] HRESULT FrameGradientMode([out, retval] tkLinearGradientMode* retval);
    [propput, id(35), helpstring("property FrameGradientMode")] HRESULT FrameGradientMode([in] tkLinearGradientMode retval);
    [propget, id(36), helpstring("property FrameOutlineStyle")] HRESULT FrameOutlineStyle([out, retval] tkDashStyle* retval);
    [propput, id(36), helpstring("property FrameOutlineStyle")] HRESULT FrameOutlineStyle([in] tkDashStyle retval);
    [propget, id(37), helpstring("property FrameOutlineWidth")] HRESULT FrameOutlineWidth([out, retval] LONG* retval);
    [propput, id(37), helpstring("property FrameOutlineWidth")] HRESULT FrameOutlineWidth([in] LONG retval);

    [propget, id(38), helpstring("property FramePaddingX")] HRESULT FramePaddingX([out, retval] LONG* retval);
    [propput, id(38), helpstring("property FramePaddingX")] HRESULT FramePaddingX([in] LONG retval);
    [propget, id(39), helpstring("property FramePaddingY")] HRESULT FramePaddingY([out, retval] LONG* retval);
    [propput, id(39), helpstring("property FramePaddingY")] HRESULT FramePaddingY([in] LONG retval);
    [propget, id(40), helpstring("property FrameTransparency")] HRESULT FrameTransparency([out, retval] LONG* retval);
    [propput, id(40), helpstring("property FrameTransparency")] HRESULT FrameTransparency([in] LONG retval);

    [propget, id(41), helpstring("property InboxAlignment")] HRESULT InboxAlignment([out, retval] tkLabelAlignment* retval);
    [propput, id(41), helpstring("property InboxAlignment")] HRESULT InboxAlignment([in] tkLabelAlignment newVal);

    [propget, id(42), helpstring("property FrameVisible")] HRESULT FrameVisible([out, retval]VARIANT_BOOL* retVal);
    [propput, id(42), helpstring("property FrameVisible")] HRESULT FrameVisible([in]VARIANT_BOOL newVal);
    // End of Properties common for CLabels and CLabelCategory

    [propget, id(43), helpstring("property Enabled"), hidden] HRESULT Enabled([out, retval]VARIANT_BOOL* retVal);
    [propput, id(43), helpstring("property Enabled"), hidden] HRESULT Enabled([in]VARIANT_BOOL newVal);

    [id(44), helpstring("property Serialize")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(45), helpstring("property Deserialize")] HRESULT Deserialize([in]BSTR newVal);
    [propget, id(46)] HRESULT FontSize2([out, retval] LONG* pVal);
    [propput, id(46)] HRESULT FontSize2([in] LONG newVal);
    [propget, id(47), helpstring("property OffsetXField")] HRESULT OffsetXField([out, retval] long* retval);
    [propput, id(47), helpstring("property OffsetXField")] HRESULT OffsetXField([in] long retval);
    [propget, id(48), helpstring("property OffsetYField")] HRESULT OffsetYField([out, retval] long* retval);
    [propput, id(48), helpstring("property OffsetYField")] HRESULT OffsetYField([in] long retval);
};

// **************************  ShapefileCategories Interface  *****************************/
[
    object,
    uuid(EC594CB1-FA55-469C-B662-192F7A464C23),
    dual,
    nonextensible,
    helpstring("IShapefileCategories Interface"),
    pointer_default(unique)
]
interface IShapefileCategories : IDispatch {
    [propget, id(1), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(2), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(3), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(3), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(4), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(4), helpstring("property Key")] HRESULT Key([in] BSTR newVal);

    [id(5), helpstring("method Add")] HRESULT Add([in]BSTR Name, [out, retval]IShapefileCategory** retVal);
    [id(6), helpstring("method Insert")] HRESULT Insert([in] long Index, [in]BSTR Name, [out, retval]IShapefileCategory** retVal);
    [id(7), helpstring("method Remove")] HRESULT Remove([in] long Index, [out, retval] VARIANT_BOOL* vbretval);
    [id(8), helpstring("method Clear")] HRESULT Clear();
    [propget, id(9), helpstring("property Item")] HRESULT Item([in]long Index, [out, retval]IShapefileCategory** pVal);
    [propput, id(9), helpstring("property Item")] HRESULT Item([in]long Index, [in]IShapefileCategory* newVal);
    [id(10), helpstring("method Generate")] HRESULT Generate([in]long FieldIndex, [in]tkClassificationType ClassificationType, [in]long numClasses, [out, retval] VARIANT_BOOL* vbretval);

    [propget, id(11), helpstring("property Count")] HRESULT Count([out, retval] long *pVal);
    [propget, id(12), helpstring("property Shapefile")] HRESULT Shapefile([out, retval] IShapefile** retVal);
    [id(13), helpstring("method ApplyExpressions")] HRESULT ApplyExpressions();
    [id(14), helpstring("method ApplyExpression")] HRESULT ApplyExpression([in]long CategoryIndex, [in, defaultvalue(-1)] long startRowIndex, [in, defaultvalue(-1)] long endRowIndex);

    [id(15), helpstring("method ApplyColorScheme")] HRESULT ApplyColorScheme([in]tkColorSchemeType Type, [in]IColorScheme* ColorScheme);
    [id(16), helpstring("method ApplyColorScheme2")] HRESULT ApplyColorScheme2([in]tkColorSchemeType Type, [in]IColorScheme* ColorScheme, [in]tkShapeElements ShapeElement);
    [id(17), helpstring("method ApplyColorScheme3")] HRESULT ApplyColorScheme3([in]tkColorSchemeType Type, [in]IColorScheme* ColorScheme,
        [in]tkShapeElements ShapeElement, [in]long CategoryStartIndex, [in]long CategoryEndIndex);

    [propget, id(18), helpstring("property Caption")] HRESULT Caption([out, retval] BSTR *pVal);
    [propput, id(18), helpstring("property Caption")] HRESULT Caption([in] BSTR newVal);

    [id(19), helpstring("method MoveUp")] HRESULT MoveUp([in]long Index, [out, retval]VARIANT_BOOL* retval);
    [id(20), helpstring("method MoveDown")] HRESULT MoveDown([in]long Index, [out, retval]VARIANT_BOOL* retval);

    [id(21), helpstring("method Serialize")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(22), helpstring("method Deserialize")] HRESULT Deserialize([in]BSTR newVal);
    //[id(23), helpstring("method Sort")] HRESULT Sort([in] LONG FieldIndex, [in] VARIANT_BOOL Ascending, [in] tkGroupOperation Operation, [out,retval] VARIANT_BOOL* retVal);

    [id(23), helpstring("property AddRange")] HRESULT AddRange([in]long FieldIndex, [in] tkClassificationType ClassificationType, [in]long numClasses, [in]VARIANT minValue, [in]VARIANT maxValue, [out, retval]VARIANT_BOOL* retVal);

    [propget, id(24), helpstring("property CategoryIndexByName")] HRESULT CategoryIndexByName([in]BSTR categoryName, [out, retval] int* categoryIndex);
    [propget, id(25), helpstring("property CategoryIndex")] HRESULT CategoryIndex([in] IShapefileCategory* category, [out, retval]int* categoryIndex);
    [id(26), helpstring("method GeneratePolygonColors")] HRESULT GeneratePolygonColors([in, defaultvalue(NULL)]IColorScheme* scheme, [out, retval]VARIANT_BOOL* retVal);

    [propget, id(27)] HRESULT ClassificationField([out, retval] LONG* pVal);
    [propput, id(27)] HRESULT ClassificationField([in] LONG newVal);
    [id(28)] HRESULT Generate2([in] BSTR fieldName, [in] tkClassificationType ClassificationType, [in] LONG numClasses, [out, retval] VARIANT_BOOL* retVal);
    [id(29)] HRESULT Add2([in] IShapefileCategory* category);
    [id(30)] HRESULT Insert2([in] LONG index, [in] IShapefileCategory* category, [out, retval] VARIANT_BOOL* retVal);
};

/**********************  ShapefileCategory Interface  **************************/
[
    object,
    uuid(688EB3FF-CF7A-490C-9BC7-BE47CEB32C59),
    dual,
    nonextensible,
    helpstring("IShapefileCategory Interface"),
    pointer_default(unique)
]
interface IShapefileCategory : IDispatch {
    [propget, id(1), helpstring("property Name")] HRESULT Name([out, retval] BSTR* retval);
    [propput, id(1), helpstring("property Name")] HRESULT Name([in] BSTR newVal);
    [propget, id(2), helpstring("property Expression")] HRESULT Expression([out, retval] BSTR* retval);
    [propput, id(2), helpstring("property Expression")] HRESULT Expression([in] BSTR retval);
    [propget, id(3), helpstring("property DrawingOptions")] HRESULT DrawingOptions([out, retval] IShapeDrawingOptions** retval);
    [propput, id(3), helpstring("property DrawingOptions")] HRESULT DrawingOptions([in] IShapeDrawingOptions* retval);
    [propget, id(4)] HRESULT ValueType([out, retval] tkCategoryValue* pVal);
    [propput, id(4)] HRESULT ValueType([in] tkCategoryValue newVal);
    [propget, id(5)] HRESULT MinValue([out, retval] VARIANT* pVal);
    [propput, id(5)] HRESULT MinValue([in] VARIANT newVal);
    [propget, id(6)] HRESULT MaxValue([out, retval] VARIANT* pVal);
    [propput, id(6)] HRESULT MaxValue([in] VARIANT newVal);
};

/***************************  Charts Interface  ********************************/
[
    object,
    uuid(D98BB982-8D47-47BC-81CA-0EFA15D1B4F6),
    dual,
    nonextensible,
    helpstring("ICharts Interface"),
    pointer_default(unique)
]
interface ICharts : IDispatch {
    [propget, id(1), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(1), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [propget, id(2), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(2), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
    [propget, id(3), helpstring("property AvoidCollisions")] HRESULT AvoidCollisions([out, retval] VARIANT_BOOL* pVal);
    [propput, id(3), helpstring("property AvoidCollisions")] HRESULT AvoidCollisions([in] VARIANT_BOOL newVal);
    [propget, id(4), helpstring("property ChartType")] HRESULT ChartType([out, retval] tkChartType* pVal);
    [propput, id(4), helpstring("property ChartType")] HRESULT ChartType([in] tkChartType newVal);
    [propget, id(5), helpstring("property BarWidth")] HRESULT BarWidth([out, retval] LONG* pVal);
    [propput, id(5), helpstring("property BarWidth")] HRESULT BarWidth([in] LONG newVal);
    [propget, id(6), helpstring("property BarHeight")] HRESULT BarHeight([out, retval] LONG* pVal);
    [propput, id(6), helpstring("property BarHeight")] HRESULT BarHeight([in] LONG newVal);
    [propget, id(7), helpstring("property PieRadius")] HRESULT PieRadius([out, retval] LONG* pVal);
    [propput, id(7), helpstring("property PieRadius")] HRESULT PieRadius([in] LONG newVal);
    [propget, id(8), helpstring("property PieRotation")] HRESULT PieRotation([out, retval] double* pVal);
    [propput, id(8), helpstring("property PieRotation")] HRESULT PieRotation([in] double newVal);
    [propget, id(9), helpstring("property NumBars")] HRESULT NumFields([out, retval] LONG* newVal);
    [id(10), helpstring("method AddBar")] HRESULT AddField2([in]LONG FieldIndex, [in]OLE_COLOR Color);
    [id(11), helpstring("method InsertField2")] HRESULT InsertField2([in] LONG Index, [in] LONG FieldIndex, [in]OLE_COLOR Color, [out, retval] VARIANT_BOOL* retVal);
    [id(12), helpstring("method RemoveField")] HRESULT RemoveField([in] LONG Index, [out, retval] VARIANT_BOOL* vbretval);
    [id(13), helpstring("method ClearBars")] HRESULT ClearFields();
    [id(14), helpstring("method MoveBar")] HRESULT MoveField([in]LONG OldIndex, [in]LONG NewIndex, [out, retval]VARIANT_BOOL* vbretval);
    [id(15), helpstring("method Generate")] HRESULT Generate([in] tkLabelPositioning Type, [out, retval]VARIANT_BOOL* vbretval);
    [id(16), helpstring("method Clear")] HRESULT Clear();
    [id(17), helpstring("method DrawChart")] HRESULT DrawChart([in]int hdc, [in]float x, [in]float y, [in]VARIANT_BOOL hideLabels,
        [in, defaultvalue(16777215)]OLE_COLOR backColor, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(18), helpstring("property Tilt")] HRESULT Tilt([out, retval] double* pVal);
    [propput, id(18), helpstring("property Tilt")] HRESULT Tilt([in] double newVal);
    [propget, id(19), helpstring("property Thickness")] HRESULT Thickness([out, retval] double* pVal);
    [propput, id(19), helpstring("property Thickness")] HRESULT Thickness([in] double newVal);
    [propget, id(20), helpstring("property PieRadius2")] HRESULT PieRadius2([out, retval] LONG* pVal);
    [propput, id(20), helpstring("property PieRadius2")] HRESULT PieRadius2([in] LONG newVal);
    [propget, id(21), helpstring("property SizeField")] HRESULT SizeField([out, retval] LONG* pVal);
    [propput, id(21), helpstring("property SizeField")] HRESULT SizeField([in] LONG newVal);
    [propget, id(22), helpstring("property NormalizationField")] HRESULT NormalizationField([out, retval] LONG* pVal);
    [propput, id(22), helpstring("property NormalizationField")] HRESULT NormalizationField([in] LONG newVal);
    [propget, id(23), helpstring("property UseVariableRadius")] HRESULT UseVariableRadius([out, retval] VARIANT_BOOL* pVal);
    [propput, id(23), helpstring("property UseVariableRadius")] HRESULT UseVariableRadius([in] VARIANT_BOOL newVal);
    [propget, id(24), helpstring("property Use3DMode")] HRESULT Use3DMode([out, retval] VARIANT_BOOL* pVal);
    [propput, id(24), helpstring("property Use3DMode")] HRESULT Use3DMode([in] VARIANT_BOOL newVal);
    [propget, id(25), helpstring("property Transparency")] HRESULT Transparency([out, retval] SHORT* pVal);
    [propput, id(25), helpstring("property Transparency")] HRESULT Transparency([in] SHORT newVal);
    [propget, id(26), helpstring("property LineColor")] HRESULT LineColor([out, retval] OLE_COLOR* pVal);
    [propput, id(26), helpstring("property LineColor")] HRESULT LineColor([in] OLE_COLOR newVal);
    [propget, id(27), helpstring("property VerticalPosition")] HRESULT VerticalPosition([out, retval] tkVerticalPosition* pVal);
    [propput, id(27), helpstring("property VerticalPosition")] HRESULT VerticalPosition([in] tkVerticalPosition newVal);
    [propget, id(28), helpstring("property Chart")] HRESULT Chart([in]long Chart, [out, retval] IChart** retVal);
    //[propput, id(28), helpstring("property Chart")] HRESULT Chart([in]long Chart, [in] IChart* newVal);
    [propget, id(29), helpstring("property Field")] HRESULT Field([in]long FieldIndex, [out, retval]IChartField** retVal);
    [id(30), helpstring("method AddField")] HRESULT AddField([in]IChartField* Field, [out, retval]VARIANT_BOOL* retVal);
    [id(31), helpstring("method InsertField")] HRESULT InsertField([in]long Index, [in]IChartField* Field, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(32), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(33), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(34), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(34), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(35), helpstring("property Count")] HRESULT Count([out, retval] long *retVal);
    [propget, id(36), helpstring("property MaxVisibleScale")] HRESULT MaxVisibleScale([out, retval]double* retval);
    [propput, id(36), helpstring("property MaxVisibleScale")] HRESULT MaxVisibleScale([in]double newVal);
    [propget, id(37), helpstring("property MinVisibleScale")] HRESULT MinVisibleScale([out, retval]double* retval);
    [propput, id(37), helpstring("property MinVisibleScale")] HRESULT MinVisibleScale([in]double newVal);
    [propget, id(38), helpstring("property DynamicVisibility")] HRESULT DynamicVisibility([out, retval]VARIANT_BOOL* retval);
    [propput, id(38), helpstring("property DynamicVisibility")] HRESULT DynamicVisibility([in]VARIANT_BOOL newVal);
    [propget, id(39), helpstring("property IconWidth")] HRESULT IconWidth([out, retval]long* retval);
    [propget, id(40), helpstring("property IconHeight")] HRESULT IconHeight([out, retval]long* retval);

    [propget, id(41), helpstring("property Caption")] HRESULT Caption([out, retval]BSTR* retVal);
    [propput, id(41), helpstring("property Caption")] HRESULT Caption([in]BSTR  newVal);

    [propget, id(42), helpstring("property ValuesFontName")] HRESULT ValuesFontName([out, retval] BSTR* retval);
    [propput, id(42), helpstring("property ValuesFontName")] HRESULT ValuesFontName([in] BSTR retval);
    [propget, id(43), helpstring("property ValuesFontSize")] HRESULT ValuesFontSize([out, retval] long* retval);
    [propput, id(43), helpstring("property ValuesFontSize")] HRESULT ValuesFontSize([in] long retval);
    [propget, id(44), helpstring("property ValuesFontItalic")] HRESULT ValuesFontItalic([out, retval] VARIANT_BOOL* retval);
    [propput, id(44), helpstring("property ValuesFontItalic")] HRESULT ValuesFontItalic([in] VARIANT_BOOL retval);
    [propget, id(45), helpstring("property ValuesFontBold")] HRESULT ValuesFontBold([out, retval] VARIANT_BOOL* retval);
    [propput, id(45), helpstring("property ValuesFontBold")] HRESULT ValuesFontBold([in] VARIANT_BOOL retval);

    [propget, id(46), helpstring("property ValuesFontColor")] HRESULT ValuesFontColor([out, retval] OLE_COLOR* retval);
    [propput, id(46), helpstring("property ValuesFontColor")] HRESULT ValuesFontColor([in] OLE_COLOR retval);
    [propget, id(47), helpstring("property ValuesFrameVisible")] HRESULT ValuesFrameVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(47), helpstring("property ValuesFrameVisible")] HRESULT ValuesFrameVisible([in] VARIANT_BOOL retval);
    [propget, id(48), helpstring("property ValuesFrameColor")] HRESULT ValuesFrameColor([out, retval] OLE_COLOR* retval);
    [propput, id(48), helpstring("property ValuesFrameColor")] HRESULT ValuesFrameColor([in] OLE_COLOR retval);

    [propget, id(49), helpstring("property ValuesVisible")] HRESULT ValuesVisible([out, retval] VARIANT_BOOL* retval);
    [propput, id(49), helpstring("property ValuesVisible")] HRESULT ValuesVisible([in] VARIANT_BOOL retval);

    [propget, id(50), helpstring("property ValuesStyle")] HRESULT ValuesStyle([out, retval] tkChartValuesStyle* retval);
    [propput, id(50), helpstring("property ValuesStyle")] HRESULT ValuesStyle([in] tkChartValuesStyle retval);

    [id(51), helpstring("method Select")] HRESULT Select([in]IExtents* BoundingBox, [in]long Tolerance, [in]SelectMode SelectMode, [in, out]VARIANT* Indices, [out, retval]VARIANT_BOOL* retval);

    [propget, id(52), helpstring("property VisibilityExpression")] HRESULT VisibilityExpression([out, retval]BSTR* retVal);
    [propput, id(52), helpstring("property VisibilityExpression")] HRESULT VisibilityExpression([in]BSTR  newVal);
    [propget, id(53), helpstring("property CollisionBuffer")] HRESULT CollisionBuffer([out, retval]long* retval);
    [propput, id(53), helpstring("property CollisionBuffer")] HRESULT CollisionBuffer([in]long newVal);

    [propget, id(54), helpstring("property OffsetX")] HRESULT OffsetX([out, retval]LONG* retval);
    [propput, id(54), helpstring("property OffsetX")] HRESULT OffsetX([in]LONG newVal);
    [propget, id(55), helpstring("property OffsetY")] HRESULT OffsetY([out, retval]LONG* retval);
    [propput, id(55), helpstring("property OffsetY")] HRESULT OffsetY([in]LONG newVal);

    [id(56), helpstring("property Serialize")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(57), helpstring("property Deserialize")] HRESULT Deserialize([in]BSTR newVal);
    [id(58), helpstring("method SaveToXML")] HRESULT SaveToXML([in]BSTR Filename, [out, retval] VARIANT_BOOL* retVal);
    [id(59), helpstring("method LoadFromXML")] HRESULT LoadFromXML([in] BSTR Filename, [out, retval] VARIANT_BOOL* retVal);

    [propget, id(60), helpstring("property SavingMode")] HRESULT SavingMode([out, retval]tkSavingMode* retVal);
    [propput, id(60), helpstring("property SavingMode")] HRESULT SavingMode([in]tkSavingMode newVal);
};

/***************************  Chart Interface  ********************************/
[
    object,
    uuid(34613D99-DDAB-48CA-AB5D-CAD805E7986C),
    dual,
    nonextensible,
    helpstring("IChart Interface"),
    pointer_default(unique)
]
interface IChart : IDispatch {
    [propget, id(1), helpstring("property PositionX")] HRESULT PositionX([out, retval]double* retVal);
    [propput, id(1), helpstring("property PositionX")] HRESULT PositionX([in]double newVal);
    [propget, id(2), helpstring("property PositionY")] HRESULT PositionY([out, retval]double* retVal);
    [propput, id(2), helpstring("property PositionY")] HRESULT PositionY([in]double newVal);
    [propget, id(3), helpstring("property Visible")] HRESULT Visible([out, retval]VARIANT_BOOL* retVal);
    [propput, id(3), helpstring("property Visible")] HRESULT Visible([in]VARIANT_BOOL newVal);
    [propget, id(4), helpstring("property IsDrawn")] HRESULT IsDrawn([out, retval]VARIANT_BOOL* retVal);
    [propput, id(4), helpstring("property IsDrawn")] HRESULT IsDrawn([in]VARIANT_BOOL newVal);
    [propget, id(5), helpstring("property ScreenExtents")] HRESULT ScreenExtents([out, retval]IExtents** retVal);
};

/***************************  ColorScheme Interface  ********************************/
[
    object,
    uuid(D2334B3C-0779-4F5F-8771-2F857F0D601E),
    dual,
    nonextensible,
    helpstring("IColorScheme Interface"),
    pointer_default(unique)
]
interface IColorScheme : IDispatch {
    [id(1), helpstring("method SetColors")] HRESULT SetColors([in]OLE_COLOR Color1, [in]OLE_COLOR Color2);
    [id(2), helpstring("method SetColors2")] HRESULT SetColors2([in] tkMapColor Color1, [in] tkMapColor Color2);
    [id(3), helpstring("method SetColors3")] HRESULT SetColors3([in] SHORT MinRed, [in] SHORT MinGreen, [in] SHORT MinBlue, [in] SHORT MaxRed, [in] SHORT MaxGreen, [in] SHORT MaxBlue);
    [id(4), helpstring("method SetColors4")] HRESULT SetColors4([in] PredefinedColorScheme Scheme);
    [id(5), helpstring("method Add")] HRESULT AddBreak([in]double Value, [in]OLE_COLOR Color);
    [id(6), helpstring("method Remove")] HRESULT Remove([in]long Index, [out, retval]VARIANT_BOOL* retVal);
    [id(7), helpstring("method Clear")] HRESULT Clear();
    [propget, id(8), helpstring("property NumBreaks")] HRESULT NumBreaks([out, retval]long* retVal);
    [propget, id(9), helpstring("property RandomColor")] HRESULT RandomColor([in]double Value, [out, retval]OLE_COLOR* retVal);
    [propget, id(10), helpstring("property GraduatedColor")] HRESULT GraduatedColor([in]double Value, [out, retval]OLE_COLOR* retVal);
    [propget, id(11), helpstring("property BreakColor")] HRESULT BreakColor([in]long Index, [out, retval]OLE_COLOR* retVal);
    [propput, id(11), helpstring("property BreakColor")] HRESULT BreakColor([in]long Index, [in]OLE_COLOR newVal);
    [propget, id(12), helpstring("property BreakValue")] HRESULT BreakValue([in]long Index, [out, retval]double* retVal);

    [propget, id(13), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(14), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(15), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(15), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(16), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(16), helpstring("property Key")] HRESULT Key([in] BSTR newVal);

    [id(17)] HRESULT Reverse();
};

/***************************  ChartField Interface  ********************************/
[
    object,
    uuid(A9C1AFEB-8CC6-4A36-8E41-E643C1302E6F),
    dual,
    nonextensible,
    helpstring("IChartField Interface"),
    pointer_default(unique)
]
interface IChartField : IDispatch {
    [propget, id(1), helpstring("property Index")] HRESULT Index([out, retval]LONG* retVal);
    [propput, id(1), helpstring("property Index")] HRESULT Index([in]LONG newVal);
    [propget, id(2), helpstring("property Color")] HRESULT Color([out, retval]OLE_COLOR* retVal);
    [propput, id(2), helpstring("property Color")] HRESULT Color([in]OLE_COLOR newVal);
    [propget, id(3), helpstring("property Name")] HRESULT Name([out, retval]BSTR* retVal);
    [propput, id(3), helpstring("property Name")] HRESULT Name([in]BSTR newVal);
};

/***************************  LinePattern Interface  ********************************/
[
    object,
    uuid(54EB7DD1-CEC2-4165-8DBA-13115B079DF1),
    dual,
    nonextensible,
    helpstring("ILinePattern Interface"),
    pointer_default(unique)
]
interface ILinePattern : IDispatch {
    [propget, id(1), helpstring("property Key")] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(1), helpstring("property Key")] HRESULT Key([in]BSTR newVal);
    [propget, id(2), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(2), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(3), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(4), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(5), helpstring("property Line")] HRESULT Line([in]int Index, [out, retval]ILineSegment** retVal);
    [propput, id(5), helpstring("property Line")] HRESULT Line([in]int Index, [in]ILineSegment* newVal);
    [propget, id(6), helpstring("property Count")] HRESULT Count([out, retval]int* retVal);
    [id(7), helpstring("method AddLine")] HRESULT AddLine([in]OLE_COLOR color, [in]float width, [in]tkDashStyle style);
    [id(8), helpstring("method InsertLine")] HRESULT InsertLine(int Index, [in]OLE_COLOR color, [in]float width, [in]tkDashStyle style, [out, retval]VARIANT_BOOL* retVal);
    [id(9), helpstring("method AddMarker")] HRESULT AddMarker([in]tkDefaultPointSymbol marker, [out, retval]ILineSegment** retVal);
    [id(10), helpstring("method InsertMarker")] HRESULT InsertMarker([in]int Index, [in]tkDefaultPointSymbol marker, [out, retval]ILineSegment** retVal);
    [id(11), helpstring("method RemoveItem")] HRESULT RemoveItem([in]int Index, [out, retval]VARIANT_BOOL* retVal);
    [id(12), helpstring("method Clear")] HRESULT Clear();
    [id(13), helpstring("method Draw")] HRESULT Draw([in]int hdc, [in]float x, [in]float y, [in]int clipWidth, [in]int clipHeight,
        [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha,
        [out, retval]VARIANT_BOOL* retVal);

    [propget, id(14), helpstring("property Transparency")] HRESULT Transparency([out, retval]BYTE* retVal);
    [propput, id(14), helpstring("property Transparency")] HRESULT Transparency([in]BYTE newVal);

    [id(15), helpstring("property Serialize")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(16), helpstring("property Deserialize")] HRESULT Deserialize([in]BSTR newVal);

    //[id(17), helpstring("method Draw")] HRESULT DrawVB([in]int hdc, [in]float x, [in]float y, [in]int clipWidth, [in]int clipHeight, 
    //													[in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha, 
    //													[out, retval]VARIANT_BOOL* retVal);
};

/***************************  LineSegment Interface  ********************************/
[
    object,
    uuid(56A5439F-F550-434E-B6C5-0508A6461F47),
    dual,
    nonextensible,
    helpstring("ILineSegment Interface"),
    pointer_default(unique)
]
interface ILineSegment : IDispatch {
    [propget, id(1), helpstring("property Color")] HRESULT Color([out, retval]OLE_COLOR* retVal);
    [propput, id(1), helpstring("property Color")] HRESULT Color([in]OLE_COLOR newVal);
    [propget, id(2), helpstring("property LineWidth")] HRESULT LineWidth([out, retval]float* retVal);
    [propput, id(2), helpstring("property LineWidth")] HRESULT LineWidth([in]float newVal);
    [propget, id(3), helpstring("property LineStyle")] HRESULT LineStyle([out, retval]tkDashStyle* retVal);
    [propput, id(3), helpstring("property LineStyle")] HRESULT LineStyle([in]tkDashStyle newVal);
    [propget, id(4), helpstring("property LineType")] HRESULT LineType([out, retval]tkLineType* retVal);
    [propput, id(4), helpstring("property LineType")] HRESULT LineType([in]tkLineType newVal);
    [propget, id(5), helpstring("property Marker")] HRESULT Marker([out, retval]tkDefaultPointSymbol* retVal);
    [propput, id(5), helpstring("property Marker")] HRESULT Marker([in]tkDefaultPointSymbol newVal);
    [propget, id(6), helpstring("property MarkerSize")] HRESULT MarkerSize([out, retval]float* retVal);
    [propput, id(6), helpstring("property MarkerSize")] HRESULT MarkerSize([in]float newVal);
    [propget, id(7), helpstring("property MarkerInterval")] HRESULT MarkerInterval([out, retval]float* retVal);
    [propput, id(7), helpstring("property MarkerInterval")] HRESULT MarkerInterval([in]float newVal);
    [propget, id(8), helpstring("property MarkerOrientation")] HRESULT MarkerOrientation([out, retval]tkLineLabelOrientation* retVal);
    [propput, id(8), helpstring("property MarkerOrientation")] HRESULT MarkerOrientation([in]tkLineLabelOrientation newVal);
    [propget, id(9), helpstring("property MarkerFlipFirst")] HRESULT MarkerFlipFirst([out, retval]VARIANT_BOOL* retVal);
    [propput, id(9), helpstring("property MarkerFlipFirst")] HRESULT MarkerFlipFirst([in]VARIANT_BOOL newVal);
    [propget, id(10), helpstring("property MarkerOffset")] HRESULT MarkerOffset([out, retval]float* retVal);
    [propput, id(10), helpstring("property MarkerOffset")] HRESULT MarkerOffset([in]float newVal);
    [id(11), helpstring("method Draw")] HRESULT Draw([in]int hdc, [in]float x, [in]float y, [in]int clipWidth, [in]int clipHeight,
        [in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha,
        [out, retval]VARIANT_BOOL* retVal);
    [propget, id(12), helpstring("property MarkerOutlineColor")] HRESULT MarkerOutlineColor([out, retval]OLE_COLOR* retVal);
    [propput, id(12), helpstring("property MarkerOutlineColor")] HRESULT MarkerOutlineColor([in]OLE_COLOR newVal);
    [propget, id(13), helpstring("property MarkerIntervalIsRelative")] HRESULT MarkerIntervalIsRelative([out, retval]VARIANT_BOOL* retVal);
    [propput, id(13), helpstring("property MarkerIntervalIsRelative")] HRESULT MarkerIntervalIsRelative([in]VARIANT_BOOL newVal);
    [propget, id(14), helpstring("property MarkerOffsetIsRelative")] HRESULT MarkerOffsetIsRelative([out, retval]VARIANT_BOOL* retVal);
    [propput, id(14), helpstring("property MarkerOffsetIsRelative")] HRESULT MarkerOffsetIsRelative([in]VARIANT_BOOL newVal);
    [propget, id(15), helpstring("property MarkerMarkerAllowOverflow")] HRESULT MarkerAllowOverflow([out, retval]VARIANT_BOOL* retVal);
    [propput, id(15), helpstring("property MarkerMarkerAllowOverflow")] HRESULT MarkerAllowOverflow([in]VARIANT_BOOL newVal);

    //[id(13), helpstring("method Draw")] HRESULT DrawVB([in]int hdc, [in]float x, [in]float y, [in]int clipWidth, [in]int clipHeight,
    //													[in, defaultvalue(16777215)]OLE_COLOR backColor, [in, defaultvalue(255)]BYTE backAlpha, 
    //													[out, retval]VARIANT_BOOL* retVal);
};

/************************************  MapWinGIS Library  ********************************/
[
    object,
    uuid(AED5318E-9E3D-4276-BE03-71EDFEDC0F1F),
    dual,
    nonextensible,
    helpstring("IGeoProjection Interface"),
    pointer_default(unique)
]
interface IGeoProjection : IDispatch {
    [id(1), helpstring("method ExportToProj4")] HRESULT ExportToProj4([out, retval] BSTR* retVal);
    [id(2), helpstring("method ImportFromProj4")] HRESULT ImportFromProj4([in] BSTR proj, [out, retval] VARIANT_BOOL* retVal);
    [id(3), helpstring("method ImportFromESRI")] HRESULT ImportFromESRI([in] BSTR proj, [out, retval] VARIANT_BOOL* retVal);
    [id(4), helpstring("method ImportFromEPSG")] HRESULT ImportFromEPSG([in] LONG projCode, [out, retval] VARIANT_BOOL* retVal);
    [id(5), helpstring("method ExportToWKT")] HRESULT ExportToWKT([out, retval] BSTR* retVal);
    [id(6), helpstring("method ImportFromWKT")] HRESULT ImportFromWKT([in] BSTR proj, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(7), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(7), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(8), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(9), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(10), helpstring("property Key")] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(10), helpstring("property Key")] HRESULT Key([in]BSTR newVal);

    [id(11), helpstring("method SetWellKnownGeogCS")] HRESULT SetWellKnownGeogCS([in] tkCoordinateSystem newVal);
    [propget, id(12), helpstring("property IsGeographic")] HRESULT IsGeographic([out, retval] VARIANT_BOOL* pVal);
    [propget, id(13), helpstring("property IsProjected")] HRESULT IsProjected([out, retval] VARIANT_BOOL* pVal);
    [propget, id(14), helpstring("property IsLocal")] HRESULT IsLocal([out, retval] VARIANT_BOOL* pVal);
    [propget, id(15), helpstring("property IsSame")] HRESULT IsSame([in] IGeoProjection* proj, [out, retval] VARIANT_BOOL* pVal);
    [propget, id(16), helpstring("property IsSameGeogCS")] HRESULT IsSameGeogCS([in] IGeoProjection* proj, [out, retval] VARIANT_BOOL* pVal);
    [propget, id(17), helpstring("property InverseFlattening")] HRESULT InverseFlattening([out, retval] DOUBLE* pVal);
    [propget, id(18), helpstring("property SemiMajor")] HRESULT SemiMajor([out, retval] DOUBLE* pVal);
    [propget, id(19), helpstring("property SemiMinor")] HRESULT SemiMinor([out, retval] DOUBLE* pVal);
    [propget, id(20), helpstring("property ProjectionParam")] HRESULT ProjectionParam([in] tkProjectionParameter name, [in] double* Value, [out, retval] VARIANT_BOOL* pVal);
    [propget, id(21), helpstring("property IsEmpty")] HRESULT IsEmpty([out, retval] VARIANT_BOOL* retVal);
    [id(22), helpstring("method CopyFrom")] HRESULT CopyFrom([in]IGeoProjection* sourceProj, [out, retval] VARIANT_BOOL* pVal);
    [propget, id(23), helpstring("property Name")] HRESULT Name([out, retval] BSTR* pVal);
    [propget, id(24), helpstring("property ProjectionName")] HRESULT ProjectionName([out, retval] BSTR* pVal);
    [propget, id(25), helpstring("property GeogCSName")] HRESULT GeogCSName([out, retval] BSTR* pVal);
    [propget, id(26), helpstring("property GeogCSParam")] HRESULT GeogCSParam([in] tkGeogCSParameter name, [in]DOUBLE* pVal, [out, retval]VARIANT_BOOL* retVal);
    // it's a duplicate of SetWellKnownGeogCS
    //[id(27), helpstring("method SetGeographicCS")] HRESULT SetGeographicCS([in] tkCoordinateSystem coordinateSystem);
    [id(28), helpstring("method SetWgs84Projection")] HRESULT SetWgs84Projection([in] tkWgs84Projection Projection);
    [id(29), helpstring("method SetNad83Projection")] HRESULT SetNad83Projection([in] tkNad83Projection Projection);
    [propget, id(30), helpstring("property IsSame")] HRESULT IsSameExt([in] IGeoProjection* proj, [in] IExtents* bounds,
        [in, defaultvalue(8)]int numSamplingPoints, [out, retval] VARIANT_BOOL* pVal);
    [id(31), helpstring("method ReadFromFile")] HRESULT ReadFromFile([in]BSTR Filename, [out, retval]VARIANT_BOOL* retVal);
    [id(32), helpstring("method WriteToFile")] HRESULT WriteToFile([in]BSTR Filename, [out, retval]VARIANT_BOOL* retVal);

    [id(33), helpstring("method ImportFromAutoDetect")] HRESULT ImportFromAutoDetect([in] BSTR proj, [out, retval] VARIANT_BOOL* retVal);
    [id(34), helpstring("method StartTransform")] HRESULT StartTransform([in] IGeoProjection* target, [out, retval] VARIANT_BOOL* retval);
    [id(35), helpstring("method StopTransform")] HRESULT StopTransform(void);
    [id(36), helpstring("method Transform")] HRESULT Transform([in, out] DOUBLE* x, [in, out] DOUBLE* y, [out, retval] VARIANT_BOOL* retval);
    [propget, id(37), helpstring("property HasTransformation")] HRESULT HasTransformation([out, retval] VARIANT_BOOL* pVal);
    [id(38), helpstring("method SetGoogleMercator")] HRESULT SetGoogleMercator([out, retval]VARIANT_BOOL* retVal);
    [id(39), helpstring("method Clear")] HRESULT Clear([out, retval]VARIANT_BOOL* retVal);
    [id(40), helpstring("method Clone")] HRESULT Clone([out, retval]IGeoProjection** retVal);
    [id(41), helpstring("method SetWgs84")] HRESULT SetWgs84([out, retval]VARIANT_BOOL* retVal);
    [propget, id(42), helpstring("property IsFrozen")] HRESULT IsFrozen([out, retval] VARIANT_BOOL* retVal);
    [id(43), helpstring("method TryAutoDetectEpsg")] HRESULT TryAutoDetectEpsg([out]int* epsgCode, [out, retval]VARIANT_BOOL* retVal);
    [id(44)] HRESULT WriteToFileEx([in] BSTR filename, [in] VARIANT_BOOL esri, [out, retval] VARIANT_BOOL* retVal);
    [id(45)] HRESULT ReadFromFileEx([in] BSTR filename, [in] VARIANT_BOOL esri, [out, retval] VARIANT_BOOL* retVal);
    [id(46)] HRESULT ExportToEsri([out, retval] BSTR* retVal);
    [propget, id(47)] HRESULT LinearUnits([out, retval] tkUnitsOfMeasure* pVal);
};

[
    object,
    uuid(97A80176-EE9A-461E-B494-F4F168F16ECA),
    dual,
    nonextensible,
    helpstring("IGlobalSettings Interface"),
    pointer_default(unique)
]
interface IGlobalSettings : IDispatch {
    [propget, id(1), helpstring("property MinPolygonArea")] HRESULT MinPolygonArea([out, retval]DOUBLE* retVal);
    [propput, id(1), helpstring("property MinPolygonArea")] HRESULT MinPolygonArea([in]DOUBLE newVal);
    [propget, id(2), helpstring("property MinAreaToPerimeterRatio")] HRESULT MinAreaToPerimeterRatio([out, retval]DOUBLE* retVal);
    [propput, id(2), helpstring("property MinAreaToPerimeterRatio")] HRESULT MinAreaToPerimeterRatio([in]DOUBLE newVal);
    [propget, id(3), helpstring("property ClipperGcsMultiplicationFactor")] HRESULT ClipperGcsMultiplicationFactor([out, retval] DOUBLE* pVal);
    [propput, id(3), helpstring("property ClipperGcsMultiplicationFactor")] HRESULT ClipperGcsMultiplicationFactor([in] DOUBLE newVal);
    [propget, id(4), helpstring("property ShapefileFastMode")] HRESULT ShapefileFastMode([out, retval]VARIANT_BOOL* retVal);
    [propput, id(4), helpstring("property ShapefileFastMode")] HRESULT ShapefileFastMode([in]VARIANT_BOOL newVal);
    //[id(5), helpstring("method CreatePoint")] HRESULT CreatePoint([out,retval] IPoint** retVal);
    [propget, id(5), helpstring("property FastShapefileUnion")] HRESULT ShapefileFastUnion([out, retval] VARIANT_BOOL* pVal);
    [propput, id(5), helpstring("property FastShapefileUnion")] HRESULT ShapefileFastUnion([in] VARIANT_BOOL newVal);

    [propget, id(6), helpstring("property GdalLastErrorNo")] HRESULT GdalLastErrorNo([out, retval] tkGdalError* pVal);
    [propget, id(7), helpstring("property GdalLastErrorType")] HRESULT GdalLastErrorType([out, retval] tkGdalErrorType* pVal);
    [propget, id(8), helpstring("property GdalLastErrorMsg")] HRESULT GdalLastErrorMsg([out, retval] BSTR* pVal);
    [id(9), helpstring("method ResetGdalError")] HRESULT ResetGdalError(void);
    [propget, id(10), helpstring("property GdalReprojectionErrorMsg")] HRESULT GdalReprojectionErrorMsg([out, retval] BSTR* pVal);
    [propget, id(11), helpstring("property LabelsSmoothingMode")] HRESULT LabelsSmoothingMode([out, retval] tkSmoothingMode* pVal);
    [propput, id(11), helpstring("property LabelsSmoothingMode")] HRESULT LabelsSmoothingMode([in] tkSmoothingMode newVal);
    [propget, id(12), helpstring("property LabelsCompositingQuality")] HRESULT LabelsCompositingQuality([out, retval] tkCompositingQuality* pVal);
    [propput, id(12), helpstring("property LabelsCompositingQuality")] HRESULT LabelsCompositingQuality([in] tkCompositingQuality newVal);
    [propget, id(13), helpstring("property LocalizedString")] HRESULT LocalizedString([in] tkLocalizedStrings unit, [out, retval] BSTR* retVal);
    [propput, id(13), helpstring("property LocalizedString")] HRESULT LocalizedString([in] tkLocalizedStrings unit, [in] BSTR localizedString);
    [propget, id(14), helpstring("property ZoomToFirstLayer")] HRESULT ZoomToFirstLayer([out, retval]VARIANT_BOOL* retVal);
    [propput, id(14), helpstring("property ZoomToFirstLayer")] HRESULT ZoomToFirstLayer([in]VARIANT_BOOL newVal);
    [propget, id(15), helpstring("property LabelsCollisionMode")] HRESULT LabelsCollisionMode([out, retval]tkCollisionMode* retVal);
    [propput, id(15), helpstring("property LabelsCollisionMode")] HRESULT LabelsCollisionMode([in]tkCollisionMode newVal);
    [propget, id(16), helpstring("property GridProxyFormat")] HRESULT GridProxyFormat([out, retval]tkGridProxyFormat* retVal);
    [propput, id(16), helpstring("property GridProxyFormat")] HRESULT GridProxyFormat([in]tkGridProxyFormat newVal);
    [propget, id(17), helpstring("property MaxDirectGridSizeMb")] HRESULT MaxDirectGridSizeMb([out, retval]double* retVal);
    [propput, id(17), helpstring("property MaxDirectGridSizeMb")] HRESULT MaxDirectGridSizeMb([in]double newVal);
    [propget, id(18), helpstring("property GridProxyMode")] HRESULT GridProxyMode([out, retval] tkGridProxyMode *retVal);
    [propput, id(18), helpstring("property GridProxyMode")] HRESULT GridProxyMode([in] tkGridProxyMode newVal);
    [propget, id(19), helpstring("property MaxUniqueValuesCountForGridScheme")] HRESULT MaxUniqueValuesCountForGridScheme([out, retval] int *retVal);
    [propput, id(19), helpstring("property MaxUniqueValuesCountForGridScheme")] HRESULT MaxUniqueValuesCountForGridScheme([in] int newVal);
    [propget, id(21), helpstring("property RandomColorSchemeForGrids")] HRESULT RandomColorSchemeForGrids([out, retval] VARIANT_BOOL *retVal);
    [propput, id(21), helpstring("property RandomColorSchemeForGrids")] HRESULT RandomColorSchemeForGrids([in] VARIANT_BOOL newVal);
    [propget, id(22), helpstring("property DefaultColorSchemeForGrids")] HRESULT DefaultColorSchemeForGrids([out, retval] PredefinedColorScheme *retVal);
    [propput, id(22), helpstring("property DefaultColorSchemeForGrids")] HRESULT DefaultColorSchemeForGrids([in] PredefinedColorScheme newVal);
    [propget, id(23), helpstring("property ShapeOutputValidationMode")] HRESULT ShapeOutputValidationMode([out, retval] tkShapeValidationMode *retVal);
    [propput, id(23), helpstring("property ShapeOutputValidationMode")] HRESULT ShapeOutputValidationMode([in] tkShapeValidationMode newVal);
    [propget, id(24), helpstring("property ShapeInputValidationMode")] HRESULT ShapeInputValidationMode([out, retval] tkShapeValidationMode *retVal);
    [propput, id(24), helpstring("property ShapeInputValidationMode")] HRESULT ShapeInputValidationMode([in] tkShapeValidationMode newVal);
    [propget, id(25), helpstring("property GeometryEngine")] HRESULT GeometryEngine([out, retval] tkGeometryEngine *retVal);
    [propput, id(25), helpstring("property GeometryEngine")] HRESULT GeometryEngine([in] tkGeometryEngine newVal);
    [propget, id(26), helpstring("property SaveGridColorSchemeToFile")] HRESULT SaveGridColorSchemeToFile([out, retval] VARIANT_BOOL *retVal);
    [propput, id(26), helpstring("property SaveGridColorSchemeToFile")] HRESULT SaveGridColorSchemeToFile([in] VARIANT_BOOL newVal);
    [propget, id(27)] HRESULT MinOverviewWidth([out, retval] int *retVal);
    [propput, id(27)] HRESULT MinOverviewWidth([in] int newVal);
    [propget, id(28)] HRESULT RasterOverviewCreation([out, retval] tkRasterOverviewCreation *retVal);
    [propput, id(28)] HRESULT RasterOverviewCreation([in] tkRasterOverviewCreation newVal);
    [propget, id(29)] HRESULT TiffCompression([out, retval] tkTiffCompression *retVal);
    [propput, id(29)] HRESULT TiffCompression([in] tkTiffCompression newVal);
    [propget, id(30)] HRESULT RasterOverviewResampling([out, retval] tkGDALResamplingMethod *retVal);
    [propput, id(30)] HRESULT RasterOverviewResampling([in] tkGDALResamplingMethod newVal);
    [propget, id(31)] HRESULT TilesThreadPoolSize([out, retval]int* retVal);
    [propput, id(31)] HRESULT TilesThreadPoolSize([in]int newVal);
    [propget, id(32)] HRESULT LoadSymbologyOnAddLayer([out, retval]VARIANT_BOOL* retVal);
    [propput, id(32)] HRESULT LoadSymbologyOnAddLayer([in]VARIANT_BOOL newVal);
    [propget, id(33)] HRESULT TilesMinZoomOnProjectionMismatch([out, retval]int* retVal);
    [propput, id(33)] HRESULT TilesMinZoomOnProjectionMismatch([in]int newVal);
    [propget, id(34)] HRESULT ImageUpsamplingMode([out, retval]tkInterpolationMode* retVal);
    [propput, id(34)] HRESULT ImageUpsamplingMode([in]tkInterpolationMode newVal);
    [propget, id(35)] HRESULT ImageDownsamplingMode([out, retval]tkInterpolationMode* retVal);
    [propput, id(35)] HRESULT ImageDownsamplingMode([in]tkInterpolationMode newVal);
    [propget, id(36)] HRESULT OgrStringEncoding([out, retval]tkOgrEncoding* retVal);
    [propput, id(36)] HRESULT OgrStringEncoding([in]tkOgrEncoding newVal);
    [propget, id(37)] HRESULT OgrLayerMaxFeatureCount([out, retval] LONG* pVal);
    [propput, id(37)] HRESULT OgrLayerMaxFeatureCount([in] LONG newVal);
    [propget, id(38)] HRESULT AutoChooseOgrLoadingMode([out, retval] VARIANT_BOOL* pVal);
    [propput, id(38)] HRESULT AutoChooseOgrLoadingMode([in] VARIANT_BOOL newVal);
    [propget, id(39)] HRESULT ReprojectLayersOnAdding([out, retval] VARIANT_BOOL* pVal);
    [propput, id(39)] HRESULT ReprojectLayersOnAdding([in] VARIANT_BOOL newVal);
    [propget, id(40)] HRESULT ApplicationCallback([out, retval] ICallback** pVal);
    [propput, id(40)] HRESULT ApplicationCallback([in] ICallback* newVal);
    [propget, id(41)] HRESULT HotTrackingMaxShapeCount([out, retval] LONG* pVal);
    [propput, id(41)] HRESULT HotTrackingMaxShapeCount([in] LONG newVal);
    [propget, id(42)] HRESULT AllowLayersWithoutProjections([out, retval] VARIANT_BOOL* pVal);
    [propput, id(42)] HRESULT AllowLayersWithoutProjections([in] VARIANT_BOOL newVal);
    [propget, id(43)] HRESULT AllowProjectionMismatch([out, retval] VARIANT_BOOL* pVal);
    [propput, id(43)] HRESULT AllowProjectionMismatch([in] VARIANT_BOOL newVal);
    [propget, id(44)] HRESULT MouseTolerance([out, retval] DOUBLE* pVal);
    [propput, id(44)] HRESULT MouseTolerance([in] DOUBLE newVal);
    [propget, id(45)] HRESULT MaxReprojectionShapeCount([out, retval] LONG* pVal);
    [propput, id(45)] HRESULT MaxReprojectionShapeCount([in] LONG newVal);
    [propget, id(46)] HRESULT PixelOffsetMode([out, retval] tkPixelOffsetMode* pVal);
    [propput, id(46)] HRESULT PixelOffsetMode([in] tkPixelOffsetMode newVal);
    [propget, id(47)] HRESULT AutoChooseRenderingHintForLabels([out, retval] VARIANT_BOOL* pVal);
    [propput, id(47)] HRESULT AutoChooseRenderingHintForLabels([in] VARIANT_BOOL newVal);
    [propget, id(48)] HRESULT GdalVersion([out, retval] BSTR* pVal);
    [propget, id(49)] HRESULT OgrLayerForceUpdateMode([out, retval] VARIANT_BOOL* pVal);
    [propput, id(49)] HRESULT OgrLayerForceUpdateMode([in] VARIANT_BOOL newVal);
    [propget, id(50)] HRESULT ForceHideLabels([out, retval] VARIANT_BOOL* pVal);
    [propput, id(50)] HRESULT ForceHideLabels([in] VARIANT_BOOL newVal);
    [propget, id(51)] HRESULT GdalPluginPath([out, retval] BSTR* pVal);
    [propput, id(51)] HRESULT GdalPluginPath([in] BSTR newVal);
    [propget, id(52)] HRESULT GdalDataPath([out, retval] BSTR* pVal);
    [propput, id(52)] HRESULT GdalDataPath([in] BSTR newVal);
    [propget, id(53)] HRESULT BingApiKey([out, retval] BSTR* pVal);
    [propput, id(53)] HRESULT BingApiKey([in] BSTR newVal);
    [id(54)] HRESULT TestBingApiKey([in] BSTR key, [out, retval] VARIANT_BOOL* retVal);
    [id(55)] HRESULT SetHereMapsApiKey([in] BSTR appId, [in] BSTR appCode);
    [propget, id(56)] HRESULT CompressOverviews([out, retval] tkTiffCompression* pVal);
    [propput, id(56)] HRESULT CompressOverviews([in] tkTiffCompression newVal);
    [propget, id(57)] HRESULT GridFavorGreyscale([out, retval] VARIANT_BOOL* pVal);
    [propput, id(57)] HRESULT GridFavorGreyscale([in] VARIANT_BOOL newVal);
    [propget, id(58)] HRESULT GridUseHistogram([out, retval] VARIANT_BOOL* pVal);
    [propput, id(58)] HRESULT GridUseHistogram([in] VARIANT_BOOL newVal);
    [propget, id(59)] HRESULT OverrideLocalCallback([out, retval] VARIANT_BOOL* pVal);
    [propput, id(59)] HRESULT OverrideLocalCallback([in] VARIANT_BOOL newVal);
    [propget, id(60)] HRESULT CacheDbfRecords([out, retval] VARIANT_BOOL* pVal);
    [propput, id(60)] HRESULT CacheDbfRecords([in] VARIANT_BOOL newVal);
    [propget, id(61)] HRESULT CacheShapeRenderingData([out, retval] VARIANT_BOOL* pVal);
    [propput, id(61)] HRESULT CacheShapeRenderingData([in] VARIANT_BOOL newVal);
    [propget, id(62)] HRESULT TileLogFilename([out, retval]BSTR* retVal);
    [propget, id(63)] HRESULT TileLogIsOpened([out, retval]VARIANT_BOOL* retVal);
    [propget, id(64)] HRESULT LogTileErrorsOnly([out, retval]VARIANT_BOOL* retVal);
    [propput, id(64)] HRESULT LogTileErrorsOnly([in]VARIANT_BOOL newVal);
    [id(65)] HRESULT StartLogTileRequests([in]BSTR Filename, [in, defaultvalue(0)]VARIANT_BOOL errorsOnly, [out, retval]VARIANT_BOOL* retVal);
    [id(66)] HRESULT StopLogTileRequests();
    [propget, id(67)] HRESULT WmsDiskCaching([out, retval] VARIANT_BOOL* pVal);
    [propput, id(67)] HRESULT WmsDiskCaching([in] VARIANT_BOOL newVal);
    [propget, id(68)] HRESULT CallbackVerbosity([out, retval] tkCallbackVerbosity* pVal);
    [propput, id(68)] HRESULT CallbackVerbosity([in] tkCallbackVerbosity newVal);
    [propget, id(69)] HRESULT OgrShareConnection([out, retval] VARIANT_BOOL* pVal);
    [propput, id(69)] HRESULT OgrShareConnection([in] VARIANT_BOOL newVal);
    [propget, id(70)] HRESULT OgrInterpretYNStringAsBoolean([out, retval] VARIANT_BOOL* pVal);
    [propput, id(70)] HRESULT OgrInterpretYNStringAsBoolean([in] VARIANT_BOOL newVal);
    [propget, id(71)] HRESULT AllowLayersWithIncompleteReprojection([out, retval] VARIANT_BOOL* pVal);
    [propput, id(71)] HRESULT AllowLayersWithIncompleteReprojection([in] VARIANT_BOOL newVal);
    [id(72)] HRESULT SetHttpUserAgent([in] BSTR userAgent);
};

[
    object,
    uuid(6BC1A3D4-74B0-426E-8BE8-01AE26A4F470),
    dual,
    nonextensible,
    helpstring("ITiles Interface"),
    pointer_default(unique)
]
interface ITiles : IDispatch {

    [propget, id(1), helpstring("")] HRESULT Visible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(1), helpstring("")] HRESULT Visible([in] VARIANT_BOOL newVal);
    [propget, id(2), helpstring("")] HRESULT Provider([out, retval] tkTileProvider* pVal);
    [propput, id(2), helpstring("")] HRESULT Provider([in] tkTileProvider newVal);
    [propget, id(3), helpstring("")] HRESULT GridLinesVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(3), helpstring("")] HRESULT GridLinesVisible([in] VARIANT_BOOL newVal);
    [propget, id(4), helpstring("")] HRESULT DoCaching([in]tkCacheType cacheType, [out, retval] VARIANT_BOOL* pVal);
    [propput, id(4), helpstring("")] HRESULT DoCaching([in]tkCacheType cacheType, [in] VARIANT_BOOL newVal);
    [propget, id(5), helpstring("")] HRESULT UseCache([in]tkCacheType cacheType, [out, retval] VARIANT_BOOL* pVal);
    [propput, id(5), helpstring("")] HRESULT UseCache([in]tkCacheType cacheType, [in] VARIANT_BOOL newVal);
    [propget, id(6), helpstring("")] HRESULT UseServer([out, retval] VARIANT_BOOL* pVal);
    [propput, id(6), helpstring("")] HRESULT UseServer([in] VARIANT_BOOL newVal);

    [propget, id(7), helpstring("")] HRESULT CacheSize([in]tkCacheType cacheType, [out, retval] double* retVal);
    [propget, id(8), helpstring("")] HRESULT MaxCacheSize([in]tkCacheType cacheType, [out, retval] double* pVal);
    [propput, id(8), helpstring("")] HRESULT MaxCacheSize([in]tkCacheType cacheType, [in] double newVal);
    [propget, id(9), helpstring("")] HRESULT MinScaleToCache([out, retval] int* pVal);
    [propput, id(9), helpstring("")] HRESULT MinScaleToCache([in] int newVal);
    [propget, id(10), helpstring("")] HRESULT MaxScaleToCache([out, retval] int* pVal);
    [propput, id(10), helpstring("")] HRESULT MaxScaleToCache([in] int newVal);

    [id(11), helpstring("")] HRESULT ClearCache([in]tkCacheType cacheType);
    [id(12), helpstring("")] HRESULT ClearCache2([in]tkCacheType cacheType,
        [in]int ProviderId,
        [in, defaultvalue(0)]int fromScale,
        [in, defaultvalue(100)]int toScale);

    [propget, id(13), helpstring("")] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(13), helpstring("")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(14), helpstring("")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(15), helpstring("")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(16), helpstring("")] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(16), helpstring("")] HRESULT Key([in]BSTR newVal);

    [propget, id(18), helpstring("")] HRESULT CacheSize2([in]tkCacheType cacheType,
        [in, defaultvalue(-1)]int provider,
        [in, defaultvalue(-1)]int scale,
        [out, retval] double* retVal);

    [id(19), helpstring("")] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(20), helpstring("")] HRESULT Deserialize([in]BSTR newVal);
    [id(21), helpstring("")] HRESULT SetProxy([in] BSTR address, [in] int port, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(22), helpstring("")] HRESULT Proxy([out, retval] BSTR* pVal);
    [id(23), helpstring("")] HRESULT AutodetectProxy([out, retval] VARIANT_BOOL* retVal);
    [propget, id(24), helpstring("")] HRESULT DiskCacheFilename([out, retval] BSTR* pVal);
    [propput, id(24), helpstring("")] HRESULT DiskCacheFilename([in] BSTR newVal);
    [propget, id(25), helpstring("")] HRESULT Providers([out, retval] ITileProviders** pVal);
    [propget, id(26), helpstring("")] HRESULT ProviderId([out, retval] int* retVal);
    [propput, id(26), helpstring("")] HRESULT ProviderId([in] int newVal);
    [id(27), helpstring("")] HRESULT GetTilesIndices([in]IExtents* boundsDegrees, [in]int zoom, [in]int ProviderId, [out, retval] IExtents** retVal);
    [id(28), helpstring("")] HRESULT Prefetch([in]double minLat, [in]double maxLat, [in]double minLng, [in]double maxLng,
        [in]int zoom, [in]int ProviderId, IStopExecution* stop, [out, retval]LONG* retVal);
    [id(29), helpstring("")] HRESULT Prefetch2([in]int minX, [in]int maxX, [in]int minY, [in]int maxY,
        [in]int zoom, [in]int ProviderId, IStopExecution* stop, [out, retval]LONG* retVal);

    [id(30), helpstring("")] HRESULT get_DiskCacheCount([in]int provider, [in]int zoom, [in]int xMin, [in]int xMax,
        [in]int yMin, [in]int yMax, [out, retval]LONG* retVal);
    [propget, id(31), helpstring("")] HRESULT ProviderName([out, retval] BSTR* retVal);
    [id(32), helpstring("")] HRESULT CheckConnection([in]BSTR url, [out, retval] VARIANT_BOOL* retVal);
    [id(33), helpstring("")] HRESULT GetTileBounds([in]int ProviderId, [in]int zoom,
        [in]int tileX, [in]int tileY, [out, retval] IExtents** retVal);
    [propget, id(34), helpstring("")] HRESULT CurrentZoom([out, retval] int* retVal);

    [id(37), helpstring("")] HRESULT PrefetchToFolder([in]IExtents* Extents, [in]int zoom, [in]int ProviderId,
        [in]BSTR savePath, [in]BSTR fileExtension, [in]IStopExecution* stop, [out, retval]LONG* retVal);

    [propget, id(43), helpstring("")] HRESULT DelayRequestTimeout([out, retval]long* retVal);
    [propput, id(43), helpstring("")] HRESULT DelayRequestTimeout([in]long newVal);

    [propget, id(47), helpstring("")] HRESULT MaxZoom([out, retval]int* retVal);
    [propget, id(48), helpstring("")] HRESULT MinZoom([out, retval]int* retVal);
    [propget, id(49), helpstring("")] HRESULT ServerProjection([out, retval]IGeoProjection** retVal);
    [propget, id(50), helpstring("")] HRESULT ProjectionStatus([out, retval]tkTilesProjectionStatus* retVal);
    [id(51)] HRESULT SetProxyAuthentication([in] BSTR username, [in] BSTR password, [in] BSTR domain, [out, retval] VARIANT_BOOL* retVal);
    [id(52)] HRESULT ClearProxyAuthorization();
    [propget, id(53)] HRESULT ProxyAuthenticationScheme([out, retval] tkProxyAuthentication* pVal);
    [propput, id(53)] HRESULT ProxyAuthenticationScheme([in] tkProxyAuthentication newVal);
    [propget, id(54)] HRESULT ProjectionIsSphericalMercator([out, retval] VARIANT_BOOL* pVal);
};

[
    object,
    uuid(60EBE66A-56CD-4609-A118-A9D85A6DFA2F),
    dual,
    nonextensible,
    helpstring("ITileProviders Interface"),
    pointer_default(unique)
]
interface ITileProviders : IDispatch {
    [id(1), helpstring("")] HRESULT Remove([in] LONG ProviderId, [in]VARIANT_BOOL clearCache, [out, retval] VARIANT_BOOL* retVal);
    [id(2), helpstring("")] HRESULT Clear(VARIANT_BOOL clearCache);
    [propget, id(3), helpstring("")] HRESULT Count([out, retval] LONG* pVal);
    [id(4), helpstring("")] HRESULT Add([in]int Id,
        [in]BSTR Name,
        [in]BSTR UrlPattern,
        [in]tkTileProjection Projection,
        [in, defaultvalue(0)]int MinZoom,
        [in, defaultvalue(17)]int MaxZoom,
        [in, defaultvalue("")]BSTR Copyright,
        [out, retval] VARIANT_BOOL* retVal);
    [propget, id(5), helpstring("")] HRESULT Id([in] int Index, [out, retval] LONG* retVal);
    [propget, id(6), helpstring("")] HRESULT Name([in] int Index, [out, retval] BSTR* retVal);
    [propput, id(6), helpstring("")] HRESULT Name([in] int Index, [in] BSTR newVal);
    [propget, id(7), helpstring("")] HRESULT UrlPattern([in] int Index, [out, retval] BSTR* retVal);
    [propget, id(8), helpstring("")] HRESULT Projection([in] int Index, [out, retval] tkTileProjection* retVal);
    [propget, id(9), helpstring("")] HRESULT MinZoom([in] int Index, [out, retval] int* retVal);
    [propget, id(10), helpstring("")] HRESULT MaxZoom([in] int Index, [out, retval] int* retVal);
    [propget, id(11), helpstring("")] HRESULT Version([in] int Index, [out, retval] BSTR* retVal);
    [propput, id(11), helpstring("")] HRESULT Version([in] int Index, [in] BSTR pVal);
    [propget, id(12), helpstring("")] HRESULT IndexByProvider([in] tkTileProvider provider, [out, retval] int* retVal);
    [propget, id(13), helpstring("")] HRESULT IndexByProviderId([in] int ProviderId, [out, retval] int* retVal);
    [propget, id(14), helpstring("")] HRESULT IsCustom([in] int Index, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(15), helpstring("")] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(15), helpstring("")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(16), helpstring("")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(17), helpstring("")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(18), helpstring("")] HRESULT Language([in] int Index, [out, retval] BSTR* retVal);
    [propput, id(18), helpstring("")] HRESULT Language([in] int Index, [in] BSTR twoLetterCode);
    [propget, id(19)] HRESULT GeographicBounds([in] int Index, [out, retval] IExtents** pVal);
    [propput, id(19)] HRESULT GeographicBounds([in] int Index, [in] IExtents* newVal);
};
[
    object,
    uuid(210C1174-B407-4942-A2F6-E546FE48CFA7),
    dual,
    nonextensible,
    helpstring("IMeasuring Interface"),
    pointer_default(unique)
]
interface IMeasuring : IDispatch {
    [propget, id(1), helpstring("")] HRESULT Length([out, retval] double* retVal);
    [propget, id(2), helpstring("")] HRESULT PointCount([out, retval] long* retVal);
    [id(3), helpstring("")] HRESULT UndoPoint([out, retval] VARIANT_BOOL* retVal);
    [id(4)] HRESULT get_PointXY([in]long pointIndex, [out]double* X, [out]double* Y, [out, retval]VARIANT_BOOL* retVal);
    [id(5)] HRESULT get_AreaWithClosingVertex([in]double lastPointProjX, [in]double lastPointProjY, [out, retval]double* retVal);
    [propget, id(6), helpstring("")] HRESULT MeasuringType([out, retval] tkMeasuringType* retVal);
    [propput, id(6), helpstring("")] HRESULT MeasuringType([in] tkMeasuringType newVal);
    [id(7), helpstring("")] HRESULT FinishMeasuring();
    [propget, id(8), helpstring("")] HRESULT Area([out, retval]double* retVal);
    [propget, id(9), helpstring("")] HRESULT IsStopped([out, retval]VARIANT_BOOL* retVal);
    [id(10), helpstring("")] HRESULT Clear();
    [propget, id(11), helpstring("")] HRESULT Persistent([out, retval] VARIANT_BOOL* retVal);
    [propput, id(11), helpstring("")] HRESULT Persistent([in] VARIANT_BOOL newVal);
    [propget, id(12), helpstring("")] HRESULT ShowBearing([out, retval] VARIANT_BOOL* retVal);
    [propput, id(12), helpstring("")] HRESULT ShowBearing([in] VARIANT_BOOL newVal);
    [propget, id(13), helpstring("")] HRESULT IsUsingEllipsoid([out, retval] VARIANT_BOOL* retVal);
    [propget, id(14), helpstring("")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(15), helpstring("")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(16), helpstring("")] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(16), helpstring("")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(17), helpstring("")] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(17), helpstring("")] HRESULT Key([in]BSTR newVal);
    [propget, id(18)] HRESULT IsEmpty([out, retval] VARIANT_BOOL* pVal);
    [propget, id(19)] HRESULT BearingType([out, retval] tkBearingType* pVal);
    [propput, id(19)] HRESULT BearingType([in] tkBearingType newVal);
    [propget, id(20)] HRESULT ShowLength([out, retval] VARIANT_BOOL* pVal);
    [propput, id(20)] HRESULT ShowLength([in] VARIANT_BOOL newVal);
    [propget, id(21)] HRESULT LengthUnits([out, retval] tkLengthDisplayMode* pVal);
    [propput, id(21)] HRESULT LengthUnits([in] tkLengthDisplayMode newVal);
    [propget, id(22)] HRESULT AreaUnits([out, retval] tkAreaDisplayMode* pVal);
    [propput, id(22)] HRESULT AreaUnits([in] tkAreaDisplayMode newVal);
    [propget, id(23)] HRESULT AngleFormat([out, retval] tkAngleFormat* pVal);
    [propput, id(23)] HRESULT AngleFormat([in] tkAngleFormat newVal);
    [propget, id(24)] HRESULT AnglePrecision([out, retval] LONG* pVal);
    [propput, id(24)] HRESULT AnglePrecision([in] LONG newVal);
    [propget, id(25)] HRESULT AreaPrecision([out, retval] LONG* pVal);
    [propput, id(25)] HRESULT AreaPrecision([in] LONG newVal);
    [propget, id(26)] HRESULT LengthPrecision([out, retval] LONG* pVal);
    [propput, id(26)] HRESULT LengthPrecision([in] LONG newVal);
    [propget, id(27)] HRESULT PointsVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(27)] HRESULT PointsVisible([in] VARIANT_BOOL newVal);
    [propget, id(28)] HRESULT LineColor([out, retval] OLE_COLOR* pVal);
    [propput, id(28)] HRESULT LineColor([in] OLE_COLOR newVal);
    [propget, id(29)] HRESULT FillColor([out, retval] OLE_COLOR* pVal);
    [propput, id(29)] HRESULT FillColor([in] OLE_COLOR newVal);
    [propget, id(30)] HRESULT FillTransparency([out, retval] BYTE* pVal);
    [propput, id(30)] HRESULT FillTransparency([in] BYTE newVal);
    [propget, id(31)] HRESULT LineWidth([out, retval] FLOAT* pVal);
    [propput, id(31)] HRESULT LineWidth([in] FLOAT newVal);
    [propget, id(32)] HRESULT LineStyle([out, retval] tkDashStyle* pVal);
    [propput, id(32)] HRESULT LineStyle([in] tkDashStyle newVal);
    [propget, id(36)] HRESULT PointLabelsVisible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(36)] HRESULT PointLabelsVisible([in] VARIANT_BOOL newVal);
    [propget, id(37)] HRESULT ShowTotalLength([out, retval] VARIANT_BOOL* pVal);
    [propput, id(37)] HRESULT ShowTotalLength([in] VARIANT_BOOL newVal);
    [propget, id(38)] HRESULT UndoButton([out, retval] tkUndoShortcut* pVal);
    [propput, id(38)] HRESULT UndoButton([in] tkUndoShortcut newVal);
    [id(39)] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(40)] HRESULT Deserialize([in] BSTR state, [out, retval] VARIANT_BOOL* retVal);
};

[
    object,
    uuid(B96029D1-C6D6-4EF5-A0A4-B0DF49434DEF),
    dual,
    nonextensible,
    helpstring("IShapeValidationInfo Interface"),
    pointer_default(unique)
]
interface IShapeValidationInfo : IDispatch {
    [propget, id(1), helpstring("")] HRESULT ClassName([out, retval] BSTR* retVal);
    [propget, id(2), helpstring("")] HRESULT MethodName([out, retval] BSTR* retVal);
    [propget, id(3), helpstring("")] HRESULT ParameterName([out, retval] BSTR* retVal);
    [propget, id(4), helpstring("")] HRESULT ValidationType([out, retval] tkShapeValidationType* retVal);
    [propget, id(5), helpstring("")] HRESULT ValidationMode([out, retval] tkShapeValidationMode* retVal);
    [propget, id(6), helpstring("")] HRESULT IsValid([out, retval] VARIANT_BOOL* retVal);
    [propget, id(7), helpstring("")] HRESULT Status([out, retval] tkShapeValidationStatus* retVal);
    [propget, id(8), helpstring("")] HRESULT WasValidated([out, retval] VARIANT_BOOL* retVal);
    [propget, id(9), helpstring("")] HRESULT StillInvalidCount([out, retval] int* retVal);
    [propget, id(10), helpstring("")] HRESULT WereInvalidCount([out, retval] int* retVal);
    [propget, id(11), helpstring("")] HRESULT FixedCount([out, retval] int* retVal);
    [propget, id(12), helpstring("")] HRESULT SkippedCount([out, retval] int* retVal);
};

[
    object,
    uuid(C0FBAA85-8657-4B72-A52B-9EF837C0BAB5),
    dual,
    nonextensible,
    helpstring("IFieldStatOperations Interface"),
    pointer_default(unique)
]
interface IFieldStatOperations : IDispatch {
    [id(1), helpstring("AddFieldIndex")] HRESULT AddFieldIndex([in]int fieldIndex, [in]tkFieldStatOperation operation);
    [id(2), helpstring("Remove")] HRESULT Remove([in]int operationIndex, [out, retval]VARIANT_BOOL* retVal);
    [id(3), helpstring("Clear")] HRESULT Clear();
    [propget, id(4), helpstring("Count")] HRESULT Count([out, retval] int* retVal);
    [propget, id(5), helpstring("Operation")] HRESULT Operation([in]int operationIndex, [out, retval] tkFieldStatOperation* retVal);
    [propget, id(6), helpstring("FieldIndex")] HRESULT FieldIndex([in]int operationIndex, [out, retval] int* retVal);
    [propget, id(7), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(8), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [id(9), helpstring("AddFieldName")] HRESULT AddFieldName([in]BSTR fieldName, [in]tkFieldStatOperation operation);
    [propget, id(10), helpstring("FieldName")] HRESULT FieldName([in]int operationIndex, [out, retval] BSTR* retVal);
    [id(11), helpstring("Validate")] HRESULT Validate([in]IShapefile* sf, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(12), helpstring("OperationIsValid")] HRESULT OperationIsValid([in]int operationIndex, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(13), helpstring("OperationIsValidReason")] HRESULT OperationIsValidReason([in]int operationIndex, [out, retval] tkFieldOperationValidity* retVal);
    [propget, id(14), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(14), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
};
[
    object,
    uuid(73BA5648-1A53-4C20-A01F-B37EBC9D093F),
    dual,
    nonextensible,
    helpstring("IFileManager Interface"),
    pointer_default(unique)
]
interface IFileManager : IDispatch {
    [propget, id(1), helpstring("IsSupported")] HRESULT IsSupported([in]BSTR Filename, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(2), helpstring("IsRgbImage")] HRESULT IsRgbImage([in]BSTR Filename, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(3), helpstring("IsGrid")] HRESULT IsGrid([in]BSTR Filename, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(4), helpstring("IsVectorLayer")] HRESULT IsVectorLayer([in]BSTR Filename, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(5), helpstring("OpenStrategy")] HRESULT OpenStrategy([in]BSTR Filename, [out, retval] tkFileOpenStrategy* retVal);
    [propget, id(6), helpstring("CanOpenAs")] HRESULT CanOpenAs([in]BSTR Filename, [in]tkFileOpenStrategy openStrategy, [out, retval] VARIANT_BOOL* retVal);
    [id(7), helpstring("Open")] HRESULT Open([in]BSTR Filename, [in, defaultvalue(fosAutoDetect)]tkFileOpenStrategy openStrategy, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval]IDispatch** retVal);
    [id(8), helpstring("OpenShapefile")] HRESULT OpenShapefile([in]BSTR Filename, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval]IShapefile** retVal);
    [id(9), helpstring("OpenRaster")] HRESULT OpenRaster([in]BSTR Filename, [in]tkFileOpenStrategy openStrategy, [in, defaultvalue(NULL)] ICallback* cBack, [out, retval]IImage** retVal);
    [propget, id(10), helpstring("IsSupportedBy")] HRESULT IsSupportedBy([in]BSTR Filename, [in]tkSupportType supportType, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(11), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(12), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(13), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(13), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(14), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(14), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [propget, id(15), helpstring("property LastOpenStrategy")] HRESULT LastOpenStrategy([out, retval] tkFileOpenStrategy *pVal);
    [propget, id(16), helpstring("property LastOpenFilename")] HRESULT LastOpenFilename([out, retval] BSTR *pVal);
    [propget, id(17), helpstring("property LastOpenIsSuccess")] HRESULT LastOpenIsSuccess([out, retval] VARIANT_BOOL *pVal);
    [propget, id(18)] HRESULT HasGdalOverviews([in]BSTR Filename, [out, retval] VARIANT_BOOL *pVal);
    [id(19)] HRESULT ClearGdalOverviews([in]BSTR Filename, [out, retval] VARIANT_BOOL *pVal);
    [id(20)] HRESULT BuildGdalOverviews([in]BSTR Filename, [out, retval] VARIANT_BOOL *pVal);
    [id(22)] HRESULT RemoveProxyForGrid([in]BSTR Filename, [out, retval] VARIANT_BOOL *pVal);
    [propget, id(23)] HRESULT HasValidProxyForGrid([in]BSTR Filename, [out, retval] VARIANT_BOOL *pVal);
    [id(24)] HRESULT OpenFromDatabase([in]BSTR connectionString, [in]BSTR LayerNameOrQuery, [out, retval]IOgrLayer** retVal);
    //[propget, id(21)] HRESULT NeedsGdalOverviews([in]BSTR Filename, [out, retval] VARIANT_BOOL *pVal);
    //[propget, id(7), helpstring("HasProjection")] HRESULT HasProjection([in]BSTR Filename, [out, retval] VARIANT_BOOL* retVal);
    //[propget, id(8), helpstring("GeoProjection")] HRESULT GeoProjection([in]BSTR Filename, [out, retval]IGeoProjection** retVal);
    //[propget, id(9), helpstring("IsSameProjection")] HRESULT IsSameProjection([in]BSTR Filename, [in]IGeoProjection* projection,  [out, retval] VARIANT_BOOL* retVal);
    //[id(13), helpstring("DeleteDatasource")] HRESULT DeleteDatasource([in]BSTR Filename, [out, retval]VARIANT_BOOL* retVal);
    [id(25)] HRESULT OpenVectorLayer([in] BSTR Filename,
        [in, defaultvalue(SHP_NULLSHAPE)] ShpfileType preferedShapeType,
        [in, defaultvalue(0)] VARIANT_BOOL forUpdate,
        [out, retval] IOgrLayer** retVal);
    [id(26)] HRESULT OpenVectorDatasource([in] BSTR Filename, [out, retval] IOgrDatasource** retVal);
    [propget, id(27)] HRESULT CdlgFilter([out, retval] BSTR* pVal);
    [propget, id(28)] HRESULT CdlgRasterFilter([out, retval] BSTR* pVal);
    [propget, id(29)] HRESULT CdlgVectorFilter([out, retval] BSTR* pVal);
    [propget, id(30)] HRESULT SupportedGdalFormats([out, retval] BSTR* pVal);
};


[
    object,
    uuid(EC7866BE-AE6C-46D6-8E9A-1F55D166F440),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IOgrDatasource : IDispatch {
    [propget, id(1)] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(2)] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(3)] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(3)] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(4)] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(4)] HRESULT Key([in]BSTR newVal);
    [id(5)] HRESULT Close();
    [id(6)] HRESULT Open([in]BSTR connectionString, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(7)] HRESULT LayerCount([out, retval]int* retVal);
    [id(8)] HRESULT GetLayer([in]int index, [in, defaultvalue(0)]VARIANT_BOOL forUpdate, [out, retval]IOgrLayer** retVal);
    [propget, id(9)] HRESULT DriverName([out, retval]BSTR* retVal);
    [id(10)] HRESULT GetLayerName([in]int layerIndex, [out, retval]BSTR* retVal);
    [id(11)] HRESULT GetLayerByName([in]BSTR LayerName, [in, defaultvalue(0)]VARIANT_BOOL forUpdate, [out, retval]IOgrLayer** retVal);
    [id(12)] HRESULT RunQuery([in]BSTR sql, [out, retval]IOgrLayer** retVal);
    [id(13)] HRESULT DeleteLayer([in]int layerIndex, [out, retval]VARIANT_BOOL* retVal);
    [id(14)] HRESULT TestCapability([in]tkOgrDSCapability capability, [out, retval]VARIANT_BOOL* retVal);
    [id(15)] HRESULT CreateLayer([in]BSTR LayerName, [in]ShpfileType shpType,
        [in, defaultvalue(NULL)]IGeoProjection* projection,
        [in, defaultvalue("")]BSTR creationOptions, [out, retval]VARIANT_BOOL* retVal);
    [id(16)] HRESULT LayerIndexByName([in]BSTR LayerName, [out, retval]int* retVal);
    [id(17)] HRESULT ImportShapefile([in] IShapefile* sf, [in]BSTR LayerName,
        [in, defaultvalue("")]BSTR creationOptions,
        [in, defaultvalue(TryFixSkipOnFailure)]tkShapeValidationMode shapeValidationMode,
        [out, retval]VARIANT_BOOL* retVal);
    [propget, id(18)] HRESULT DriverMetadata([in]tkGdalDriverMetadata metadata, [out, retval]BSTR* retVal);
    [propget, id(19)] HRESULT DriverMetadataCount([out, retval]int* retVal);
    [propget, id(20)] HRESULT DriverMetadataItem([in]int metadataIndex, [out, retval]BSTR* retVal);
    [id(21)] HRESULT ExecuteSQL([in]BSTR sql, [out]BSTR* errorMessage, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(22)] HRESULT GdalLastErrorMsg([out, retval]BSTR* retVal);
    [id(23)] HRESULT GetSchemas([out, retval] VARIANT* retVal);
    [id(24)] HRESULT GetLayer2([in] LONG index, [in] VARIANT_BOOL forUpdate, [in] VARIANT_BOOL newConnection, [out, retval] IOgrLayer** retVal);
    [id(25)] HRESULT Open2([in]BSTR connectionString, [in]VARIANT_BOOL forUpdate, [out, retval]VARIANT_BOOL* retVal);
};
[
    object,
    uuid(FF8206BE-8312-46BB-8AF0-A637CE1ACAF7),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IOgrLayer : IDispatch {
    [propget, id(1)] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(2)] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(3)] HRESULT GlobalCallback([out, retval] ICallback** retVal);
    [propput, id(3)] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(4)] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(4)] HRESULT Key([in]BSTR newVal);
    [id(5)] HRESULT Close();
    [propget, id(6)] HRESULT Name([out, retval]BSTR* retVal);
    [id(7)] HRESULT GetBuffer([out, retval]IShapefile** retVal);
    [id(8)] HRESULT ReloadFromSource([out, retval]VARIANT_BOOL* retVal);
    [id(9)] HRESULT RedefineQuery([in]BSTR newSql, [out, retval]VARIANT_BOOL* retVal);
    [id(10)] HRESULT GetConnectionString([out, retval]BSTR* retVal);
    [id(11)] HRESULT GetSourceQuery([out, retval]BSTR* retVal);
    [propget, id(12)] HRESULT GeoProjection([out, retval]IGeoProjection** retVal);
    [propget, id(13)] HRESULT ShapeType([out, retval]ShpfileType* retVal);
    [propget, id(14)] HRESULT DataIsReprojected([out, retval]VARIANT_BOOL* retVal);
    [propget, id(15)] HRESULT FIDColumnName([out, retval]BSTR* retVal);
    [id(16)] HRESULT SaveChanges([out]int* savedCount,
        [in, defaultvalue(ostSaveAll)]tkOgrSaveType saveType,
        [in, defaultvalue(1)]VARIANT_BOOL validateShapes, [out, retval]tkOgrSaveResult* retVal);
    [id(17)] HRESULT TestCapability([in]tkOgrLayerCapability capability, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(18)] HRESULT UpdateSourceErrorCount([out, retval]int* retVal);
    [propget, id(19)] HRESULT UpdateSourceErrorMsg([in]int errorIndex, [out, retval]BSTR* retVal);
    [propget, id(20)] HRESULT UpdateSourceErrorShapeIndex([in]int errorIndex, [out, retval]int* retVal);
    [propget, id(21)] HRESULT FeatureCount([in, defaultvalue(0)]VARIANT_BOOL forceLoading, [out, retval]int* retVal);
    [propget, id(22)] HRESULT Extents([out]IExtents** layerExtents, [in, defaultvalue(0)]VARIANT_BOOL forceLoading, [out, retval]VARIANT_BOOL *retVal);
    [propget, id(23)] HRESULT GeometryColumnName([out, retval]BSTR* retVal);
    [propget, id(24)] HRESULT SupportsEditing([in]tkOgrSaveType editingType, [out, retval]VARIANT_BOOL* retVal);
    [id(25)] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(26)] HRESULT Deserialize([in]BSTR newVal, [out, retval]VARIANT_BOOL* retVal);
    [id(27)] HRESULT OpenFromQuery([in]BSTR connectionString, [in]BSTR sql, [out, retval]VARIANT_BOOL* retVal);
    [id(28)] HRESULT OpenFromDatabase([in]BSTR connectionString, [in]BSTR LayerName, [in, defaultvalue(0)]VARIANT_BOOL forUpdate, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(29)] HRESULT SourceType([out, retval]tkOgrSourceType* retVal);
    [propget, id(30)] HRESULT GdalLastErrorMsg([out, retval]BSTR* retVal);
    [propget, id(31)] HRESULT DynamicLoading([out, retval] VARIANT_BOOL* pVal);
    [propput, id(31)] HRESULT DynamicLoading([in] VARIANT_BOOL newVal);
    [propget, id(32)] HRESULT MaxFeatureCount([out, retval] LONG* pVal);
    [propput, id(32)] HRESULT MaxFeatureCount([in] LONG newVal);
    [propget, id(34)] HRESULT SupportsStyles([out, retval] VARIANT_BOOL* pVal);
    [id(35)] HRESULT GetNumStyles([out, retval] LONG* pVal);
    [propget, id(36)] HRESULT StyleName([in] LONG styleIndex, [out, retval] BSTR* pVal);
    [id(38)] HRESULT ClearStyles([out, retval]VARIANT_BOOL* retVal);
    [id(39)] HRESULT RemoveStyle([in] BSTR styleName, [out, retval]VARIANT_BOOL* retVal);
    [id(44)] HRESULT GenerateCategories([in] BSTR FieldName, [in] tkClassificationType classificationType,
        [in] long numClasses, [in]tkMapColor colorStart, [in] tkMapColor colorEnd,
        [in]tkColorSchemeType schemeType, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(45)] HRESULT ShapeType2D([out, retval] ShpfileType* pVal);
    [propget, id(46)] HRESULT DriverName([out, retval] BSTR* pVal);
    [id(47)] HRESULT OpenFromFile([in] BSTR Filename, [in] VARIANT_BOOL forUpdate, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(48)] HRESULT AvailableShapeTypes([out, retval] VARIANT* pVal);
    [propget, id(49)] HRESULT ActiveShapeType([out, retval] ShpfileType* pVal);
    [propput, id(49)] HRESULT ActiveShapeType([in] ShpfileType newVal);
    [propget, id(50)] HRESULT IsExternalDatasource([out, retval] VARIANT_BOOL* pVal);
    [id(51)] HRESULT ExtendFromQuery([in]BSTR sql, [out, retval]VARIANT_BOOL* retVal);
};

[
    object,
    uuid(3AC6AC7B-4413-4A80-BA7F-6E2EEA495BBB),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IUndoList : IDispatch {
    [propget, id(1)] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(2)] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(3)] HRESULT Key([out, retval]BSTR* retVal);
    [propput, id(3)] HRESULT Key([in]BSTR newVal);
    [id(4)] HRESULT Undo([in, defaultvalue(-1)]VARIANT_BOOL ZoomToShape, [out, retval] VARIANT_BOOL* retVal);
    [id(5)] HRESULT Redo([in, defaultvalue(-1)]VARIANT_BOOL ZoomToShape, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(6)] HRESULT UndoCount([out, retval] LONG* pVal);
    [propget, id(7)] HRESULT RedoCount([out, retval] LONG* pVal);
    [propget, id(8)] HRESULT TotalLength([out, retval] LONG* pVal);
    [id(9)] HRESULT BeginBatch([out, retval] VARIANT_BOOL* retVal);
    [id(10)] HRESULT EndBatch([out, retval] LONG* retVal);
    [id(11)] HRESULT Add([in] tkUndoOperation operationType, [in] LONG LayerHandle, [in] LONG ShapeIndex, [out, retval] VARIANT_BOOL* retVal);
    [id(12)] HRESULT Clear();
    [id(13)] HRESULT ClearForLayer([in] LONG LayerHandle);
};
[
    object,
    uuid(9D96582B-FA79-43E9-AD1E-282A18CB796D),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IIdentifier : IDispatch {
    [propget, id(1)] HRESULT HotTracking([out, retval] VARIANT_BOOL* pVal);
    [propput, id(1)] HRESULT HotTracking([in] VARIANT_BOOL newVal);
    [propget, id(2)] HRESULT IdentifierMode([out, retval] tkIdentifierMode* pVal);
    [propput, id(2)] HRESULT IdentifierMode([in] tkIdentifierMode newVal);
    [propget, id(3)] HRESULT OutlineColor([out, retval] OLE_COLOR* pVal);
    [propput, id(3)] HRESULT OutlineColor([in] OLE_COLOR newVal);
    //[propget, id(4)] HRESULT ActiveLayer([out, retval] LONG* pVal);
    //[propput, id(4)] HRESULT ActiveLayer([in] LONG newVal);
};
[
    object,
    uuid(19A5F3CC-C366-4565-8463-9029DA068B33),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface ISelectionList : IDispatch {
    [id(1)] HRESULT AddShape([in] LONG layerHandle, [in] LONG shapeIndex);
    [propget, id(2)] HRESULT Count([out, retval] LONG* pVal);
    [propget, id(3)] HRESULT LayerHandle([in] LONG index, [out, retval] LONG* pVal);
    [propget, id(4)] HRESULT ShapeIndex([in] LONG index, [out, retval] LONG* pVal);
    [id(5)] HRESULT Clear();
    [id(6)] HRESULT RemoveByLayerHandle([in]LONG layerHandle);
    [id(7)] HRESULT AddPixel([in] LONG layerHandle, [in] LONG column, [in] LONG row);
    [propget, id(8)] HRESULT LayerType([in] LONG index, [out, retval] tkLayerType* pVal);
    [propget, id(9)] HRESULT RasterX([in] LONG index, [out, retval] LONG* pVal);
    [propget, id(10)] HRESULT RasterY([in] LONG index, [out, retval] LONG* pVal);
    [id(11)] HRESULT TogglePixel([in] LONG layerHandle, [in] LONG column, [in] LONG row);
    [propget, id(12)] HRESULT Row([in] LONG index, [out, retval] LONG* pVal);
    [propget, id(13)] HRESULT Column([in] LONG index, [out, retval] LONG* pVal);
};

[
    object,
    uuid(1FE926AB-1F1E-4058-8B1C-60AD2AF92096),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IDrawingRectangle : IDispatch {
    [propget, id(1)] HRESULT X([out, retval] DOUBLE* pVal);
    [propput, id(1)] HRESULT X([in] DOUBLE newVal);
    [propget, id(2)] HRESULT Y([out, retval] DOUBLE* pVal);
    [propput, id(2)] HRESULT Y([in] DOUBLE newVal);
    [propget, id(3)] HRESULT Width([out, retval] DOUBLE* pVal);
    [propput, id(3)] HRESULT Width([in] DOUBLE newVal);
    [propget, id(4)] HRESULT Height([out, retval] DOUBLE* pVal);
    [propput, id(4)] HRESULT Height([in] DOUBLE newVal);
    [propget, id(5)] HRESULT Visible([out, retval] VARIANT_BOOL* pVal);
    [propput, id(5)] HRESULT Visible([in] VARIANT_BOOL newVal);
    [propget, id(6)] HRESULT ReferenceType([out, retval] tkDrawReferenceList* pVal);
    [propput, id(6)] HRESULT ReferenceType([in] tkDrawReferenceList newVal);
    [propget, id(7)] HRESULT FillTransparency([out, retval] BYTE* pVal);
    [propput, id(7)] HRESULT FillTransparency([in] BYTE newVal);
    [propget, id(8)] HRESULT Color([out, retval] OLE_COLOR* pVal);
    [propput, id(8)] HRESULT Color([in] OLE_COLOR newVal);
    [propget, id(9)] HRESULT LineWidth([out, retval] float* pVal);
    [propput, id(9)] HRESULT LineWidth([in] float newVal);
};
[
    object,
    uuid(8B3238D8-BB62-4C41-88C2-F0BDDAAD8D03),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IGdalRasterBand : IDispatch {
    [propget, id(1)] HRESULT NoDataValue([out, retval] DOUBLE* pVal);
    [propget, id(2)] HRESULT Minimum([out, retval] DOUBLE* pVal);
    [propget, id(3)] HRESULT Maximum([out, retval] DOUBLE* pVal);
    [propget, id(4)] HRESULT OverviewCount([out, retval] LONG* pVal);
    [propget, id(5)] HRESULT ColorInterpretation([out, retval] tkColorInterpretation* pVal);
    [propput, id(5)] HRESULT ColorInterpretation([in] tkColorInterpretation newVal);
    [propget, id(6)] HRESULT DataType([out, retval] tkGdalDataType* pVal);
    [propget, id(7)] HRESULT XSize([out, retval] LONG* pVal);
    [propget, id(8)] HRESULT YSize([out, retval] LONG* pVal);
    [propget, id(9)] HRESULT BlockSizeX([out, retval] LONG* pVal);
    [propget, id(10)] HRESULT BlockSizeY([out, retval] LONG* pVal);
    [propget, id(11)] HRESULT UnitType([out, retval] BSTR* pVal);
    [propget, id(12)] HRESULT Scale([out, retval] DOUBLE* pVal);
    [propget, id(13)] HRESULT Offset([out, retval] DOUBLE* pVal);
    [propget, id(14)] HRESULT HasColorTable([out, retval] VARIANT_BOOL* pVal);
    [propget, id(15)] HRESULT MetadataCount([out, retval] LONG* pVal);
    [propget, id(16)] HRESULT MetadataItem([in] LONG itemIndex, [out, retval] BSTR* pVal);
    [propget, id(17)] HRESULT ColorTable([out, retval] IGridColorScheme** pVal);
    [id(18)] HRESULT GetUniqueValues([in]LONG maxCount, [out]VARIANT* arr, [out, retval]VARIANT_BOOL* result);
    [id(19)] HRESULT GetDefaultHistogram([in] VARIANT_BOOL forceCalculate, [out, retval] IHistogram** retVal);
    [id(20)] HRESULT GetHistogram([in] DOUBLE minValue, [in] DOUBLE maxValue, [in] LONG numBuckets, [in] VARIANT_BOOL includeOutOfRange, [in] VARIANT_BOOL allowApproximate, [out, retval] IHistogram** retVal);
    [propget, id(21)] HRESULT Overview([in] LONG overviewIndex, [out, retval] IGdalRasterBand** pVal);
    [id(22)] HRESULT GetStatistics([in] VARIANT_BOOL allowApproximate, [in] VARIANT_BOOL forceCalculation, [out] DOUBLE* minimum, [out] DOUBLE* maximum, [out] DOUBLE* mean, [out] DOUBLE* stdDev, [out, retval] VARIANT_BOOL* retVal);
    [id(23)] HRESULT Classify(double minValue, double maxValue, [in] tkClassificationType classification, [in] LONG numCategories, [out, retval] IGridColorScheme** retVal);
    [id(24)] HRESULT ComputeMinMax([in] VARIANT_BOOL allowApproximate, [out] DOUBLE* minimum, [out] DOUBLE* maximum, [out, retval]VARIANT_BOOL* retVal);
    [propget, id(25)] HRESULT Value([in] LONG column, [in] LONG row, [out] double* pVal, [out, retval]VARIANT_BOOL* retVal);
    [id(26)] HRESULT ComputeLocalStatistics([in]LONG column, [in]LONG row, [in]LONG range, [out]double* minimum, [out]double* maximum, [out]double* mean, [out]double* stdDev, [out]LONG* count, [out, retval]VARIANT_BOOL* vb);
};
[
    object,
    uuid(07D7B410-FCC8-4A09-A35C-12A7FA826343),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IHistogram : IDispatch {
    [propget, id(1)] HRESULT NumBuckets([out, retval] LONG* pVal);
    [propget, id(2)] HRESULT MinValue([out, retval] DOUBLE* pVal);
    [propget, id(3)] HRESULT MaxValue([out, retval] DOUBLE* pVal);
    [propget, id(4)] HRESULT Count([in] LONG bucketIndex, [out, retval] LONG* pVal);
    [propget, id(5)] HRESULT Value([in] LONG bucketIndex, [out, retval] DOUBLE* pVal);
    [propget, id(6)] HRESULT TotalCount([out, retval] LONG* pVal);
    [id(7)] HRESULT GenerateColorScheme([in] LONG numClasses, [out, retval] IGridColorScheme** retVal);
};
[
    object,
    uuid(8A42DE62-BC6F-4412-86A1-9CEA93E583F8),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IGdalDataset : IDispatch {

    [propget, id(1)] HRESULT Driver([out, retval] IGdalDriver** pVal);
    [id(2)] HRESULT Open([in] BSTR Filename, [in] VARIANT_BOOL readOnly, [out, retval] VARIANT_BOOL* retVal);
    [id(3)] HRESULT Close();
    [id(4)] HRESULT SetGeoTransform([in] DOUBLE xLeft, [in] DOUBLE dX, [in] DOUBLE yProjOnX, [in] DOUBLE yTop, [in] DOUBLE xProjOnY, [in] DOUBLE dY, [out, retval] VARIANT_BOOL* retVal);
    [id(5)] HRESULT SetProjection([in] BSTR Projection, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(6)] HRESULT SubDatasetCount([out, retval] LONG* retVal);
    [id(7)] HRESULT GetSubDatasetName([in]int subDatasetIndex, [out, retval] BSTR* retVal);
};

[
    object,
    uuid(6685DBF0-87CA-4026-9FD6-AA228E86E74C),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IGdalDriver : IDispatch {
    [propget, id(1)] HRESULT Metadata([in]tkGdalDriverMetadata metadata, [out, retval]BSTR* retVal);
    [propget, id(2)] HRESULT MetadataCount([out, retval]int* retVal);
    [propget, id(3)] HRESULT MetadataItem([in]int metadataIndex, [out, retval]BSTR* retVal);
    [propget, id(4)] HRESULT Name([out, retval] BSTR* pVal);
    [propget, id(5)] HRESULT IsVector([out, retval] VARIANT_BOOL* pVal);
    [propget, id(6)] HRESULT IsRaster([out, retval] VARIANT_BOOL* pVal);
    [propget, id(7)] HRESULT MetadataItemType([in] int metadataIndex, [out, retval] tkGdalDriverMetadata* pVal);
    [propget, id(8)] HRESULT MetadataItemValue([in] int metadataIndex, [out, retval] BSTR* pVal);
    [propget, id(9)] HRESULT MetadataItemKey([in] int metadataIndex, [out, retval] BSTR* pVal);
};

[
    object,
    uuid(E486B8F1-400F-4790-8574-7427906C664B),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IGdalDriverManager : IDispatch {
    [propget, id(1)] HRESULT DriverCount([out, retval] LONG* pVal);
    [propget, id(2)] HRESULT Driver([in] long driverIndex, [out, retval] IGdalDriver** pVal);
    [propget, id(3)] HRESULT DriverByName([in] BSTR driverName, [out, retval] IGdalDriver** pVal);
};
[
    object,
    uuid(9CEFAEB1-4A3B-40A6-B9E7-A23E08B291C0),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IFunction : IDispatch {
    [propget, id(1)] HRESULT Name([out, retval] BSTR* pVal);
    [propget, id(2)] HRESULT Alias([in] long aliasIndex, [out, retval] BSTR* pVal);
    [propget, id(3)] HRESULT NumAliases([out, retval] long* pVal);
    [propget, id(4)] HRESULT NumParameters([out, retval] long* pVal);
    [propget, id(5)] HRESULT Group([out, retval] tkFunctionGroup* pVal);
    [propget, id(6)] HRESULT Description([out, retval] BSTR* pVal);
    //[propput, id(6)] HRESULT Description([in] BSTR newVal);
    [propget, id(7)] HRESULT ParameterName([in] LONG parameterIndex, [out, retval] BSTR* pVal);
    //[propput, id(7)] HRESULT ParameterName([in] LONG parameterIndex, [in] BSTR newVal);
    [propget, id(8)] HRESULT ParameterDescription([in] LONG parameterIndex, [out, retval] BSTR* pVal);
    //[propput, id(8)] HRESULT ParameterDescription([in] LONG parameterIndex, [in] BSTR newVal);
    [propget, id(9)] HRESULT Signature([out, retval] BSTR* pVal);
};
[
    object,
    uuid(9E78E6B9-D5FA-478D-83E8-1715C697A7DC),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IExpression : IDispatch {
    [id(1)] HRESULT Parse([in] BSTR expr, [out, retval] VARIANT_BOOL* retVal);
    [id(2)] HRESULT Calculate([out] VARIANT* result, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(3)] HRESULT LastErrorMessage([out, retval] BSTR* pVal);
    [propget, id(4)] HRESULT LastErrorPosition([out, retval] LONG* pVal);
    [propget, id(5)] HRESULT NumSupportedFunctions([out, retval] LONG* pVal);
    [propget, id(6)] HRESULT SupportedFunction([in] LONG functionIndex, [out, retval] IFunction** pVal);
    [id(7)] HRESULT ParseForTable([in] BSTR expr, [in] ITable* tbl, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(8)] HRESULT Table([out, retval] ITable** pVal);
    [id(9)] HRESULT CalculateForTableRow([in] LONG rowIndex, [in] LONG targetFieldIndex, [out, retval] VARIANT_BOOL* retVal);
    [id(10)] HRESULT CalculateForTableRow2([in] LONG rowIndex, [out] VARIANT* result, [out, retval] VARIANT_BOOL* retVal);
};

[
    object,
    uuid(74BFB63D-6DBC-41FF-A50F-22CD10BAC930),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IWmsLayer : IDispatch {
    [propget, id(1)] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(2)] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [propget, id(3)] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(3)] HRESULT Key([in] BSTR newVal);
    [propget, id(4)] HRESULT Name([out, retval] BSTR* pVal);
    [propput, id(4)] HRESULT Name([in] BSTR newVal);
    [propget, id(5)] HRESULT BoundingBox([out, retval] IExtents** pVal);
    [propput, id(5)] HRESULT BoundingBox([in] IExtents* newVal);
    [propget, id(6)] HRESULT Epsg([out, retval] LONG* pVal);
    [propput, id(6)] HRESULT Epsg([in] LONG newVal);
    [propget, id(7)] HRESULT Layers([out, retval] BSTR* pVal);
    [propput, id(7)] HRESULT Layers([in] BSTR newVal);
    [propget, id(8)] HRESULT BaseUrl([out, retval] BSTR* pVal);
    [propput, id(8)] HRESULT BaseUrl([in] BSTR newVal);
    [propget, id(9)] HRESULT Id([out, retval] LONG* pVal);
    [propput, id(9)] HRESULT Id([in] LONG newVal);
    [propget, id(10)] HRESULT Format([out, retval] BSTR* pVal);
    [propput, id(10)] HRESULT Format([in] BSTR newVal);
    [propget, id(11)] HRESULT IsEmpty([out, retval] VARIANT_BOOL* pVal);
    [propget, id(12)] HRESULT MapExtents([out, retval] IExtents** pVal);
    [id(13)] HRESULT Close();
    [id(14)] HRESULT Serialize([out, retval]BSTR* retVal);
    [id(15)] HRESULT Deserialize([in] BSTR state, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(16)] HRESULT GeoProjection([out, retval] IGeoProjection** pVal);
    [propget, id(17)] HRESULT Opacity([out, retval] BYTE* pVal);
    [propput, id(17)] HRESULT Opacity([in] BYTE newVal);
    [propget, id(18)] HRESULT Brightness([out, retval] FLOAT* pVal);
    [propput, id(18)] HRESULT Brightness([in] FLOAT newVal);
    [propget, id(19)] HRESULT Contrast([out, retval] FLOAT* pVal);
    [propput, id(19)] HRESULT Contrast([in] FLOAT newVal);
    [propget, id(20)] HRESULT Saturation([out, retval] FLOAT* pVal);
    [propput, id(20)] HRESULT Saturation([in] FLOAT newVal);
    [propget, id(21)] HRESULT Hue([out, retval] FLOAT* pVal);
    [propput, id(21)] HRESULT Hue([in] FLOAT newVal);
    [propget, id(22)] HRESULT Gamma([out, retval] FLOAT* pVal);
    [propput, id(22)] HRESULT Gamma([in] FLOAT newVal);
    [propget, id(23)] HRESULT UseCache([out, retval] VARIANT_BOOL* pVal);
    [propput, id(23)] HRESULT UseCache([in] VARIANT_BOOL newVal);
    [propget, id(24)] HRESULT DoCaching([out, retval] VARIANT_BOOL* pVal);
    [propput, id(24)] HRESULT DoCaching([in] VARIANT_BOOL newVal);
    [propget, id(25)] HRESULT TransparentColor([out, retval] OLE_COLOR* pVal);
    [propput, id(25)] HRESULT TransparentColor([in] OLE_COLOR newVal);
    [propget, id(26)] HRESULT UseTransparentColor([out, retval] VARIANT_BOOL* pVal);
    [propput, id(26)] HRESULT UseTransparentColor([in] VARIANT_BOOL newVal);
    [propget, id(27)] HRESULT Version([out, retval] tkWmsVersion* pVal);
    [propput, id(27)] HRESULT Version([in] tkWmsVersion newVal);
    [propget, id(28)] HRESULT Styles([out, retval] BSTR* pVal);
    [propput, id(28)] HRESULT Styles([in] BSTR newVal);
};

/****************************  Gdal Utils Interface ***********************/
[
    object,
    uuid(5EFD0C96-0C97-4573-B80B-12FC75C06E76),
    dual,
    nonextensible,
    pointer_default(unique)
]
interface IGdalUtils : IDispatch {
    [propget, id(1)] HRESULT LastErrorCode([out, retval] long *pVal);
    [propget, id(2)] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
    [id(3), helpstring("Image reprojection and warping utility")] HRESULT GdalRasterWarp([in] BSTR bstrSrcFilename, [in] BSTR bstrDstFilename, [in] SAFEARRAY(BSTR) options, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(4), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
    [propput, id(4), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
    [propget, id(5), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
    [propput, id(5), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
    [id(6), helpstring("method GdalVectorTranslate")] HRESULT GdalVectorTranslate([in] BSTR bstrSrcFilename, [in] BSTR bstrDstFilename, [in] SAFEARRAY(BSTR) options, [in, defaultvalue(0)] VARIANT_BOOL useSharedConnection, [out, retval] VARIANT_BOOL* retVal);
    [id(7), helpstring("method ClipVectorWithVector")] HRESULT ClipVectorWithVector([in] BSTR bstrSubjectFilename, [in] BSTR bstrOverlayFilename, [in] BSTR bstrDstFilename, [in, defaultvalue(-1)] VARIANT_BOOL useSharedConnection, [out, retval] VARIANT_BOOL* retVal);
    [propget, id(8)] HRESULT DetailedErrorMsg([out, retval] BSTR *pVal);
    [id(9), helpstring("method GdalRasterTranslate")] HRESULT GdalRasterTranslate([in] BSTR bstrSrcFilename, [in] BSTR bstrDstFilename, [in] SAFEARRAY(BSTR) options, [out, retval] VARIANT_BOOL* retVal);
    [id(10), helpstring("Builds or rebuilds overview images.")] HRESULT GdalBuildOverviews([in] BSTR bstrSrcFilename, [in] tkGDALResamplingMethod resamplingMethod, [in] SAFEARRAY(int) overviewList, [in] SAFEARRAY(int) bandList, [in] SAFEARRAY(BSTR) configOptions, [out, retval] VARIANT_BOOL* retVal);
}

[
    uuid(C368D713-CC5F-40ED-9F53-F84FE197B96A), version(5.4),
    helpfile("MapWinGIS.chm"),
    helpstring("MapWinGIS Components"),
    control
]
library MapWinGIS
{
    importlib(STDOLE_TLB);
    importlib(STDTYPE_TLB);

    [
        uuid(130B7AEB-0350-437F-B044-4839AEC92F22),
        helpstring("ShapeEditor Class")
    ]
    coclass ShapeEditor
    {
        [default] interface IShapeEditor;
    };

    //  Primary dispatch interface for CMap

    [uuid(1D077739-E866-46A0-B256-8AECC04F2312),
        helpstring("Dispatch interface for Map Control"), version(5.4), hidden
    ]
    dispinterface _DMap
    {
    properties:
        // NOTE - ClassWizard will maintain property information here.
        //    Use extreme caution when editing this section.
        //{{AFX_ODL_PROP(CMapView)
        [id(1)] OLE_COLOR BackColor;
        [id(2)] double ZoomPercent;
        [id(3)] tkCursorMode CursorMode;
        [id(4)] tkCursor MapCursor;
        [id(6)] VARIANT_BOOL SendMouseDown;
        [id(7)] VARIANT_BOOL SendMouseUp;
        [id(8)] VARIANT_BOOL SendMouseMove;
        [id(9)] VARIANT_BOOL SendSelectBoxDrag;
        [id(10)] VARIANT_BOOL SendSelectBoxFinal;
        [id(11)] double ExtentPad;
        [id(12)] long ExtentHistory;
        [id(13)] BSTR Key;
        [id(16), readonly] long NumLayers;
        [id(18), readonly] long LastErrorCode;
        [id(19)] tkLockMode IsLocked;
        [id(118)] VARIANT_BOOL SendOnDrawBackBuffer;
        [id(151)] VARIANT_BOOL UseSeamlessPan;
        [id(152)] DOUBLE MouseWheelSpeed;
        [id(158)] tkUnitsOfMeasure MapUnits;
        [id(166), readonly] BSTR VersionNumber;
        [id(172)] VARIANT_BOOL ShowRedrawTime;
        [id(173)] VARIANT_BOOL ShowVersionNumber;
        [id(192)] IGeoProjection* GeoProjection;
        [id(195)] VARIANT_BOOL ScalebarVisible;
        [id(205)] tkScalebarUnits ScalebarUnits;
        [id(187), readonly] IExtents* MaxExtents;
        [id(191), readonly] ITiles* Tiles;
        [id(211), readonly] IFileManager* FileManager;
        [id(241), readonly] IUndoList* UndoList;
        [id(243), readonly] IIdentifier* Identifier;
        [id(235), readonly] IShapeEditor* ShapeEditor;
        [id(196), readonly] IMeasuring* Measuring;
        [id(250), readonly] ISelectionList* IdentifiedShapes;
        [id(251), readonly] IDrawingRectangle* FocusRectangle;
        [id(252)] tkCustomDrawingFlags CustomDrawingFlags;
        [id(254)] tkAngleFormat ShowCoordinatesFormat;
        [id(256), readonly]long ExtentHistoryUndoCount;
        [id(257), readonly]long ExtentHistoryRedoCount;

        [id(15), nonbrowsable] IDispatch* GlobalCallback;
        [id(17), nonbrowsable] IExtents* Extents;
#ifdef OLD_API
            [id(14)] VARIANT_BOOL DoubleBuffer;
            [id(20), readonly] BSTR MapState;
#endif

            //}}AFX_ODL_PROP

        methods:
            // NOTE - ClassWizard will maintain method information here.
            //    Use extreme caution when editing this section.
            //{{AFX_ODL_METHOD(CMapView)
            //[id(15), propput, nonbrowsable] void GlobalCallback(IDispatch* nNewValue);
            //[id(15), propget, nonbrowsable] IDispatch* GlobalCallback();
            //[id(17), propput, nonbrowsable] void Extents(IExtents* nNewValue);
            //[id(17), propget, nonbrowsable] IExtents* Extents();

#define REDRAW_API		
#ifdef REDRAW_API	
            [id(21)] void Redraw();
            [id(42)] void LockWindow(tkLockMode LockMode);
            [id(220)] void Redraw2(tkRedrawType redrawType);
            [id(260)] void Redraw3(tkRedrawType redrawType, VARIANT_BOOL reloadTiles);
#endif			

#define COORDINATES_API
#ifdef COORDINATES_API
            [id(217), propput] void Projection(tkMapProjection nNewValue);
            [id(217), propget] tkMapProjection Projection();
            [id(36)] void ProjToPixel(double projX, double projY, double* pixelX, double* pixelY);
            [id(37)] void PixelToProj(double pixelX, double pixelY, double* projX, double* projY);
            [id(222)] VARIANT_BOOL ProjToDegrees(double projX, double projY, double* degreesLngX, double* degreesLatY);
            [id(223)] VARIANT_BOOL DegreesToProj(double degreesLngX, double degreesLatY, double* projX, double* projY);
            [id(224)] VARIANT_BOOL PixelToDegrees(double pixelX, double pixelY, double* degreesLngX, double* degreesLatY);
            [id(225)] VARIANT_BOOL DegreesToPixel(double degreesLngX, double degreesLatY, double* pixelX, double* pixelY);
            [id(188), propget, nonbrowsable] double PixelsPerDegree();
            [id(247)] DOUBLE GeodesicDistance(DOUBLE projX1, DOUBLE projY1, DOUBLE projX2, DOUBLE projY2);
            [id(248)] DOUBLE GeodesicLength(IShape* polyline);
            [id(249)] DOUBLE GeodesicArea(IShape* polygon);
#endif		

#define LAYERS_API
#ifdef LAYERS_API
            [id(22)] long AddLayer(IDispatch* Object, VARIANT_BOOL Visible);
            [id(23)] void RemoveLayer(long LayerHandle);
            [id(138)] void RemoveLayerWithoutClosing(long LayerHandle);
            [id(24)] void RemoveAllLayers();
            [id(25)] VARIANT_BOOL MoveLayerUp(long InitialPosition);
            [id(26)] VARIANT_BOOL MoveLayerDown(long InitialPosition);
            [id(27)] VARIANT_BOOL MoveLayer(long InitialPosition, long TargetPosition);
            [id(28)] VARIANT_BOOL MoveLayerTop(long InitialPosition);
            [id(29)] VARIANT_BOOL MoveLayerBottom(long InitialPosition);
            [id(56), propget] long LayerHandle(long LayerPosition);
            [id(210)] LONG AddLayerFromFilename(LPCTSTR Filename, tkFileOpenStrategy openStrategy, VARIANT_BOOL Visible);
            [id(237)] LONG AddLayerFromDatabase(LPCTSTR ConnectionString, LPCTSTR LayerNameOrQuery, VARIANT_BOOL Visible);
#endif

#define ZOOMING_API
#ifdef ZOOMING_API
            [id(30)] void ZoomToMaxExtents();
            [id(31)] void ZoomToLayer(long LayerHandle);
            [id(32)] void ZoomToShape(long LayerHandle, long Shape);
            [id(33)] void ZoomIn(double Percent);
            [id(34)] void ZoomOut(double Percent);
            [id(35)] long ZoomToPrev();
            [id(255)] long ZoomToNext();
            [id(258)]void ClearExtentHistory();
            [id(190)] VARIANT_BOOL ZoomToSelected(LONG LayerHandle);
            [id(200)] VARIANT_BOOL ZoomToWorld();
            [id(193), propget] IExtents* GeographicExtents();
            [id(194)] VARIANT_BOOL SetGeographicExtents(IExtents* pVal);
            [id(107)] void ZoomToMaxVisibleExtents(void);
            [id(197)] VARIANT_BOOL ZoomToTileLevel(int zoom);

            [id(214), propput] void CurrentZoom(int nNewValue);
            [id(214), propget] int CurrentZoom();
            [id(156), propput, nonbrowsable] void CurrentScale(double nNewValue);
            [id(156), propget, nonbrowsable] double CurrentScale();

            [id(208)] VARIANT_BOOL SetGeographicExtents2(double xLongitude, double yLatitude, double widthKilometers);
            [id(209)] IExtents* GetKnownExtents(tkKnownExtents extents);
            [id(212), propput] void Latitude(float nNewValue);
            [id(212), propget] float Latitude();
            [id(213), propput] void Longitude(float nNewValue);
            [id(213), propget] float Longitude();
            [id(218), propput] void KnownExtents(tkKnownExtents nNewValue);
            [id(218), propget] tkKnownExtents KnownExtents();
            [id(267)] void SetLatitudeLongitude(double latitude, double longitude);
#endif

#define LAYER_API
#ifdef LAYER_API
            [id(57), propget] VARIANT_BOOL LayerVisible(long LayerHandle);
            [id(57), propput] void LayerVisible(long LayerHandle, VARIANT_BOOL bNewValue);
            [id(54), propget] BSTR LayerKey(long LayerHandle);
            [id(54), propput] void LayerKey(long LayerHandle, BSTR lpszNewValue);
            [id(55), propget] long LayerPosition(long LayerHandle);

            [id(91), propget] BSTR LayerName(LONG LayerHandle);
            [id(91), propput] void LayerName(LONG LayerHandle, BSTR newVal);
            [id(189), propget] BSTR LayerFilename(LONG layerHandle);
            [id(167), propget] DOUBLE LayerMaxVisibleScale(LONG LayerHandle);
            [id(167), propput] void LayerMaxVisibleScale(LONG LayerHandle, DOUBLE newVal);
            [id(168), propget] DOUBLE LayerMinVisibleScale(LONG LayerHandle);
            [id(168), propput] void LayerMinVisibleScale(LONG LayerHandle, DOUBLE newVal);
            [id(169), propget] VARIANT_BOOL LayerDynamicVisibility(LONG LayerHandle);
            [id(169), propput] void LayerDynamicVisibility(LONG LayerHandle, VARIANT_BOOL newVal);
            [id(198), propget] int LayerMaxVisibleZoom(LONG LayerHandle);
            [id(198), propput] void LayerMaxVisibleZoom(LONG LayerHandle, int newVal);
            [id(199), propget] int LayerMinVisibleZoom(LONG LayerHandle);
            [id(199), propput] void LayerMinVisibleZoom(LONG LayerHandle, int newVal);
            [id(171), propget] ILabels* LayerLabels(LONG LayerHandle);
            [id(171), propput] void LayerLabels(LONG LayerHandle, ILabels* pVal);
            [id(174), propget] IShapefile* Shapefile(LONG LayerHandle);
            [id(174), propput] void Shapefile(LONG LayerHandle, IShapefile* pVal);
            [id(175), propget] IImage* Image(LONG LayerHandle);
            [id(175), propput] void Image(LONG LayerHandle, IImage* pVal);

            [id(90), propget] IDispatch* GetObject(long LayerHandle);
            [id(238), propget] VARIANT_BOOL LayerVisibleAtCurrentScale(LONG LayerHandle);
            [id(236), propget] IOgrLayer* OgrLayer(LONG LayerHandle);
            [id(259), propget] IWmsLayer* WmsLayer(LONG LayerHandle);
            [id(253), propget] IExtents* LayerExtents(LONG LayerHandle);

            [id(48)] IDispatch* GetColorScheme(long LayerHandle);
            [id(92)] VARIANT_BOOL SetImageLayerColorScheme(LONG LayerHandle, IDispatch* ColorScheme);
            [id(143)] void ReSourceLayer(long LayerHandle, BSTR newSrcPath);

            [id(263)] VARIANT_BOOL ReloadOgrLayerFromSource(long OgrLayerHandle);
            [id(264)] void RestartBackgroundLoading(long OgrLayerHandle);
            [id(265)] VARIANT_BOOL StartNewBoundShape(DOUBLE x, DOUBLE y);
            [id(266)] VARIANT_BOOL StartNewBoundShapeEx(long LayerHandle);
#endif 

#define DRAWING_API
#ifdef DRAWING_API
            [id(38)] void ClearDrawing(long DrawHandle);
            [id(39)] void ClearDrawings();
            [id(49)] long NewDrawing(tkDrawReferenceList Projection);
            [id(50)] void DrawPoint(double x, double y, long pixelSize, OLE_COLOR color,[defaultvalue(255)] byte alpha);
            [id(51)] void DrawLine(double x1, double y1, double x2, double y2, long pixelWidth, OLE_COLOR color,[defaultvalue(255)] byte alpha);
            [id(52)] void DrawCircle(double x, double y, double pixelRadius, OLE_COLOR color, VARIANT_BOOL fill,[defaultvalue(255)] byte alpha);
            [id(53)] void DrawPolygon(VARIANT *xPoints, VARIANT *yPoints, long numPoints, OLE_COLOR color, VARIANT_BOOL fill,[defaultvalue(255)] byte alpha);
            [id(134)] void DrawWidePolygon(VARIANT *xPoints, VARIANT *yPoints, long numPoints, OLE_COLOR color, VARIANT_BOOL fill, short Width,[defaultvalue(255)] byte alpha);
            [id(135)] void DrawWideCircle(double x, double y, double pixelRadius, OLE_COLOR color, VARIANT_BOOL fill, short Width,[defaultvalue(255)] byte alpha);
            [id(115)] void DrawLineEx(LONG LayerHandle, DOUBLE x1, DOUBLE y1, DOUBLE x2, DOUBLE y2, LONG pixelWidth, OLE_COLOR color,[defaultvalue(255)] byte alpha);
            [id(116)] void DrawPointEx(LONG LayerHandle, DOUBLE x, DOUBLE y, LONG pixelSize, OLE_COLOR color,[defaultvalue(255)] byte alpha);
            [id(117)] void DrawCircleEx(LONG LayerHandle, DOUBLE x, DOUBLE y, DOUBLE pixelRadius, OLE_COLOR color, VARIANT_BOOL fill,[defaultvalue(255)] byte alpha);
            [id(155)] void DrawPolygonEx(LONG LayerHandle, VARIANT* xPoints, VARIANT* yPoints, LONG numPoints, OLE_COLOR color, VARIANT_BOOL fill,[defaultvalue(255)] byte alpha);
            [id(160)] void DrawWideCircleEx(LONG LayerHandle, double x, double y, double radius, OLE_COLOR color, VARIANT_BOOL fill, short OutlineWidth,[defaultvalue(255)] byte alpha);
            [id(161)] void DrawWidePolygonEx(LONG LayerHandle, VARIANT *xPoints, VARIANT *yPoints, long numPoints, OLE_COLOR color, VARIANT_BOOL fill, short OutlineWidth,[defaultvalue(255)] byte alpha);
            [id(120)] void SetDrawingLayerVisible(LONG LayerHandle, VARIANT_BOOL Visible);
            [id(157), propget] ILabels* DrawingLabels(long DrawingLayerIndex);
            [id(157), propput] void DrawingLabels(long DrawingLayerIndex, ILabels* newVal);
            [id(83), propget] BSTR DrawingKey(long DrawHandle);
            [id(83), propput] void DrawingKey(long DrawHandle, BSTR lpszNewValue);
            [id(245)] LONG DrawLabel(BSTR text, DOUBLE x, DOUBLE y, DOUBLE rotation);
            [id(246)] LONG DrawLabelEx(LONG drawHandle, BSTR text, DOUBLE x, DOUBLE y, DOUBLE rotation);
            [id(121)] void ClearDrawingLabels(long drawHandle);
            [id(130), propput] void DrawingLabelsVisible(long drawHandle, VARIANT_BOOL bNewValue);
#endif



#define SHAPE_LAYER_API
#ifdef SHAPE_LAYER_API
            [id(58), propget, hidden] OLE_COLOR ShapeLayerFillColor(long LayerHandle);
            [id(58), propput, hidden] void ShapeLayerFillColor(long LayerHandle, OLE_COLOR nNewValue);
            [id(60), propget, hidden] OLE_COLOR ShapeLayerLineColor(long LayerHandle);
            [id(60), propput, hidden] void ShapeLayerLineColor(long LayerHandle, OLE_COLOR nNewValue);
            [id(62), propget, hidden] OLE_COLOR ShapeLayerPointColor(long LayerHandle);
            [id(62), propput, hidden] void ShapeLayerPointColor(long LayerHandle, OLE_COLOR nNewValue);
            [id(64), propget, hidden] VARIANT_BOOL ShapeLayerDrawFill(long LayerHandle);
            [id(64), propput, hidden] void ShapeLayerDrawFill(long LayerHandle, VARIANT_BOOL bNewValue);
            [id(66), propget, hidden] VARIANT_BOOL ShapeLayerDrawLine(long LayerHandle);
            [id(66), propput, hidden] void ShapeLayerDrawLine(long LayerHandle, VARIANT_BOOL bNewValue);
            [id(68), propget, hidden] VARIANT_BOOL ShapeLayerDrawPoint(long LayerHandle);
            [id(68), propput, hidden] void ShapeLayerDrawPoint(long LayerHandle, VARIANT_BOOL bNewValue);
            [id(70), propget, hidden] float ShapeLayerLineWidth(long LayerHandle);
            [id(70), propput, hidden] void ShapeLayerLineWidth(long LayerHandle, float newValue);
            [id(72), propget, hidden] float ShapeLayerPointSize(long LayerHandle);
            [id(72), propput, hidden] void ShapeLayerPointSize(long LayerHandle, float newValue);
            [id(74), propget, hidden] float ShapeLayerFillTransparency(long LayerHandle);
            [id(74), propput, hidden] void ShapeLayerFillTransparency(long LayerHandle, float newValue);
            [id(76), propget, hidden] tkLineStipple ShapeLayerLineStipple(long LayerHandle);
            [id(76), propput, hidden] void ShapeLayerLineStipple(long LayerHandle, tkLineStipple nNewValue);
            [id(78), propget, hidden] tkFillStipple ShapeLayerFillStipple(long LayerHandle);
            [id(78), propput, hidden] void ShapeLayerFillStipple(long LayerHandle, tkFillStipple nNewValue);
            [id(84), propget] tkPointType ShapeLayerPointType(long LayerHandle);
            [id(84), propput] void ShapeLayerPointType(long LayerHandle, tkPointType nNewValue);
            [id(144), propget] OLE_COLOR ShapeLayerStippleColor(long LayerHandle);
            [id(144), propput] void ShapeLayerStippleColor(long LayerHandle, OLE_COLOR nNewValue);
            [id(147), propget] VARIANT_BOOL ShapeLayerStippleTransparent(long LayerHandle);
            [id(147), propput] void ShapeLayerStippleTransparent(long LayerHandle, VARIANT_BOOL nNewValue);
#endif

#ifdef OLD_API   // excluded from public API in v4.9.3 Beta

#define IMAGE_LAYER_API
#ifdef IMAGE_LAYER_API

            [id(81), propget] float ImageLayerPercentTransparent(long LayerHandle);
            [id(81), propput] void ImageLayerPercentTransparent(long LayerHandle, float newValue);

            [id(94)] void UpdateImage(LONG LayerHandle);
            [id(93), propget] BSTR GridFileName(LONG LayerHandle);
            [id(93), propput] void GridFileName(LONG LayerHandle, BSTR newVal);
            [id(105)] VARIANT_BOOL IsTIFFGrid(BSTR Filename);    // TODO: copy to utils
#endif

#define LABELS_API
#ifdef LABELS_API
            [id(45)] void AddLabel(long LayerHandle, BSTR Text, OLE_COLOR Color, double x, double y, tkHJustification hJustification);
            [id(46)] void ClearLabels(long LayerHandle);
            [id(47)] void LayerFont(long LayerHandle, BSTR FontName, long FontSize);
            [id(99)] void AddLabelEx(long LayerHandle, BSTR Text, OLE_COLOR Color, double x, double y, tkHJustification hJustification, double Rotation);
            [id(86), propget] VARIANT_BOOL LayerLabelsVisible(long LayerHandle);
            [id(86), propput] void LayerLabelsVisible(long LayerHandle, VARIANT_BOOL bNewValue);
            [id(97), propget] VARIANT_BOOL LayerLabelsShadow(long LayerHandle);
            [id(97), propput] void LayerLabelsShadow(long LayerHandle, VARIANT_BOOL bNewValue);
            [id(98), propget] VARIANT_BOOL LayerLabelsScale(long LayerHandle);
            [id(98), propput] void LayerLabelsScale(long LayerHandle, VARIANT_BOOL bNewValue);
            [id(119)] void LabelColor(LONG LayerHandle, OLE_COLOR LabelFontColor);
            [id(102), propget, hidden] long LayerLabelsOffset(long LayerHandle);
            [id(102), propput, hidden] void LayerLabelsOffset(long LayerHandle, long Offset);
            [id(103), propget, hidden] OLE_COLOR LayerLabelsShadowColor(long LayerHandle);
            [id(103), propput, hidden] void LayerLabelsShadowColor(long LayerHandle, OLE_COLOR color);
            [id(104), propget, hidden] VARIANT_BOOL UseLabelCollision(long LayerHandle);
            [id(104), propput, hidden] void UseLabelCollision(long LayerHandle, VARIANT_BOOL Value);
            [id(137)] void LayerFontEx(long LayerHandle, BSTR FontName, long FontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, VARIANT_BOOL isUnderline); //ajp (30/11/07)
#endif

#define DRAWING_LABELS_API
#ifdef DRAWING_LABELS_API

            [id(123)] void AddDrawingLabelEx(long drawHandle, BSTR Text, OLE_COLOR Color, double x, double y, tkHJustification hJustification, double Rotation);
            [id(124)] void AddDrawingLabel(long drawHandle, BSTR Text, OLE_COLOR Color, double x, double y, tkHJustification hJustification);
            [id(122)] void DrawingFont(long drawHandle, BSTR FontName, long FontSize);
            [id(125), propget] long DrawingLabelsOffset(long drawHandle);
            [id(125), propput] void DrawingLabelsOffset(long drawHandle, long Offset);
            [id(126), propget] VARIANT_BOOL DrawingLabelsScale(long drawHandle);
            [id(126), propput] void DrawingLabelsScale(long drawHandle, VARIANT_BOOL bNewValue);
            [id(127), propget] VARIANT_BOOL DrawingLabelsShadow(long drawHandle);
            [id(127), propput] void DrawingLabelsShadow(long drawHandle, VARIANT_BOOL bNewValue);
            [id(128), propget] OLE_COLOR DrawingLabelsShadowColor(long drawHandle);
            [id(128), propput] void DrawingLabelsShadowColor(long drawHandle, OLE_COLOR color);
            [id(129), propget] VARIANT_BOOL UseDrawingLabelCollision(long drawHandle);
            [id(129), propput] void UseDrawingLabelCollision(long drawHandle, VARIANT_BOOL bNewValue);
            [id(130), propget] VARIANT_BOOL DrawingLabelsVisible(long drawHandle);

#endif

#define OBSOLETE_API
#ifdef OBSOLETE_API

            [id(95), propput, nonbrowsable] void SerialNumber(BSTR nNewValue);
            [id(95), propget, nonbrowsable] BSTR SerialNumber();
            [id(96), propput, nonbrowsable] void LineSeparationFactor(long nNewValue);
            [id(96), propget, nonbrowsable] long LineSeparationFactor();
            [id(133), propput, nonbrowsable] void MultilineLabels(VARIANT_BOOL nNewValue);
            [id(133), propget, nonbrowsable] VARIANT_BOOL MultilineLabels();
            [id(154), propput, nonbrowsable] void ShapeDrawingMethod(tkShapeDrawingMethod nNewValue);
            [id(154), propget, nonbrowsable] tkShapeDrawingMethod ShapeDrawingMethod();
            [id(41)] VARIANT_BOOL ApplyLegendColors(IDispatch* Legend);
            [id(65), propget, hidden] VARIANT_BOOL ShapeDrawFill(long LayerHandle, long Shape);
            [id(65), propput, hidden] void ShapeDrawFill(long LayerHandle, long Shape, VARIANT_BOOL bNewValue);
            [id(59), propget, hidden] OLE_COLOR ShapeFillColor(long LayerHandle, long Shape);
            [id(59), propput, hidden] void ShapeFillColor(long LayerHandle, long Shape, OLE_COLOR nNewValue);
            [id(61), propget, hidden] OLE_COLOR ShapeLineColor(long LayerHandle, long Shape);
            [id(61), propput, hidden] void ShapeLineColor(long LayerHandle, long Shape, OLE_COLOR nNewValue);
            [id(63), propget, hidden] OLE_COLOR ShapePointColor(long LayerHandle, long Shape);
            [id(63), propput, hidden] void ShapePointColor(long LayerHandle, long Shape, OLE_COLOR nNewValue);
            [id(67), propget, hidden] VARIANT_BOOL ShapeDrawLine(long LayerHandle, long Shape);
            [id(67), propput, hidden] void ShapeDrawLine(long LayerHandle, long Shape, VARIANT_BOOL bNewValue);
            [id(69), propget, hidden] VARIANT_BOOL ShapeDrawPoint(long LayerHandle, long Shape);
            [id(69), propput, hidden] void ShapeDrawPoint(long LayerHandle, long Shape, VARIANT_BOOL bNewValue);
            [id(71), propget, hidden] float ShapeLineWidth(long LayerHandle, long Shape);
            [id(71), propput, hidden] void ShapeLineWidth(long LayerHandle, long Shape, float newValue);
            [id(73), propget, hidden] float ShapePointSize(long LayerHandle, long Shape);
            [id(73), propput, hidden] void ShapePointSize(long LayerHandle, long Shape, float newValue);
            [id(75), propget, hidden] float ShapeFillTransparency(long LayerHandle, long Shape);
            [id(75), propput, hidden] void ShapeFillTransparency(long LayerHandle, long Shape, float newValue);
            [id(77), propget, hidden] tkLineStipple ShapeLineStipple(long LayerHandle, long Shape);
            [id(77), propput, hidden] void ShapeLineStipple(long LayerHandle, long Shape, tkLineStipple nNewValue);
            [id(79), propget, hidden] tkFillStipple ShapeFillStipple(long LayerHandle, long Shape);
            [id(79), propput, hidden] void ShapeFillStipple(long LayerHandle, long Shape, tkFillStipple nNewValue);
            [id(85), propget] tkPointType ShapePointType(long LayerHandle, long Shape);
            [id(85), propput] void ShapePointType(long LayerHandle, long Shape, tkPointType nNewValue);
            [id(106)] VARIANT_BOOL IsSameProjection(BSTR proj4_a, BSTR proj4_b);
            [id(110)] long set_UDPointImageListAdd(long LayerHandle, IDispatch* newValue);
            [id(111), propget] long ShapePointImageListID(long LayerHandle, long Shape);
            [id(111), propput] void ShapePointImageListID(long LayerHandle, long Shape, long ImageIndex);
            [id(112)] long get_UDPointImageListCount(long LayerHandle);
            [id(113)] IDispatch* get_UDPointImageListItem(long LayerHandle, long ImageIndex);
            [id(114)] void ClearUDPointImageList(long LayerHandle);
            [id(139)] void set_UDPointFontCharFont(long LayerHandle, BSTR FontName, float FontSize, VARIANT_BOOL isBold, VARIANT_BOOL isItalic, VARIANT_BOOL isUnderline); //ajp (01/10/08)
            [id(140)] long set_UDPointFontCharListAdd(long LayerHandle, long newValue, OLE_COLOR color);
            [id(141)] void set_UDPointFontCharFontSize(long LayerHandle, float FontSize);
            [id(142), propget] long ShapePointFontCharListID(long LayerHandle, long Shape);
            [id(142), propput] void ShapePointFontCharListID(long LayerHandle, long Shape, long FontCharIndex);
            [id(145), propget] OLE_COLOR ShapeStippleColor(long LayerHandle, long Shape);
            [id(145), propput] void ShapeStippleColor(long LayerHandle, long Shape, OLE_COLOR nNewValue);
            [id(146), propget] VARIANT_BOOL ShapeStippleTransparent(long LayerHandle, long Shape);
            [id(146), propput] void ShapeStippleTransparent(long LayerHandle, long Shape, VARIANT_BOOL nNewValue);
            [id(87), propget] long UDLineStipple(long LayerHandle);
            [id(87), propput] void UDLineStipple(long LayerHandle, long nNewValue);
            [id(88), propget] long UDFillStipple(long LayerHandle, long StippleRow);
            [id(88), propput] void UDFillStipple(long LayerHandle, long StippleRow, long nNewValue);
            [id(89), propget] IDispatch* UDPointType(long LayerHandle);
            [id(89), propputref] void UDPointType(long LayerHandle, IDispatch* newValue);
            [id(100)] void GetLayerStandardViewWidth(long LayerHandle, double* Width);
            [id(101)] void SetLayerStandardViewWidth(long LayerHandle, double Width);
            [id(131)] void GetDrawingStandardViewWidth(long drawHandle, double* Width);
            [id(132)] void SetDrawingStandardViewWidth(long drawHandle, double Width);
            [id(162), propget, nonbrowsable] double MapRotationAngle();
            [id(162), propput, nonbrowsable] void MapRotationAngle(double nNewValue);
            [id(163)] IExtents* GetRotatedExtent();
            [id(164)] IPoint* GetBaseProjectionPoint(double rotX, double rotY);
            [id(165), propget, nonbrowsable] VARIANT_BOOL CanUseImageGrouping();
            [id(165), propput, nonbrowsable] void CanUseImageGrouping(VARIANT_BOOL nNewValue);
            [id(80), propget] VARIANT_BOOL ShapeVisible(long LayerHandle, long Shape);
            [id(80), propput] void ShapeVisible(long LayerHandle, long Shape, VARIANT_BOOL bNewValue);
            [id(150)] VARIANT_BOOL AdjustLayerExtents(long LayerHandle);
#endif
#endif  // end of excluded from public API in v4.9.3 Beta

#define SNAPSHOT_API
#ifdef SNAPSHOT_API
            [id(40)] IImage* SnapShot(IExtents* BoundBox);
            [id(136)] IImage* SnapShot2(LONG ClippingLayerNbr, DOUBLE Zoom, long pWidth);
            [id(153)] IImage* SnapShot3(double left, double right, double top, double bottom, long Width);
            [id(159)] VARIANT_BOOL SnapShotToDC(PVOID hdc, IExtents* Extents, long Width);
            [id(202)] VARIANT_BOOL SnapShotToDC2(PVOID hdc, IExtents* Extents, LONG Width, float OffsetX, float OffsetY,
                                                 float ClipX, float ClipY, float clipWidth, float clipHeight);
            [id(170)] void DrawBackBuffer(int hdc, int ImageWidth, int ImageHeight);
            [id(201)] VARIANT_BOOL LoadTilesForSnapshot(IExtents* Extents, long Width, LPCTSTR Key);
#endif			

#define SERIALIZE_API
#ifdef SERIALIZE_API
            [id(176)] BSTR SerializeLayer(LONG LayerHandle);
            [id(177)] VARIANT_BOOL DeserializeLayer(LONG LayerHandle, BSTR newVal);
            [id(178)] VARIANT_BOOL SaveMapState(BSTR Filename, VARIANT_BOOL RelativePaths, VARIANT_BOOL Overwrite);
            [id(179)] VARIANT_BOOL LoadMapState(BSTR Filename, IDispatch* Callback);
            [id(180)] VARIANT_BOOL SaveLayerOptions(LONG LayerHandle, BSTR OptionsName, VARIANT_BOOL Overwrite, BSTR Description);
            [id(181)] VARIANT_BOOL LoadLayerOptions(LONG LayerHandle, BSTR OptionsName, BSTR* Description);
            [id(182), propget] BSTR LayerDescription(LONG LayerHandle);
            [id(182), propput] void LayerDescription(LONG LayerHandle, BSTR newVal);
            [id(183)] VARIANT_BOOL DeserializeMapState(BSTR State, VARIANT_BOOL LoadLayers, BSTR BasePath);
            [id(184)] BSTR SerializeMapState(VARIANT_BOOL RelativePaths, BSTR BasePath);
            [id(185)] VARIANT_BOOL RemoveLayerOptions(LONG LayerHandle, BSTR OptionsName);
            [id(186), propget] VARIANT_BOOL LayerSkipOnSaving(LONG LayerHandle);
            [id(186), propput] void LayerSkipOnSaving(LONG LayerHandle, VARIANT_BOOL newVal);
#endif

#define BEHAVIOR_API
#ifdef BEHAVIOR_API
            [id(44)] void ShowToolTip(BSTR Text, long Milliseconds);

            [id(108), propput] void MapResizeBehavior(tkResizeBehavior nNewValue);
            [id(108), propget] tkResizeBehavior MapResizeBehavior();
            [id(148), propget] VARIANT_BOOL TrapRMouseDown();
            [id(148), propput] void TrapRMouseDown(VARIANT_BOOL nNewValue);
            [id(149), propput] void DisableWaitCursor(VARIANT_BOOL nNewValue);
            [id(149), propget] VARIANT_BOOL DisableWaitCursor();
            [id(219), propput] void ShowCoordinates(tkCoordinatesDisplay nNewValue);
            [id(219), propget] tkCoordinatesDisplay ShowCoordinates();
            [id(221), propput] void GrabProjectionFromData(VARIANT_BOOL nNewValue);
            [id(221), propget] VARIANT_BOOL GrabProjectionFromData();
            [id(228), propput] void InertiaOnPanning(tkCustomState nNewValue);
            [id(228), propget] tkCustomState InertiaOnPanning();
            [id(229), propput] void ReuseTileBuffer(VARIANT_BOOL nNewValue);
            [id(229), propget] VARIANT_BOOL ReuseTileBuffer();
            [id(230), propput] void ZoomBarVerbosity(tkZoomBarVerbosity nNewValue);
            [id(230), propget] tkZoomBarVerbosity ZoomBarVerbosity();
            [id(233), propput] void ZoomBarMinZoom(long nNewValue);
            [id(233), propget] long ZoomBarMinZoom();
            [id(234), propput] void ZoomBarMaxZoom(long nNewValue);
            [id(234), propget] long ZoomBarMaxZoom();
            [id(207), propput] void ZoomBehavior(tkZoomBehavior nNewValue);
            [id(207), propget] tkZoomBehavior ZoomBehavior();
            [id(226), propput] void ShowZoomBar(VARIANT_BOOL nNewValue);
            [id(226), propget] VARIANT_BOOL ShowZoomBar();
            [id(227), propput] void AnimationOnZooming(tkCustomState nNewValue);
            [id(227), propget] tkCustomState AnimationOnZooming();
            [id(231), propput] void ZoomBoxStyle(tkZoomBoxStyle nNewValue);
            [id(231), propget] tkZoomBoxStyle ZoomBoxStyle();
            [id(261), propget] VARIANT_BOOL UseAlternatePanCursor();
            [id(261), propput] void UseAlternatePanCursor(VARIANT_BOOL nNewValue);
            [id(262), propget] VARIANT_BOOL RecenterMapOnZoom();
            [id(262), propput] void RecenterMapOnZoom(VARIANT_BOOL nNewValue);
            [id(268), propget] VARIANT_BOOL ShowCoordinatesBackground();
            [id(268), propput] void ShowCoordinatesBackground(VARIANT_BOOL nNewValue);
#endif			

            [id(43)] void Resize(long Width, long Height);
            [id(206)] void Clear();
            [id(82), propget] BSTR ErrorMsg(long ErrorCode);
            [id(109)] long HWnd(void);

            [id(5), propput, nonbrowsable] void UDCursorHandle(long nNewValue);
            [id(5), propget, nonbrowsable] long UDCursorHandle();
            [id(216), propput] void TileProvider(tkTileProvider nNewValue);
            [id(216), propget] tkTileProvider TileProvider();


            [id(203)] VARIANT_BOOL FindSnapPoint([in]double tolerance,[in]double xScreen,[in]double yScreen,[in, out]double* xFound,[in, out]double* yFound);
            [id(244)] void Undo();


            //}}AFX_ODL_METHOD
    };

    [uuid(94EC8DF4-6614-463a-B622-F65913BF98DE),
        helpstring("Event interface for Table class")]
    dispinterface _ITableEvents
    {
            properties:
                //  Event interface has no properties

                methods:
                    [id(1)]void OnUpdateJoin(BSTR Filename, BSTR fieldList, BSTR joinOptions, ITable* joinSource);
    };


    //  Event dispatch interface for CMap
    [uuid(ABEA1545-08AB-4D5C-A594-D3017211EA95),
        helpstring("Event interface for Map Control")]
    dispinterface _DMapEvents
    {
        properties:
            //  Event interface has no properties

        methods:
            // NOTE - ClassWizard will maintain event information here.
            //    Use extreme caution when editing this section.
            //{{AFX_ODL_EVENT(CMapView)
            [id(DISPID_DBLCLICK)] void DblClick(void);
            [id(1)] void MouseDown(short Button, short Shift, long x, long y);
            [id(2)] void MouseUp(short Button, short Shift, long x, long y);
            [id(3)] void MouseMove(short Button, short Shift, long x, long y);
            [id(4)] void FileDropped(BSTR Filename);
            [id(5)] void SelectBoxFinal(long Left, long Right, long Bottom, long Top);
            [id(6)] void SelectBoxDrag(long Left, long Right, long Bottom, long Top);
            [id(7)] void ExtentsChanged();
            [id(8)] void MapState(long LayerHandle);
            [id(9)] void OnDrawBackBuffer(long BackBuffer);
            [id(10)] void ShapeHighlighted(long LayerHandle, long ShapeIndex);
            [id(11)] void BeforeDrawing(long hdc, long xMin, long xMax, long yMin, long yMax, tkMwBoolean* Handled);
            [id(12)] void AfterDrawing(long hdc, long xMin, long xMax, long yMin, long yMax, tkMwBoolean* Handled);
            [id(13)] void TilesLoaded(VARIANT_BOOL snapshot, BSTR key, VARIANT_BOOL fromCache);
            [id(14)] void MeasuringChanged(tkMeasuringAction action);
            [id(16)] void BeforeShapeEdit(LONG LayerHandle, LONG ShapeIndex, tkMwBoolean* Cancel);
            [id(17)] void ValidateShape(LONG LayerHandle, IShape* Shape, tkMwBoolean* Cancel);
            [id(18)] void AfterShapeEdit(tkUndoOperation Operation, LONG LayerHandle, LONG ShapeIndex);
            [id(19)] void ChooseLayer(double xProj, double yProj, LONG* LayerHandle);
            [id(21)] void ShapeValidationFailed(BSTR ErrorMessage);
            [id(22)] void BeforeDeleteShape(tkDeleteTarget target, tkMwBoolean* cancel);
            [id(23)] void ProjectionChanged();
            [id(24)] void UndoListChanged();
            [id(25)] void SelectionChanged(LONG LayerHandle);
            [id(26)] void ShapeIdentified(LONG LayerHandle, LONG ShapeIndex, DOUBLE pointX, DOUBLE pointY);
            [id(27)] void LayerProjectionIsEmpty(LONG LayerHandle, tkMwBoolean* cancelAdding);
            [id(28)] void ProjectionMismatch(LONG LayerHandle, tkMwBoolean* cancelAdding, tkMwBoolean* reproject);
            [id(29)] void LayerReprojected(LONG LayerHandle, VARIANT_BOOL Success);
            [id(30)] void LayerAdded(LONG LayerHandle);
            [id(31)] void LayerRemoved(LONG LayerHandle, VARIANT_BOOL fromRemoveAllLayers);
            [id(32)] void BackgroundLoadingStarted(LONG TaskId, LONG LayerHandle);
            [id(33)] void BackgroundLoadingFinished(LONG TaskId, LONG LayerHandle, LONG NumFeatures, LONG NumLoaded);
            [id(34)] void GridOpened(LONG LayerHandle, BSTR gridFilename, LONG bandIndex, VARIANT_BOOL isUsingProxy);
            // NOT USED: [id(35)] void ShapesIdentified(ISelectionList* selectedShapes, DOUBLE projX, DOUBLE projY);
            [id(36)] void OnDrawBackBuffer2(LONG height, LONG Width, LONG Stride, LONG pixelFormat, LONG scan0);
            [id(37)] void BeforeLayers(long hdc, long xMin, long xMax, long yMin, long yMax, tkMwBoolean* Handled);
            [id(38)] void AfterLayers(long hdc, long xMin, long xMax, long yMin, long yMax, tkMwBoolean* Handled);
            [id(39)] void LayerReprojectedIncomplete(LONG LayerHandle, Long NumReprojected, Long NumShapes);
            [id(40)] void BeforeVertexDigitized(DOUBLE* pointX, DOUBLE* pointY);
            [id(41)] void SnapPointRequested(DOUBLE pointX, DOUBLE pointY, DOUBLE* snappedX, DOUBLE* snappedY, tkMwBoolean* isFound, tkMwBoolean* isFinal);
            [id(42)] void SnapPointFound(DOUBLE pointX, DOUBLE pointY, DOUBLE* snappedX, DOUBLE* snappedY);
            //}}AFX_ODL_EVENT

    };

#ifdef OLD_API
    [
        object,
        uuid(FAE1B21A-10C5-4C33-8DC2-931EDC9FBF82),
        dual,
        helpstring("IShapefileColorScheme Interface"),
        pointer_default(unique)
    ]
    interface IShapefileColorScheme : IDispatch
    {
        [id(1), helpstring("method NumBreaks")] HRESULT NumBreaks([out, retval] long* result);
        [id(2), helpstring("method Remove")] HRESULT Remove([in] long Index);
        [id(3), helpstring("method Add")] HRESULT Add([in] IShapefileColorBreak* Break, [out, retval] long* result);
        [propget, id(4), helpstring("property ColorBreak")] HRESULT ColorBreak([in] long Index, [out, retval] IShapefileColorBreak**pVal);
        [propput, id(4), helpstring("property ColorBreak")] HRESULT ColorBreak([in] long Index, [in] IShapefileColorBreak* newVal);
        [propget, id(5), helpstring("property LayerHandle")] HRESULT LayerHandle([out, retval] long *pVal);
        [propput, id(5), helpstring("property LayerHandle")] HRESULT LayerHandle([in] long newVal);
        [propget, id(6), helpstring("property FieldIndex")] HRESULT FieldIndex([out, retval] long *pVal);
        [propput, id(6), helpstring("property FieldIndex")] HRESULT FieldIndex([in] long newVal);
        [propget, id(7), helpstring("property LastErrorCode")] HRESULT LastErrorCode([out, retval] long *pVal);
        [propget, id(8), helpstring("property ErrorMsg")] HRESULT ErrorMsg([in] long ErrorCode, [out, retval] BSTR *pVal);
        [propget, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([out, retval] ICallback**pVal);
        [propput, id(9), helpstring("property GlobalCallback")] HRESULT GlobalCallback([in] ICallback* newVal);
        [propget, id(10), helpstring("property Key")] HRESULT Key([out, retval] BSTR *pVal);
        [propput, id(10), helpstring("property Key")] HRESULT Key([in] BSTR newVal);
        [id(11), helpstring("method InsertAt")] HRESULT InsertAt([in] int Position, [in] IShapefileColorBreak *Break, [out, retval] long *result);
    };
    [
        object,
        uuid(E6D4EB7A-3E8F-45B2-A514-90EF7B2F5C0A),
        dual,
        helpstring("IShapefileColorBreak Interface"),
        pointer_default(unique)
    ]
    interface IShapefileColorBreak : IDispatch
    {
        [propget, id(1), helpstring("property StartValue")] HRESULT StartValue([out, retval] VARIANT *pVal);
        [propput, id(1), helpstring("property StartValue")] HRESULT StartValue([in] VARIANT newVal);
        [propget, id(2), helpstring("property EndValue")] HRESULT EndValue([out, retval] VARIANT *pVal);
        [propput, id(2), helpstring("property EndValue")] HRESULT EndValue([in] VARIANT newVal);
        [propget, id(3), helpstring("property StartColor")] HRESULT StartColor([out, retval] OLE_COLOR *pVal);
        [propput, id(3), helpstring("property StartColor")] HRESULT StartColor([in] OLE_COLOR newVal);
        [propget, id(4), helpstring("property EndColor")] HRESULT EndColor([out, retval] OLE_COLOR *pVal);
        [propput, id(4), helpstring("property EndColor")] HRESULT EndColor([in] OLE_COLOR newVal);
        [propget, id(5), helpstring("property Caption")] HRESULT Caption([out, retval] BSTR* pVal);
        [propput, id(5), helpstring("property Caption")] HRESULT Caption([in] BSTR newVal);
        [propget, id(6), helpstring("property Visible")] HRESULT Visible([out, retval] VARIANT_BOOL *pVal);
        [propput, id(6), helpstring("property Visible")] HRESULT Visible([in] VARIANT_BOOL newVal);
    };
#endif

    //  Class information for CMap

    [uuid(54F4C2F7-ED40-43B7-9D6F-E45965DF7F95),
        helpstring("Map Control"), control]
    coclass Map
    {
        [default]dispinterface _DMap;
        [default, source] dispinterface _DMapEvents;
    };

    //{{AFX_APPEND_ODL}}
    //}}AFX_APPEND_ODL}}
#ifdef OLD_API
    [
        uuid(A038D3E9-46CB-4F95-A40A-88826BF71BA6),
        helpstring("ShapefileColorScheme Class")
    ]
    coclass ShapefileColorScheme
    {
        [default] interface IShapefileColorScheme;
    };
    [
        uuid(700A2AAA-0D28-4943-92EC-08AA9682617A),
        helpstring("ShapefileColorBreak Class")
    ]
    coclass ShapefileColorBreak
    {
        [default] interface IShapefileColorBreak;
    };
#endif
    [
        uuid(B4A353E3-D3DF-455C-8E4D-CFC937800820),
        helpstring("Grid Class")
    ]
    coclass Grid
    {
        [default] interface IGrid;
    };
    [
        uuid(044AFE79-D3DE-4500-A14B-DECEA635B497),
        helpstring("GridHeader Class")
    ]
    coclass GridHeader
    {
        [default] interface IGridHeader;
    };
    [
        uuid(86E02063-602C-47F2-9778-81E6979E3267),
        helpstring("ESRIGridManager Class")
    ]
    coclass ESRIGridManager
    {
        [default] interface IESRIGridManager;
    };
    [
        uuid(0DB362E3-6F79-4226-AF19-47B67B27E99B),
        helpstring("Image Class")
    ]
    coclass Image
    {
        [default] interface IImage;
    };
    [
        uuid(C0EAC9EB-1D02-4BD9-8DAB-4BF922C8CD13),
        helpstring("Shapefile Class")
    ]
    coclass Shapefile
    {
        [default] interface IShapefile;
    };
    [
        uuid(CE7E6869-6F74-4E9D-9F07-3DCBADAB6299),
        helpstring("Shape Class")
    ]
    coclass Shape
    {
        [default] interface IShape;
    };
    [
        uuid(03F9B3DB-637B-4544-BF7A-2F190F821F0D),
        helpstring("Extents Class")
    ]
    coclass Extents
    {
        [default] interface IExtents;
    };
    [
        uuid(CE63AD29-C5EB-4865-B143-E0AC35ED6FBC),
        helpstring("Point Class")
    ]
    coclass Point
    {
        [default] interface IPoint;
    };
    [
        uuid(97EFB80F-3638-4BDC-9128-C5A30194C257),
        helpstring("Table Class")
    ]
    coclass Table
    {
        [default] interface ITable;
        [default, source] dispinterface _ITableEvents;
    };
    [
        uuid(C2C71E09-3DEB-4E6C-B54A-D5613986BFFE),
        helpstring("Field Class")
    ]
    coclass Field
    {
        [default] interface IField;
    };
    [
        uuid(B655545F-1D9C-4D81-A73C-205FC2C3C4AB),
        helpstring("ShapeNetwork Class")
    ]
    coclass ShapeNetwork
    {
        [default] interface IShapeNetwork;
    };
    [
        uuid(B898877F-DC9E-4FBF-B997-B65DC97B72E9),
        helpstring("Utils Class")
    ]
    coclass Utils
    {
        [default] interface IUtils;
    };
    [
        uuid(D226C4B1-C97C-469D-8CBC-8E3DF2139612),
        helpstring("Vector Class")
    ]
    coclass Vector
    {
        [default] interface IVector;
    };
    [
        uuid(ECEB5841-F84E-4DFD-8C96-32216C69C818),
        helpstring("GridColorScheme Class")
    ]
    coclass GridColorScheme
    {
        [default] interface IGridColorScheme;
    };
    [
        uuid(B82B0EB0-05B6-4FF2-AA16-BCD33FDE6568),
        helpstring("GridColorBreak Class")
    ]
    coclass GridColorBreak
    {
        [default] interface IGridColorBreak;
    };
    [
        uuid(677B1AF6-A28D-4FAB-8A5F-0F8763D88638),
        helpstring("Tin Class")
    ]
    coclass Tin
    {
        [default] interface ITin;
    };
    [
        uuid(58804A7F-2C75-41AF-9D32-5BD08DB1BAF6),
        helpstring("ShapeDrawingOptions Class")
    ]
    coclass ShapeDrawingOptions
    {
        [default] interface IShapeDrawingOptions;
    };
    [
        uuid(CEA6B369-F2EC-4927-BD8C-F0F6A4066EC6),
        helpstring("Labels Class")
    ]
    coclass Labels
    {
        [default] interface ILabels;
    };
    [
        uuid(92ADD941-94C2-4A57-A058-E9999F21D6BF),
        helpstring("LabelCategory Class")
    ]
    coclass LabelCategory
    {
        [default] interface ILabelCategory;
    };
    [
        uuid(4D745AC7-D623-4F51-BA01-18793FC778A6),
        helpstring("Label Class")
    ]
    coclass Label
    {
        [default] interface ILabel;
    };
    [
        uuid(1A3B0D02-9265-41B0-84BB-9E09F262FF82),
        helpstring("ShapefileCategories Class")
    ]
    coclass ShapefileCategories
    {
        [default] interface IShapefileCategories;
    };
    [
        uuid(51464A2A-69F7-4CAD-8728-9608580210A3),
        helpstring("ShapefileCategory Class")
    ]
    coclass ShapefileCategory
    {
        [default] interface IShapefileCategory;
    };
    [
        uuid(1176C871-4C0B-48CF-85B6-926A7948E0F7),
        helpstring("Charts Class")
    ]
    coclass Charts
    {
        [default] interface ICharts;
    };

    [
        uuid(A109A2A1-775F-4FBF-B0C7-F703F8B0BC90),
        helpstring("Chart Class")
    ]
    coclass Chart
    {
        [default] interface IChart;
    };
    [
        uuid(60409E71-BBB8-491C-A48B-ADA7F383CB6E),
        helpstring("ColorScheme Class")
    ]
    coclass ColorScheme
    {
        [default] interface IColorScheme;
    };
    [
        uuid(8C429C40-4F0F-479A-B492-98819424801D),
        helpstring("ChartField Class")
    ]
    coclass ChartField
    {
        [default] interface IChartField;
    };
    [
        uuid(FF695B0C-4977-4D9E-88DD-0DF4FF7082BC),
        helpstring("LinePattern Class")
    ]
    coclass LinePattern
    {
        [default] interface ILinePattern;
    };
    [
        uuid(03A98C90-70FF-40C7-AD93-6BF8B41B170F),
        helpstring("LineSegment Class")
    ]
    coclass LineSegment
    {
        [default] interface ILineSegment;
    };

    [
        uuid(B0828DB2-3354-419F-82B0-AC0478DDB00D),
        helpstring("GeoProjection Class")
    ]
    coclass GeoProjection
    {
        [default] interface IGeoProjection;
    };
    [
        uuid(80CDFEE0-576F-4141-906E-877638A2AEF3),
        helpstring("GlobalSettings Class")
    ]
    coclass GlobalSettings
    {
        [default] interface IGlobalSettings;
    };
    [
        uuid(9C7B823D-B1BE-4C39-A552-8B148C008FC5),
        helpstring("Tiles Class")
    ]
    coclass Tiles
    {
        [default] interface ITiles;
        //[default, source] dispinterface _ITilesEvents;
    };
    [
        uuid(F2488D90-90B1-4862-BD16-81144151D284),
        helpstring("TileProviders Class")
    ]
    coclass TileProviders
    {
        [default] interface ITileProviders;
    };
    [
        uuid(051DEB36-4D72-4D36-A867-313244BE17C3),
        helpstring("Measuring Class")
    ]
    coclass Measuring
    {
        [default] interface IMeasuring;
    };
    [
        uuid(B8223915-5CDF-4F55-A4B7-7C7293F2FFFF),
        helpstring("ShapeValidationInfo Class")
    ]
    coclass ShapeValidationInfo
    {
        [default] interface IShapeValidationInfo;
    };
    [
        uuid(DECA4D77-5191-4B19-9670-ECB9D36E2206),
        helpstring("FieldStatOperations Class")
    ]
    coclass FieldStatOperations
    {
        [default] interface IFieldStatOperations;
    };
    [
        uuid(EE5738FA-2DC4-411B-91DC-2E6AF5C3543E),
        helpstring("FileManager Class")
    ]
    coclass FileManager
    {
        [default] interface IFileManager;
    };

    [
        uuid(33F91D20-8EBA-4033-AE3B-15A7041087BB)
    ]
    coclass OgrDatasource
    {
        [default] interface IOgrDatasource;
    };
    [
        uuid(E13D56FE-78CE-4ECD-BF0F-3E9C9DDC73F9)
    ]
    coclass OgrLayer
    {
        [default] interface IOgrLayer;
    };
    [
        uuid(0E144EFF-81A9-4B83-850C-47D1729331F5)
    ]
    coclass UndoList
    {
        [default] interface IUndoList;
    };
    [
        uuid(9A7CAA08-4DE0-439F-BA1D-3639513069BE)
    ]
    coclass Identifier
    {
        [default] interface IIdentifier;
    };
    [
        uuid(85EA46DF-FCB8-44A2-BFB0-2F5B0162768D)
    ]
    coclass SelectionList
    {
        [default] interface ISelectionList;
    };
    [
        uuid(60C40EC8-F1C5-4197-918C-CF2CEFCAB554)
    ]
    coclass DrawingRectangle
    {
        [default] interface IDrawingRectangle;
    };
    [
        uuid(B451AA42-A353-4AB0-AF0E-88C5BCE3B2B6)
    ]
    coclass GdalRasterBand
    {
        [default] interface IGdalRasterBand;
    };
    [
        uuid(746E104A-61EF-4A32-87C0-744354C06A18)
    ]
    coclass Histogram
    {
        [default] interface IHistogram;
    };
    [
        uuid(3CD18F05-E70D-4846-81F8-98B14CAD8FA8)
    ]
    coclass GdalDataset
    {
        [default] interface IGdalDataset;
    };
    [
        uuid(0FCBDC95-AC81-4902-90CC-D93B39D45928)
    ]
    coclass GdalDriver
    {
        [default] interface IGdalDriver;
    };
    [
        uuid(660E3B2D-D844-4BB3-9050-1D29EE9527B6)
    ]
    coclass GdalDriverManager
    {
        [default] interface IGdalDriverManager;
    };
    [
        uuid(CA6176E3-B589-437A-920B-99E65B23BD3B)
    ]
    coclass Function
    {
        [default] interface IFunction;
    };
    [
        uuid(2DD50E56-B81B-4456-9B32-6B763CB304E2)
    ]
    coclass Expression
    {
        [default] interface IExpression;
    };

    [
        uuid(EE9A0CDA-162C-4663-A48F-A5A29C1071C6)
    ]
    coclass WmsLayer
    {
        [default] interface IWmsLayer;
    };

    [
        uuid(7DDFE06A-0461-4F72-9865-8274A91EB052)
    ]
    coclass GdalUtils
    {
        [default] interface IGdalUtils;
    };
};
